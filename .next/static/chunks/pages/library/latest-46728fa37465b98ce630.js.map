{"version":3,"sources":["webpack://_N_E/./components/Pill.ts","webpack://_N_E/./pages/library/latest/index.ts","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?3f76"],"names":["Pill","props","red","colors","accentRed","textSecondary","borderOnly","grey55","grey90","Library","h","Box","gap","BackButton","href","posts","sort","a","b","Date","date","map","post","LibraryPost","style","maxWidth","tags","tag","Tag","tagType","Link","path","textDecoration","title","author","description","tagColors","grey35","window","__NEXT_P","push"],"mappings":"yKAEaA,EAAO,YAAO,OAAP,qBAAH,4IAQR,SAAAC,GAAK,OAAIA,EAAMC,IAAMC,IAAOC,UAAYD,IAAOE,gBARvC,KASf,SAAAJ,GAAK,OAAGA,EAAMK,WAAN,4BACaL,EAAMC,IAAMC,IAAOC,UAAYD,IAAOI,OADnD,iCAEaJ,IAAOK,OAFpB,OATO,K,4MCiDFC,UA1BC,SAACR,GACf,OAAOS,IAAEC,IAAK,CAACC,IAAK,IAAZ,CACNF,IAAEC,IAAK,CAACC,IAAK,GAAG,CACZF,IAAEG,IAAY,CAACC,KAAM,YAAa,eAClCJ,IAAE,KAAM,mBAHN,mBAKHT,EAAMc,MAAMC,MAAK,SAACC,EAAGC,GACtB,OAAI,IAAIC,KAAKF,EAAEG,MAAQ,IAAID,KAAKD,EAAEE,MAAc,GACxC,KACPC,KAAI,SAAAC,GACL,OAAOrB,GAASS,IAAEa,EAAaD,UAmBrC,IAAMC,EAAc,SAACtB,GACnB,OAAOS,IAAEC,IAAK,CAACC,IAAK,GAAIY,MAAO,CAACC,SAAU,MAAQ,CAChDf,IAAEC,IAAK,CAACD,GAAE,GAAOT,EAAMyB,MAAQzB,EAAMyB,KAAKL,KAAI,SAAAM,GAAG,OAAIjB,IAAEkB,EAAK,CAACC,QAASF,QACtEjB,IAAEC,IAAK,CAACC,IAAI,GAAI,CACdF,IAAEoB,IAAM,CAAChB,KAAMb,EAAM8B,MAAOrB,IAAE,YAAa,CAACc,MAAO,CAACQ,eAAe,SAAStB,IAAE,KAAMT,EAAMgC,SAC1FvB,IAAE,kBAAD,oBAA0BT,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAOiC,OAAjC,qBAA8CjC,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOmB,SAExDV,IAAE,MAAO,CACPA,IAAE,QAAST,EAAMkC,kBAMjBC,EAA+C,CACjD,aAAgB,UAChB,cAAe,UACf,kBAAmB,UACnB,mBAAoB,UACpB,uBAAwB,UACxB,iBAAkB,UAClB,WAAc,WAIZR,EAAM,YAAO5B,IAAP,sBAAH,qBACe,SAAAC,GAAK,OAAImC,EAAUnC,EAAM4B,UAAY1B,IAAOkC,SAD3D,mCAIW,SAAApC,GAAK,OAAIA,EAAM4B,UAJ1B,Q,sBC9EFS,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,kBACA,WACE,OAAO,EAAQ,a","file":"static/chunks/pages/library/latest-46728fa37465b98ce630.js","sourcesContent":["import styled from '@emotion/styled'\nimport {colors} from './Tokens'\nexport const Pill = styled('span')<{borderOnly?: boolean, red?: boolean}>`\nheight: min-content;\nwidth: fit-content;\nfont-weight: bold;\nfont-family: Roboto Mono;\npadding: 2px 8px;\nfont-size: 0.75rem;\nborder-radius: 4px;\ncolor: ${props => props.red ? colors.accentRed : colors.textSecondary};\n${props=> props.borderOnly\n? `border: 2px solid ${props.red ? colors.accentRed : colors.grey55};`\n: `background-color: ${colors.grey90};`\n}\n`\n","import h from 'react-hyperscript'\nimport styled from '@emotion/styled'\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport { InferGetStaticPropsType } from 'next'\nimport Link from 'next/link'\n\nimport { Box } from 'components/Layout'\nimport { colors } from 'components/Tokens'\nimport {Pill} from 'components/Pill'\nimport { BackButton } from 'components/Button'\n\nexport type  Library = {\n  title:string,\n  author:string,\n  date:string,\n  path: string,\n  description:string,\n  tags:string[]\n}\n\n//the Library - Latest layout is defined here\n\ntype Props = InferGetStaticPropsType<typeof getStaticProps>\nconst Library = (props:Props) => {\n  return h(Box, {gap: 64}, [\n    h(Box, {gap: 8},[\n        h(BackButton, {href: \"/library\"}, 'Collections'),\n        h('h1', 'Latest Posts'),\n      ]),\n    ...props.posts.sort((a, b) => {\n      if (new Date(a.date) < new Date(b.date)) return 1\n      return -1\n    }).map(post=>{\n      return props && h(LibraryPost, post)\n    })\n  ])\n}\n\nexport const getStaticProps = async () =>{\n    let posts = fs.readdirSync('./pages/library').map((file)=>{\n      if(fs.lstatSync(path.join('./pages/library/', file)).isDirectory()) return\n      let content = fs.readFileSync('./pages/library/'+file)\n      let {data} = matter(content)\n      return {...data, path: '/library/'+file.slice(0, -4)} as Library\n    }).filter(x=>x!==undefined)\n  \n    return {props: {posts:posts as Library[]}} as const\n  }\n\nexport default Library\n\n// This defines the layout for a single library post (tags, title, author, publish date, description)\nconst LibraryPost = (props:Library) => {\n  return h(Box, {gap: 16, style: {maxWidth: 640}} , [\n    h(Box, {h:true}, props.tags && props.tags.map(tag => h(Tag, {tagType: tag}))),\n    h(Box, {gap:8}, [\n      h(Link, {href: props.path}, h('a.notBlue', {style: {textDecoration:'none'}},h('h2', props.title))),\n      h('p.textSecondary', `by ${props?.author} | ${ props?.date}`),\n    ]),\n    h('div', [\n      h('p.big', props.description)\n    ])\n  ])\n}\n\n// To add new tag types, add them to this object. Add the tag type and a color the tag should be.\nconst tagColors:{[key: string]:string | undefined} = {\n    'announcement': '#cc2288',\n    'book-review': '#cc3322',\n    'learning-design': '#11aacc',\n    'learning-writing': '#6B8648',\n    'learning-programming': '#cc2288',\n    'hyperlink-meta': '#1d44d6',\n    'stargazing': '#6B8648'\n}\n\n// This is a function that creates tags with the appropriate tag type and color based on the list above.\nconst Tag = styled(Pill) <{tagType: string}>`\n    background-color: ${props => tagColors[props.tagType] || colors.grey35};\n    color: white;\n    &::after{\n        content: \"${props => props.tagType}\";\n    }\n`\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/library/latest\",\n        function () {\n          return require(\"private-next-pages/library/latest/index.ts\");\n        }\n      ]);\n    "],"sourceRoot":""}