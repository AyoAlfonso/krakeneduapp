{"version":3,"sources":["webpack://_N_E/./components/Cards/index.ts","webpack://_N_E/./components/Pill.ts","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?08d1","webpack://_N_E/./pages/library.ts"],"names":["Card","colors","grey15","textPrimary","Pill","props","red","accentRed","textSecondary","borderOnly","grey55","grey90","window","__NEXT_P","push","collections","announcement","title","description","bookshelf","interviews","Library","h","Box","gap","style","display","flexWrap","href","alignSelf","RSS","float","Info","Object","keys","flatMap","slug","collection","posts","filter","p","tags","includes","sort","a","b","Date","date","width","Link","length","FlexGrid","min","mobileMin","slice","map","path","passHref","height","getTime","NewPill"],"mappings":"yKAGaA,EAAO,YAAO,IAAP,sBAAH,2FAKDC,IAAOC,OALN,+BAQRD,IAAOE,YARC,uHAiBKF,IAAOC,OAjBZ,qB,kGCDJE,EAAO,YAAO,OAAP,qBAAH,4IAQR,SAAAC,GAAK,OAAIA,EAAMC,IAAML,IAAOM,UAAYN,IAAOO,gBARvC,KASf,SAAAH,GAAK,OAAGA,EAAMI,WAAN,4BACaJ,EAAMC,IAAML,IAAOM,UAAYN,IAAOS,OADnD,iCAEaT,IAAOU,OAFpB,OATO,K,sBCDVC,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,WACA,WACE,OAAO,EAAQ,Y,wQCoBZC,EAAc,CACzBC,aAAc,CACZC,MAAO,gBACPC,YACE,0EAEJ,kBAAmB,CACjBD,MAAO,kBACPC,YACE,2EAEJC,UAAW,CACTF,MAAO,YACPC,YACE,2EAMJE,WAAY,CACVH,MAAO,aACPC,YAAa,sDAiEFG,UAtDC,SAAChB,GACf,OAAOiB,IAAEC,IAAK,CAACC,IAAK,IAAZ,CACNF,IAAEC,IAAK,CAACC,IAAK,GAAIF,GAAG,EAAMG,MAAM,CAACC,QAAQ,OAAQC,SAAS,SAAU,CAClEL,IAAE,KAAM,qBACRA,IAAE,IAAK,CAACM,KAAK,WAAYH,MAAM,CAACI,UAAW,WAAYC,KACvDR,IAAE,IAAK,CAACM,KAAK,kBAAmBH,MAAM,CAACI,UAAW,SAAUE,MAAO,UAAW,wBAEhFT,IAAE,QAAD,mGACDA,IAAEU,IAAM,CAAC,gHAEPV,IAAE,IAAK,CAACM,KAAM,WAAb,oBAFK,OAPF,mBAYHK,OAAOC,KAAKnB,GAAaoB,SAAQ,SAAAC,GAClC,IAAIC,EAAatB,EAAYqB,GACzBE,EAAQjC,EAAMiC,MAAMC,QAAO,SAAAC,GAAC,OAAEA,EAAEC,MAAQD,EAAEC,KAAKC,SAASN,MAAOO,MAAK,SAACC,EAAGC,GAC1E,OAAO,IAAIC,KAAKF,EAAEG,MAAQ,IAAID,KAAKD,EAAEE,MAAQ,GAAK,KAEpD,MAAO,CACLzB,IAAEC,IAAK,CAACC,IAAK,IAAK,CAChBF,IAAEC,IAAK,CAACC,IAAI,EAAGwB,MAAO,KAAM,CAC1B1B,IAAE,KAAMe,EAAWpB,OACnBK,IAAE,QAASe,EAAWnB,aACtBI,IAAE2B,IAAM,CAACrB,KAAM,wBAAwBQ,GAAOd,IAAE,IAAD,yBAAwBgB,EAAMY,OAA9B,SAEjD5B,IAAE6B,IAAU,CAACC,IAAI,IAAKC,UAAW,KAAKf,EAAMgB,MAAM,EAAE,GAAGC,KAAI,SAAAf,GAAC,OAAElB,IAAE2B,IAAM,CAACrB,KAAKY,EAAEgB,KAAMC,UAAU,GAAOnC,IAAEtB,IAAM,CAACyB,MAAM,CAACiC,OAAO,gBAAiB,CACzIpC,IAAEC,IAAK,CAACC,IAAK,IAAI,CACfF,IAAEC,IAAK,CAACC,IAAK,GAAI,CACfF,IAAE,KAAMkB,EAAEvB,OACV,IAAI6B,KAAKN,EAAEO,MAAQ,IAAID,MAAM,IAAIA,MAAQa,UAAY,QAA2BrC,IAAEsC,EAAS,QAAU,OAGvGtC,IAAE,IAAKkB,EAAEtB,wBAKjBI,IAAE,UAEHgC,MAAM,GAAG,OAkBhB,IAAMM,EAAU,YAAOxD,IAAP,oBAAH,iE","file":"static/chunks/pages/library-4e16a9092dc059e5b31e.js","sourcesContent":["import styled from '@emotion/styled'\nimport {colors } from 'components/Tokens'\n\nexport const Card = styled('a')`\nbox-sizing: border-box;\npadding: 16px;\nbackground-color: white;\nborder: 1px solid;\nborder-color: ${colors.grey15};\ntext-decoration: none;\n\ncolor: ${colors.textPrimary};\n\n&:visited {\ncolor: inherit;\n}\n\n&:hover, &:active, &:focus {\ncursor: pointer;\ntransform: translate(-4px, -4px);\nbox-shadow: 4px 4px ${colors.grey15};\ncolor: inherit;\n}\n`\n","import styled from '@emotion/styled'\nimport {colors} from './Tokens'\nexport const Pill = styled('span')<{borderOnly?: boolean, red?: boolean}>`\nheight: min-content;\nwidth: fit-content;\nfont-weight: bold;\nfont-family: Roboto Mono;\npadding: 2px 8px;\nfont-size: 0.75rem;\nborder-radius: 4px;\ncolor: ${props => props.red ? colors.accentRed : colors.textSecondary};\n${props=> props.borderOnly\n? `border: 2px solid ${props.red ? colors.accentRed : colors.grey55};`\n: `background-color: ${colors.grey90};`\n}\n`\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/library\",\n        function () {\n          return require(\"private-next-pages/library.ts\");\n        }\n      ]);\n    ","import h from 'react-hyperscript'\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport { InferGetStaticPropsType } from 'next'\nimport Link from 'next/link'\n\nimport { Box, FlexGrid } from 'components/Layout'\nimport { Card } from 'components/Cards'\n// import { prettyDate } from 'src/utils'\nimport { Pill } from 'components/Pill'\nimport {RSS} from 'components/Icons'\nimport styled from '@emotion/styled'\nimport { Info } from 'components/Form'\n\nexport type  Library = {\n  title:string,\n  author:string,\n  date:string,\n  path: string,\n  description:string,\n  tags:string[]\n}\n\nexport const collections = {\n  announcement: {\n    title: \"Announcements\",\n    description:\n      \"New courses, feature notes, upcoming events, and other KrakenEdu news.\",\n  },\n  \"learning-design\": {\n    title: \"Learning Design\",\n    description:\n      \"Essays and guides about aspects of creating great learning experiences.\",\n  },\n  bookshelf: {\n    title: \"Bookshelf\",\n    description:\n      \"Highlighting and reviewing our favorite books on learning and pedagogy.\",\n  },\n  // \"changelog\": {\n  //   title: \"Changelog\",\n  //   description: \"Behind the scenes on KrakenEdu development.\",\n  // },\n  interviews: {\n    title: \"Interviews\",\n    description: \"Conversations with amazing teachers and learners.\",\n  },\n  // \"resources\": {\n  //   title: \"Resources\",\n  //   description: \"Our favorite projects, websites, syllabi, and other learning resources.\",\n  // },\n};\n\n//the KrakenEdu Library layout is defined here\n\ntype Props = InferGetStaticPropsType<typeof getStaticProps>\nconst Library = (props:Props) => {\n  return h(Box, {gap: 32}, [\n    h(Box, {gap: 32, h: true, style:{display:\"flex\", flexWrap:\"wrap\"}}, [\n      h('h1', 'KrakenEdu Library'),\n      h('a', {href:'/rss.xml', style:{alignSelf: 'center'}}, RSS),\n      h('a', {href:'/library/latest', style:{alignSelf: 'center', float: 'right'}}, 'chronological feed'),\n    ]),\n    h('p.big', `Welcome to our internet center for teaching and learning â€” enjoy browsing the collections!`),\n    h(Info, [\n      `ðŸ““ For a general introduction to KrakenEdu and overview of how the platform works, please read the `,\n      h('a', {href: `/manual`}, `KrakenEdu Manual`),\n      `.`\n    ]),\n    ...Object.keys(collections).flatMap(slug=>{\n      let collection = collections[slug as keyof typeof collections]\n      let posts = props.posts.filter(p=>p.tags && p.tags.includes(slug)).sort((a, b)=>{\n        return new Date(a.date) < new Date(b.date) ? 1 : -1\n      })\n      return [\n        h(Box, {gap: 32}, [\n          h(Box, {gap:8, width: 640}, [\n            h('h2', collection.title),\n            h('p.big', collection.description),\n            h(Link, {href: \"/library/collections/\"+slug}, h('a', `See all posts (${posts.length})`))\n          ]),\n          h(FlexGrid, {min:250, mobileMin: 200},posts.slice(0,3).map(p=>h(Link, {href:p.path, passHref: true}, h(Card, {style:{height:'min-content'}}, [\n              h(Box, {gap: 16},[\n                h(Box, {gap: 8}, [\n                  h('h3', p.title),\n                  new Date(p.date) > new Date((new Date()).getTime() - 60 * 60 * 24 * 7 * 1000) ? h(NewPill, \"new!\") : null,\n                  // h('span.textSecondary', `${p.author} | ${prettyDate(p.date)}`)\n                ]),\n                h('p', p.description)\n              ])\n            ])))\n          )\n        ]),\n        h('hr')\n      ]\n    }).slice(0,-1),\n  ])\n}\n\nexport const getStaticProps = async () =>{\n  let posts = fs.readdirSync('./pages/library').map((file)=>{\n    if(fs.lstatSync(path.join('./pages/library/', file)).isDirectory()) return\n    let content = fs.readFileSync('./pages/library/'+file)\n    let {data} = matter(content)\n    return {...data, path: '/library/'+file.slice(0, -4)} as Library\n  }).filter(x=>x!==undefined)\n\n  return {props: {posts:posts as Library[]}} as const\n}\n\nexport default Library\n\n// pill to tag new posts - published in the last 7 days\nconst NewPill = styled(Pill)`\n    background-color: green;\n    color: white;\n`\n\n// // To add new tag types, add them to this object. Add the tag type and a color the tag should be.\n// const tagColors:{[key: string]:string | undefined} = {\n//     'announcement': '#cc2288',\n//     'book-review': '#cc3322',\n//     'learning-design': '#11aacc',\n//     'hyperlink-meta': '#1d44d6',\n//     'stargazing': '#6B8648'\n// }\n\n// // This is a function that creates tags with the appropriate tag type and color based on the list above.\n// const Tag = styled(Pill) <{tagType: string}>`\n//     background-color: ${props => tagColors[props.tagType] || colors.grey35};\n//     color: white;\n//     &::after{\n//         content: \"${props => props.tagType}\";\n//     }\n// `"],"sourceRoot":""}