{"ast":null,"code":"import { sendEventRSVPEmail, sendEventRSVPNoAccountEmail } from 'emails';\nimport { APIHandler } from \"src/apiHelpers\";\nimport { stripe } from 'src/stripe';\nimport { getToken } from \"src/token\";\nimport { createEventInvite } from 'src/calendar';\nimport prisma from \"lib/prisma\";\nexport default APIHandler(POSTEventRSVP);\n\nasync function POSTEventRSVP(req) {\n  let user = getToken(req);\n  let msg = req.body;\n  let eventId = parseInt(req.query.id);\n  if (Number.isNaN(eventId)) return {\n    status: 400,\n    result: \"ERROR: event id is not a number\"\n  };\n  let event = await prisma.standalone_events.findUnique({\n    where: {\n      event: eventId\n    },\n    select: {\n      cost: true,\n      max_attendees: true,\n      events: {\n        select: {\n          name: true,\n          description: true,\n          id: true,\n          location: true,\n          start_date: true,\n          end_date: true,\n          people_in_events: true,\n          no_account_rsvps: true\n        }\n      }\n    }\n  });\n  if (!event) return {\n    status: 404,\n    result: \"ERROR: no event found\"\n  };\n\n  if (event.max_attendees && event.events.people_in_events.length + event.events.no_account_rsvps.length >= event.max_attendees) {\n    return {\n      status: 400,\n      result: \"ERROR: event is full\"\n    };\n  }\n\n  if (!user) {\n    if (!(msg !== null && msg !== void 0 && msg.email) || !(msg !== null && msg !== void 0 && msg.name)) return {\n      status: 400,\n      result: \"ERROR: no user logged in\"\n    };\n    if (event.cost !== 0) return {\n      status: 401,\n      result: \"ERROR: must be logged in to RSVP to paid event\"\n    };\n\n    if (event.events.no_account_rsvps.find(x => x.email === (msg === null || msg === void 0 ? void 0 : msg.email))) {\n      return {\n        status: 200,\n        result: {\n          enrolled: true\n        }\n      };\n    }\n\n    let Content = Buffer.from(createEventInvite({\n      id: event.events.id,\n      description: event.events.description,\n      start_date: event.events.start_date,\n      end_date: event.events.end_date,\n      summary: event.events.name,\n      location: event.events.location\n    }).toString()).toString('base64');\n    await Promise.all([sendEventRSVPNoAccountEmail(msg.email, {\n      name: msg.name,\n      event_page_url: `https://${window.location.origin}/events/${event.events.id}`,\n      event_name: event.events.name\n    }, {\n      Attachments: [{\n        Name: \"event.ics\",\n        ContentType: \"text/calender\",\n        ContentID: null,\n        Content\n      }]\n    }), prisma.no_account_rsvps.create({\n      data: {\n        events: {\n          connect: {\n            id: event.events.id\n          }\n        },\n        email: msg.email,\n        name: msg.name\n      }\n    })]);\n    return {\n      status: 200,\n      result: {\n        enrolled: true\n      }\n    };\n  }\n\n  if (event.events.people_in_events.find(x => x.person === (user === null || user === void 0 ? void 0 : user.id))) {\n    return {\n      status: 400,\n      result: \"ERROR: user is already enrolled\"\n    };\n  }\n\n  if (event.cost == 0) {\n    await Promise.all([sendEventRSVPEmail(user.email, {\n      name: user.display_name || user.username,\n      event_page_url: `https://${window.location.origin}/events/${event.events.id}`,\n      event_name: event.events.name\n    }), prisma.people_in_events.create({\n      data: {\n        events: {\n          connect: {\n            id: event.events.id\n          }\n        },\n        people: {\n          connect: {\n            id: user.id\n          }\n        }\n      }\n    })]);\n    return {\n      status: 200,\n      result: {\n        enrolled: true\n      }\n    };\n  }\n\n  let metadata = {\n    type: 'event',\n    eventId: eventId.toString(),\n    userId: user.id\n  };\n  let origin = new URL(req.headers.referer || '').origin;\n  let session = await stripe.checkout.sessions.create({\n    metadata,\n    payment_method_types: ['card'],\n    payment_intent_data: {\n      transfer_group: 'event-' + eventId.toString()\n    },\n    line_items: [{\n      name: event.events.name,\n      amount: event.cost * 100,\n      currency: \"usd\",\n      quantity: 1\n    }],\n    cancel_url: `${origin}/events/${eventId}`,\n    success_url: `${origin}/events/${eventId}/?success`\n  });\n  return {\n    status: 200,\n    result: {\n      sessionId: session.id\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/events/[id]/rsvp.ts"],"names":["sendEventRSVPEmail","sendEventRSVPNoAccountEmail","APIHandler","stripe","getToken","createEventInvite","prisma","POSTEventRSVP","req","user","msg","body","eventId","parseInt","query","id","Number","isNaN","status","result","event","standalone_events","findUnique","where","select","cost","max_attendees","events","name","description","location","start_date","end_date","people_in_events","no_account_rsvps","length","email","find","x","enrolled","Content","Buffer","from","summary","toString","Promise","all","event_page_url","window","origin","event_name","Attachments","Name","ContentType","ContentID","create","data","connect","person","display_name","username","people","metadata","type","userId","URL","headers","referer","session","checkout","sessions","payment_method_types","payment_intent_data","transfer_group","line_items","amount","currency","quantity","cancel_url","success_url","sessionId"],"mappings":"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","sourcesContent":["import { sendEventRSVPEmail, sendEventRSVPNoAccountEmail } from 'emails'\nimport { APIHandler, Request, ResultType } from \"src/apiHelpers\"\nimport { stripe, StripePaymentMetaData } from 'src/stripe'\nimport { getToken } from \"src/token\"\nimport { createEventInvite } from 'src/calendar'\nimport prisma from \"lib/prisma\";\n\nexport default APIHandler(POSTEventRSVP)\n\nexport type EventRSVPMessage = {\n  email: string,\n  name: string\n} | null\n\nexport type EventRSVPResult = ResultType<typeof POSTEventRSVP>\nasync function POSTEventRSVP(req:Request){\n  let user = getToken(req)\n  let msg  = req.body as EventRSVPMessage\n\n  let eventId = parseInt(req.query.id as string)\n  if(Number.isNaN(eventId)) return {status: 400, result: \"ERROR: event id is not a number\"} as const\n  let event = await prisma.standalone_events.findUnique({where:{event: eventId}, select:{\n    cost: true,\n    max_attendees: true,\n    events:{\n      select:{\n        name: true,\n        description: true,\n        id: true,\n        location: true,\n        start_date: true,\n        end_date: true,\n        people_in_events: true,\n        no_account_rsvps: true\n      }\n    }\n  }})\n  if(!event) return {status:404, result: \"ERROR: no event found\"} as const\n  if(event.max_attendees\n    && (event.events.people_in_events.length + event.events.no_account_rsvps.length) >= event.max_attendees) {\n    return {status: 400, result: \"ERROR: event is full\"} as const\n  }\n\n  if(!user) {\n    if(!msg?.email || !msg?.name) return {status:400, result:\"ERROR: no user logged in\"} as const\n    if(event.cost !== 0) return {status: 401, result: \"ERROR: must be logged in to RSVP to paid event\"} as const\n    if(event.events.no_account_rsvps.find(x=>x.email=== msg?.email)) {\n      return {status: 200, result: {enrolled: true}} as const\n    }\n\n    let Content = Buffer.from(createEventInvite({\n      id: event.events.id,\n      description: event.events.description,\n      start_date: event.events.start_date,\n      end_date: event.events.end_date,\n      summary: event.events.name,\n      location: event.events.location\n    }).toString()).toString('base64')\n\n    await Promise.all([\n      sendEventRSVPNoAccountEmail(msg.email, {\n        name: msg.name,\n        event_page_url: `https://${window.location.origin}/events/${event.events.id}`,\n        event_name: event.events.name\n      }, {Attachments: [\n        {Name: \"event.ics\", ContentType: \"text/calender\", ContentID: null, Content}\n      ]}),\n      prisma.no_account_rsvps.create({\n       data: {\n          events: {connect:{id: event.events.id}},\n          email: msg.email,\n          name: msg.name\n        }\n      })\n    ])\n\n    return {status: 200, result: {enrolled: true}} as const\n  }\n\n  if(event.events.people_in_events.find(x=>x.person === user?.id)) {\n    return {status:400, result: \"ERROR: user is already enrolled\"} as const\n  }\n\n  if(event.cost == 0) {\n    await Promise.all([\n      sendEventRSVPEmail(user.email, {\n        name: user.display_name || user.username,\n        event_page_url: `https://${window.location.origin}/events/${event.events.id}`,\n        event_name: event.events.name\n      }),\n      prisma.people_in_events.create({\n        data: {\n          events: {connect:{id: event.events.id}},\n          people: {connect:{id: user.id}}\n        }\n      })\n    ])\n    return {status: 200, result: {enrolled: true}} as const\n  }\n\n  let metadata: StripePaymentMetaData = {\n    type: 'event',\n    eventId: eventId.toString(),\n    userId: user.id,\n  }\n\n\n  let origin = (new URL(req.headers.referer || '')).origin\n  let session = await stripe.checkout.sessions.create({\n    metadata,\n    payment_method_types: ['card'],\n    payment_intent_data: {\n      transfer_group: 'event-'+eventId.toString()\n    },\n    line_items: [{\n      name: event.events.name,\n      amount: event.cost * 100,\n      currency: \"usd\",\n      quantity: 1\n    }],\n    cancel_url: `${origin}/events/${eventId}`,\n    success_url: `${origin}/events/${eventId}/?success`,\n  })\n\n  return {\n    status: 200,\n    result: {sessionId: session.id}\n  } as const\n\n\n}\n"]},"metadata":{},"sourceType":"module"}