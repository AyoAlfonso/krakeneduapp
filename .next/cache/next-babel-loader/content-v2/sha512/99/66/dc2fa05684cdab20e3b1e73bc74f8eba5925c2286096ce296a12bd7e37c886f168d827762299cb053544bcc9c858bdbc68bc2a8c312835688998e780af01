{"ast":null,"code":"import h from 'react-hyperscript';\nimport { useRouter } from 'next/router';\n\nvar SSO = function SSO(_ref) {\n  var error = _ref.error;\n  var router = useRouter();\n  var _router$query = router.query,\n      sso = _router$query.sso,\n      sig = _router$query.sig;\n  if (!sso || !sig) return h('div', 'Invalid SSO parameters!');\n  if (error) return h('p', 'An error occured, please check with the reffering site');\n  return h('h1', 'Logging you onto discourse...');\n};\n\nexport var __N_SSP = true;\nexport default SSO;","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/sso.ts"],"names":["h","useRouter","SSO","error","router","query","sso","sig"],"mappings":"AAAA,OAAOA,CAAP,MAAc,mBAAd;AAGA,SAAQC,SAAR,QAAwB,aAAxB;;AAQA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAmB;AAAA,MAAjBC,KAAiB,QAAjBA,KAAiB;AAC7B,MAAIC,MAAM,GAAGH,SAAS,EAAtB;AAD6B,sBAEZG,MAAM,CAACC,KAFK;AAAA,MAExBC,GAFwB,iBAExBA,GAFwB;AAAA,MAEnBC,GAFmB,iBAEnBA,GAFmB;AAI7B,MAAG,CAACD,GAAD,IAAQ,CAACC,GAAZ,EAAiB,OAAOP,CAAC,CAAC,KAAD,EAAQ,yBAAR,CAAR;AAEjB,MAAGG,KAAH,EAAU,OAAOH,CAAC,CAAC,GAAD,EAAM,wDAAN,CAAR;AAEV,SAAOA,CAAC,CAAC,IAAD,EAAO,+BAAP,CAAR;AACD,CATD;;;AAWA,eAAeE,GAAf","sourcesContent":["import h from 'react-hyperscript'\nimport querystring from 'querystring'\nimport crypto from 'crypto'\nimport {useRouter} from 'next/router'\nimport { GetServerSideProps } from 'next'\n\nimport {getToken} from 'src/token'\nimport {  makeSSOPayload } from 'src/discourse'\nimport {DISCOURSE_URL} from 'src/constants'\n\ntype Props = {error:boolean}\nconst SSO = ({error}:Props) => {\n  let router = useRouter()\n  let {sso, sig} = router.query\n\n  if(!sso || !sig) return h('div', 'Invalid SSO parameters!')\n\n  if(error) return h('p', 'An error occured, please check with the reffering site')\n\n  return h('h1', 'Logging you onto discourse...')\n}\n\nexport default SSO\n\nexport const getServerSideProps:GetServerSideProps = async ({req,res, query}) => {\n  let token = getToken(req)\n  if(!token) {\n    res.writeHead(301, {Location: '/login?redirect='+encodeURIComponent(req.url as string)})\n    res.end()\n    return {props:{}}\n  }\n  let {sso, sig} = query\n  if(typeof sso !== 'string') return {props: {error: true}}\n\n  const hmac1 = crypto.createHmac('sha256', process.env.DISCOURSE_SECRET || '');\n  hmac1.update(Buffer.from(sso))\n\n  let verifySig = hmac1.digest('hex')\n  if(verifySig !== sig) return  {props: {error: true}}\n\n  let {nonce} = querystring.parse(Buffer.from(sso as string, 'base64').toString())\n\n  res.writeHead(301, {\n    Location: `${DISCOURSE_URL}/session/sso_login?`\n      + makeSSOPayload({\n        nonce:nonce as string ,\n        email:token.email,\n        external_id: token.id\n      })\n  })\n  res.end()\n  return {props:{}}\n\n}\n"]},"metadata":{},"sourceType":"module"}