{"ast":null,"code":"import { APIHandler } from '../../../../src/apiHelpers';\nimport { getToken } from '../../../../src/token';\nimport { updateCategory, updateGroup } from '../../../../src/discourse';\nimport { slugify } from 'src/utils';\nimport * as t from 'runtypes';\nimport prisma from \"lib/prisma\";\nconst UpdateCourseMsgValidator = t.Partial({\n  invite_only: t.Boolean,\n  cost: t.Number,\n  cohort_max_size: t.Number,\n  name: t.String,\n  card_image: t.String,\n  status: t.Union(t.Literal(\"live\"), t.Literal('draft')),\n  prerequisites: t.String,\n  duration: t.String,\n  description: t.String\n});\nexport default APIHandler({\n  POST: updateCourse,\n  GET: getCourseData\n});\n\nasync function updateCourse(req) {\n  let msg;\n\n  try {\n    msg = UpdateCourseMsgValidator.check(req.body);\n  } catch (e) {\n    return {\n      status: 400,\n      result: e.toString()\n    };\n  }\n\n  let courseId = parseInt(req.query.id);\n  if (Number.isNaN(courseId)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let user = getToken(req);\n  if (!user) return {\n    status: 403,\n    result: \"ERROR: No user logged in\"\n  };\n  let course = await prisma.courses.findUnique({\n    where: {\n      id: courseId\n    },\n    select: {\n      status: true,\n      name: true,\n      category_id: true,\n      maintainer_groupTodiscourse_groups: true,\n      course_groupTodiscourse_groups: true,\n      course_maintainers: {\n        where: {\n          maintainer: user.id\n        }\n      },\n      course_cohorts: {\n        select: {\n          discourse_groups: true,\n          name: true\n        }\n      }\n    }\n  });\n  if (!course || course.course_maintainers.length === 0) return {\n    status: 403,\n    result: `ERROR: user is not maintainer of course ${courseId}`\n  };\n  if (msg.description && msg.description.length > 200) return {\n    status: 400,\n    result: \"ERROR: description must be less than 200 characters\"\n  };\n  if (msg.name && msg.name.length > 50) return {\n    status: 400,\n    result: \"ERROR: name must be less than 50 characters\"\n  };\n  let slug;\n\n  if (msg.name) {\n    slug = slugify(msg.name);\n    await Promise.all([updateGroup(course.maintainer_groupTodiscourse_groups.id, slug + '-m'), updateCategory(course.category_id, {\n      name: msg.name,\n      slug: slug\n    }), updateGroup(course.course_groupTodiscourse_groups.id, slug), ...course.course_cohorts.map(cohort => updateGroup(cohort.discourse_groups.id, slug + '-' + cohort.name))]);\n  }\n\n  let newData = await prisma.courses.update({\n    where: {\n      id: courseId\n    },\n    data: {\n      slug,\n      invite_only: msg.invite_only,\n      cohort_max_size: msg.cohort_max_size,\n      duration: msg.duration,\n      status: msg.status,\n      card_image: msg.card_image,\n      prerequisites: msg.prerequisites,\n      description: msg.description,\n      cost: msg.cost,\n      name: msg.name\n    }\n  });\n  return {\n    status: 200,\n    result: newData\n  };\n}\n\nexport const courseDataQuery = id => prisma.courses.findUnique({\n  where: {\n    id\n  },\n  include: {\n    course_maintainers: {\n      include: {\n        people: {\n          select: {\n            display_name: true,\n            username: true,\n            link: true,\n            bio: true\n          }\n        }\n      }\n    },\n    course_templates: true,\n    course_cohorts: {\n      include: {\n        courses: {\n          select: {\n            name: true\n          }\n        },\n        cohort_facilitators: {\n          select: {\n            facilitator: true,\n            people: {\n              select: {\n                display_name: true,\n                username: true\n              }\n            }\n          }\n        },\n        people: {\n          select: {\n            display_name: true,\n            username: true\n          }\n        },\n        people_in_cohorts: {\n          select: {\n            people: {\n              select: {\n                id: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nasync function getCourseData(req) {\n  let id = parseInt(req.query.id);\n  if (Number.isNaN(id)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let data = await courseDataQuery(id);\n  if (!data) return {\n    status: 403,\n    result: `ERROR: no course with id ${id} found`\n  };\n  return {\n    status: 200,\n    result: data\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/index.ts"],"names":["APIHandler","getToken","updateCategory","updateGroup","slugify","t","prisma","UpdateCourseMsgValidator","Partial","invite_only","Boolean","cost","Number","cohort_max_size","name","String","card_image","status","Union","Literal","prerequisites","duration","description","POST","updateCourse","GET","getCourseData","req","msg","check","body","e","result","toString","courseId","parseInt","query","id","isNaN","user","course","courses","findUnique","where","select","category_id","maintainer_groupTodiscourse_groups","course_groupTodiscourse_groups","course_maintainers","maintainer","course_cohorts","discourse_groups","length","slug","Promise","all","map","cohort","newData","update","data","courseDataQuery","include","people","display_name","username","link","bio","course_templates","cohort_facilitators","facilitator","people_in_cohorts"],"mappings":"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","sourcesContent":["import { ResultType, APIHandler, Request} from '../../../../src/apiHelpers'\nimport { getToken } from '../../../../src/token'\nimport { updateCategory, updateGroup } from '../../../../src/discourse'\nimport { slugify } from 'src/utils'\nimport * as t from 'runtypes'\nimport prisma from \"lib/prisma\";\n\nexport type UpdateCourseMsg = t.Static<typeof UpdateCourseMsgValidator>\n\nconst UpdateCourseMsgValidator = t.Partial({\n  invite_only: t.Boolean,\n  cost: t.Number,\n  cohort_max_size: t.Number,\n  name: t.String,\n  card_image: t.String,\n  status: t.Union(t.Literal(\"live\"), t.Literal('draft')),\n  prerequisites: t.String,\n  duration: t.String,\n  description: t.String\n})\n\nexport type UpdateCourseResponse = ResultType<typeof updateCourse>\nexport type CourseDataResult = ResultType<typeof getCourseData>\n\nexport default APIHandler({POST: updateCourse, GET:getCourseData})\n\nasync function updateCourse(req: Request) {\n  let msg\n  try {msg = UpdateCourseMsgValidator.check(req.body)}\n  catch(e) {return {status:400, result:e.toString()} as const }\n\n  let courseId = parseInt(req.query.id as string)\n  if(Number.isNaN(courseId)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n  let user = getToken(req)\n  if(!user) return {status: 403, result: \"ERROR: No user logged in\"} as const\n  let course = await prisma.courses.findUnique({\n    where:{id: courseId},\n    select: {\n      status: true,\n      name: true,\n      category_id: true,\n      maintainer_groupTodiscourse_groups: true,\n      course_groupTodiscourse_groups: true,\n      course_maintainers: {where: {maintainer: user.id}},\n      course_cohorts: {\n        select: {\n          discourse_groups: true,\n          name: true,\n        }\n      }\n    }\n  })\n  if(!course || course.course_maintainers.length === 0) return {\n    status: 403,\n    result: `ERROR: user is not maintainer of course ${courseId}`\n  } as const\n\n  if(msg.description && msg.description.length > 200) return {status: 400, result: \"ERROR: description must be less than 200 characters\"} as const\n  if(msg.name && msg.name.length > 50) return {status: 400, result: \"ERROR: name must be less than 50 characters\"} as const\n\n  let slug: string | undefined\n  if(msg.name) {\n    slug = slugify(msg.name)\n    await Promise.all([\n      updateGroup(course.maintainer_groupTodiscourse_groups.id, slug+'-m'),\n      updateCategory(course.category_id, {\n        name: msg.name,\n        slug: slug\n      }),\n      updateGroup(course.course_groupTodiscourse_groups.id, slug),\n      ...course.course_cohorts.map(cohort => updateGroup(cohort.discourse_groups.id, slug+'-'+cohort.name))\n    ])\n  }\n\n  let newData = await prisma.courses.update({\n    where: {id: courseId},\n    data: {\n      slug,\n      invite_only: msg.invite_only,\n      cohort_max_size: msg.cohort_max_size,\n      duration: msg.duration,\n      status: msg.status,\n      card_image: msg.card_image,\n      prerequisites: msg.prerequisites,\n      description: msg.description,\n      cost: msg.cost,\n      name: msg.name,\n    }\n  })\n\n  return {status: 200, result: newData} as const\n}\n\nexport const courseDataQuery = (id:number) => prisma.courses.findUnique({\n  where: {id},\n  include: {\n    course_maintainers: {\n      include: {\n        people: {select: {display_name: true, username: true, link: true, bio: true}}\n      }\n    },\n    course_templates: true,\n    course_cohorts: {\n      include: {\n        courses: {\n          select: {\n            name: true\n          }\n        },\n        cohort_facilitators: {\n          select: {\n            facilitator: true,\n            people:{\n              select:{\n                display_name: true,\n                username: true\n              }\n          }}\n        },\n        people: {\n          select: {\n            display_name: true,\n            username: true\n          }\n        },\n        people_in_cohorts: {\n          select: {\n            people: {\n              select: {\n                id: true\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n})\n\nasync function getCourseData(req: Request) {\n  let id = parseInt(req.query.id as string)\n  if(Number.isNaN(id) ) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n  let data = await courseDataQuery(id)\n\n  if(!data) return {status: 403, result: `ERROR: no course with id ${id} found`} as const\n  return {status:200, result: data} as const\n}\n"]},"metadata":{},"sourceType":"module"}