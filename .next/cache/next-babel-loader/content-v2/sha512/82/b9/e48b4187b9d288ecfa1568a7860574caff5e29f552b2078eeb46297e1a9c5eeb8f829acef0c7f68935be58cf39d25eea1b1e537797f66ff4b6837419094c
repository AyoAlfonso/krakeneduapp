{"ast":null,"code":"import _styled from \"@emotion/styled-base\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport h from 'react-hyperscript';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { useState, Fragment, useEffect, useRef } from 'react';\nimport { colors, Mobile } from '../Tokens';\nimport { Logo } from '../Icons';\nimport { Box, Seperator, FormBox, LabelBox } from './index';\nimport { useUserData } from '../../src/data';\nimport { useMediaQuery } from '../../src/hooks';\nimport { Textarea, Input } from '../Form';\nimport { Secondary, Primary, LinkButton } from '../Button';\nimport { Modal } from '../Modal';\nimport { useApi } from '../../src/apiHelpers';\n// import {DISCOURSE_URL} from 'src/constants'\nlet TWITTER_URL = 'https://twitter.com/BojaleLabs';\nconst COPY = {\n  feedbackTitle: \"Tell us what's on your mind!\",\n  feedbackSuccess: \"ðŸŽ‰ Thank you for your thoughts ðŸŽ‰\"\n};\nexport default function Header() {\n  const {\n    data: user,\n    mutate: mutateUser\n  } = useUserData();\n  let mobile = useMediaQuery('(max-width:768px)');\n  return h(HeaderContainer, [h(Link, {\n    href: user ? '/dashboard' : '/',\n    passHref: true\n  }, h('a', [Logo])), mobile ? h(MobileMenu, {\n    user,\n    mutateUser\n  }) : h(Container, {}, [h(LoginButtons, {\n    user,\n    mutateUser\n  }), !user ? null : h(FeedbackModal), h(Seperator, {\n    style: {\n      height: \"100%\"\n    }\n  }), !user ? null : h(NavLink, {\n    href: TWITTER_URL\n  }, 'Twitter'), h(Link, {\n    href: \"/courses\",\n    passHref: true\n  }, h(NavLink, 'Courses')), h(LearnMenu)])]);\n}\n\nconst LearnMenu = () => {\n  let {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  let menuRef = useRef(null);\n  useEffect(() => {\n    if (!open || !menuRef) return;\n\n    let listener = e => {\n      var _menuRef$current;\n\n      if (!((_menuRef$current = menuRef.current) !== null && _menuRef$current !== void 0 && _menuRef$current.contains(e.target))) setOpen(false);\n    };\n\n    window.addEventListener('click', listener);\n    return () => window.removeEventListener('click', listener);\n  }, [open]);\n  return h('div', [h(CoursesButton, {\n    onClick: () => setOpen(!open)\n  }, 'Learn'), !open ? null : h(Dropdown, {\n    ref: menuRef,\n    onClick: () => setOpen(false)\n  }, [h(LearnMenuItems)])]);\n};\n\nlet LearnMenuItems = () => h('div', {\n  style: {\n    textAlign: 'right',\n    display: \"grid\"\n  }\n}, [h(Link, {\n  href: \"/courses\"\n}, h(LearnMenuItem, [h('b.mono', 'courses'), h('p', \"structured deep learning\")])), // h(Link, {href:\"/clubs\"}, h(LearnMenuItem, [\n//   h('b.mono', 'clubs'),\n//   h('p', \"social peer learning\")\n// ])),\nh(Link, {\n  href: \"/events\"\n}, h(LearnMenuItem, [h('b.mono', 'events'), h('p', \"single sessions\")]))]);\n\nlet LearnMenuItem = /*#__PURE__*/_styled('a', {\n  target: \"ekal7xw0\",\n  label: \"LearnMenuItem\"\n})(\"&:hover{background-color:\", colors.accentLightBlue, \";cursor:pointer;}color:\", colors.textSecondary, \";padding:8px 16px;\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst Dropdown = /*#__PURE__*/_styled('nav', {\n  target: \"ekal7xw1\",\n  label: \"Dropdown\"\n})(\"position:absolute;box-sizing:border-box;z-index:9;border:1px solid;border-radius:2px;margin-left:-120px;transform:translate(0px,8px);background-color:\", colors.appBackground, \";\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst MobileMenu = props => {\n  let {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  let router = useRouter();\n  useEffect(() => {\n    let handleRouteChange = () => setOpen(false);\n\n    router.events.on('routeChangeComplete', handleRouteChange);\n    return () => {\n      router.events.off('routeChangeComplete', handleRouteChange);\n    };\n  }, [router]);\n  if (open) return h(FullPageOverlay, {}, h(Box, {\n    padding: 24\n  }, [h(HeaderContainer, {\n    style: {\n      paddingBottom: \"0px\"\n    }\n  }, [h(Link, {\n    href: props.user ? '/dashboard' : '/',\n    passHref: true\n  }, h('a', [Logo])), h(Container, [h(LinkButton, {\n    style: {\n      justifySelf: 'right',\n      textDecoration: \"none\"\n    },\n    onClick: () => {\n      setOpen(false);\n    }\n  }, 'close')])]), h(Box, {\n    style: {\n      textAlign: \"right\"\n    }\n  }, [h(Link, {\n    href: \"/courses\"\n  }, h(NavLink, [h('b', 'courses'), h('p', \"structured deep learning\")])), // h(Link, {href:\"/clubs\"}, h(NavLink, [\n  //   h('b', 'clubs'),\n  //   h('p', \"social peer learning\")\n  // ])),\n  h(Link, {\n    href: \"/events\"\n  }, h(NavLink, [h('b', 'events'), h('p', \"single sessions\")])), !props.user ? null : h(NavLink, {\n    href: TWITTER_URL\n  }, h('b', 'twitter')), // h(Link, {href: \"/library\", passHref:true}, h(NavLink, {}, h('b', 'library'))),\n  // h(Seperator),\n  h(Box, {\n    gap: 16,\n    style: {\n      textAlign: 'right'\n    }\n  }, [h(LoginButtons, props)]), h(Seperator), !props.user ? null : h(Feedback)])]));else return h(Container, [h(LinkButton, {\n    style: {\n      justifySelf: 'right',\n      paddingLeft: '10px',\n      textDecoration: \"none\"\n    },\n    onClick: () => setOpen(true)\n  }, 'menu')]);\n};\n\nconst LoginButtons = props => {\n  let router = useRouter();\n  let redirect = router.pathname === '/' ? '' : '?redirect=' + encodeURIComponent(router.asPath);\n  if (!props.user) return h(Fragment, {}, [h(Link, {\n    href: '/signup'\n  }, h(NavLink, 'sign up')), h(Link, {\n    href: '/login' + redirect\n  }, h(NavLink, \"log in\"))]);else {\n    return h(NavLink, {\n      onClick: async e => {\n        e.preventDefault();\n        let res = await fetch('/api/logout');\n\n        if (res.status === 200) {\n          props.mutateUser(false);\n        }\n      }\n    }, 'Logout');\n  }\n};\n\nconst Feedback = () => {\n  let router = useRouter();\n  let {\n    data: user\n  } = useUserData();\n  let {\n    0: form,\n    1: setForm\n  } = useState({\n    email: '',\n    feedback: ''\n  });\n  let [status, callFeedback, setStatus] = useApi([]);\n\n  let onSubmit = e => {\n    e.preventDefault();\n    if (status === 'success') return;\n    callFeedback('/api/feedback', {\n      feedback: form.feedback,\n      email: user ? undefined : form.email,\n      page: router.pathname,\n      username: user ? user.username : undefined\n    });\n  };\n\n  if (status === 'success') return h(Box, {\n    style: {\n      textAlign: 'center'\n    }\n  }, [COPY.feedbackSuccess, h('br'), h(LinkButton, {\n    onClick: () => {\n      setStatus('normal');\n      setForm(_objectSpread(_objectSpread({}, form), {}, {\n        feedback: ''\n      }));\n    }\n  }, \"I have more feedback!\")]);\n  return h(FormBox, {\n    onSubmit,\n    gap: 16\n  }, [h('h4', COPY.feedbackTitle), h(Textarea, {\n    value: form.feedback,\n    required: true,\n    onChange: e => setForm(_objectSpread(_objectSpread({}, form), {}, {\n      feedback: e.currentTarget.value\n    }))\n  }), user ? null : h(LabelBox, [h('h4', \"Your email (optional)\"), h(Input, {\n    type: 'email',\n    value: form.email,\n    onChange: e => setForm(_objectSpread(_objectSpread({}, form), {}, {\n      email: e.currentTarget.value\n    }))\n  })]), h(Secondary, {\n    type: 'submit',\n    disabled: form.feedback === '',\n    style: {\n      justifySelf: 'center'\n    }\n  }, \"Submit\")]);\n};\n\nconst FeedbackModal = () => {\n  let {\n    0: display,\n    1: setDisplay\n  } = useState(false);\n  return h(Fragment, [h(NavLink, {\n    onClick: () => setDisplay(true)\n  }, ''), h(Modal, {\n    display,\n    onExit: () => setDisplay(false)\n  }, h(Feedback))]);\n};\n\nconst CoursesButton = /*#__PURE__*/_styled(Primary, {\n  target: \"ekal7xw2\",\n  label: \"CoursesButton\"\n})(false ? {\n  name: \"1g9jcxr\",\n  styles: \"color:green;background-color:white;border-color:#19ef7d;padding:7px 16px;\"\n} : {\n  name: \"1g9jcxr\",\n  styles: \"color:green;background-color:white;border-color:#19ef7d;padding:7px 16px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst FullPageOverlay = /*#__PURE__*/_styled('div', {\n  target: \"ekal7xw3\",\n  label: \"FullPageOverlay\"\n})(\"display:block;position:fixed;z-index:11;top:0;left:0;width:100vw;height:100vh;background-color:\", colors.appBackground, \";\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst Container = /*#__PURE__*/_styled('div', {\n  target: \"ekal7xw4\",\n  label: \"Container\"\n})(false ? {\n  name: \"1kh6546\",\n  styles: \"justify-self:right;align-self:center;align-items:center;display:grid;grid-gap:32px;grid-auto-flow:column;grid-auto-columns:max-content;\"\n} : {\n  name: \"1kh6546\",\n  styles: \"justify-self:right;align-self:center;align-items:center;display:grid;grid-gap:32px;grid-auto-flow:column;grid-auto-columns:max-content;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst NavLink = /*#__PURE__*/_styled('a', {\n  target: \"ekal7xw5\",\n  label: \"NavLink\"\n})(\"font-family:'Roboto Mono',monospace;text-decoration:none;color:\", colors.textSecondary, \";&:visited{color:\", colors.textSecondary, \";}&:hover{cursor:pointer;color:#00008B;}\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9heW9vbHV3YWFsZm9uc28vY29kZS9rcmFrZW5lZHVhcHAvY29tcG9uZW50cy9MYXlvdXQvSGVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRPMkIiLCJmaWxlIjoiL1VzZXJzL2F5b29sdXdhYWxmb25zby9jb2RlL2tyYWtlbmVkdWFwcC9jb21wb25lbnRzL0xheW91dC9IZWFkZXIudHMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCBoIGZyb20gJ3JlYWN0LWh5cGVyc2NyaXB0J1xuaW1wb3J0IExpbmsgZnJvbSAnbmV4dC9saW5rJ1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5pbXBvcnQgeyB1c2VTdGF0ZSwgRnJhZ21lbnQsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7Y29sb3JzLCBNb2JpbGV9IGZyb20gJy4uL1Rva2VucydcbmltcG9ydCB7IExvZ28gfSBmcm9tICcuLi9JY29ucydcbmltcG9ydCB7IEJveCwgU2VwZXJhdG9yLCBGb3JtQm94LCBMYWJlbEJveH0gZnJvbSAnLi9pbmRleCdcbmltcG9ydCB7IHVzZVVzZXJEYXRhIH0gZnJvbSAnLi4vLi4vc3JjL2RhdGEnXG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSAnLi4vLi4vc3JjL2hvb2tzJ1xuaW1wb3J0IHsgVGV4dGFyZWEsIElucHV0IH0gZnJvbSAnLi4vRm9ybSdcbmltcG9ydCB7IFNlY29uZGFyeSwgUHJpbWFyeSwgTGlua0J1dHRvbiB9IGZyb20gJy4uL0J1dHRvbidcbmltcG9ydCB7IE1vZGFsIH0gZnJvbSAnLi4vTW9kYWwnXG5pbXBvcnQgeyB1c2VBcGkgfSBmcm9tICcuLi8uLi9zcmMvYXBpSGVscGVycydcbmltcG9ydCB7IEZlZWRiYWNrTXNnLCBGZWVkYmFja1Jlc3VsdCB9IGZyb20gJy4uLy4uL3BhZ2VzL2FwaS9mZWVkYmFjaydcblxuLy8gaW1wb3J0IHtESVNDT1VSU0VfVVJMfSBmcm9tICdzcmMvY29uc3RhbnRzJ1xubGV0IFRXSVRURVJfVVJMID0gJ2h0dHBzOi8vdHdpdHRlci5jb20vQm9qYWxlTGFicydcblxuY29uc3QgQ09QWSA9IHtcbiAgZmVlZGJhY2tUaXRsZTogXCJUZWxsIHVzIHdoYXQncyBvbiB5b3VyIG1pbmQhXCIsXG4gIGZlZWRiYWNrU3VjY2VzczogXCLwn46JIFRoYW5rIHlvdSBmb3IgeW91ciB0aG91Z2h0cyDwn46JXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGVhZGVyKCkge1xuICBjb25zdCB7ZGF0YTogdXNlciwgbXV0YXRlOm11dGF0ZVVzZXJ9PSB1c2VVc2VyRGF0YSgpXG4gIGxldCBtb2JpbGUgPSB1c2VNZWRpYVF1ZXJ5KCcobWF4LXdpZHRoOjc2OHB4KScpXG4gIHJldHVybiBoKEhlYWRlckNvbnRhaW5lciwgW1xuICAgIGgoTGluaywge2hyZWY6IHVzZXIgPyAnL2Rhc2hib2FyZCcgOiAnLycsIHBhc3NIcmVmOnRydWV9LCBoKCdhJywgW0xvZ29dKSksXG4gICAgbW9iaWxlID8gaChNb2JpbGVNZW51LCB7dXNlciwgbXV0YXRlVXNlcn0pIDogaChDb250YWluZXIsIHt9LCBbXG4gICAgICBoKExvZ2luQnV0dG9ucywge3VzZXIsIG11dGF0ZVVzZXJ9KSxcbiAgICAgICF1c2VyID8gbnVsbCA6IGgoRmVlZGJhY2tNb2RhbCksXG4gICAgICBoKFNlcGVyYXRvciwge3N0eWxlOntoZWlnaHQ6XCIxMDAlXCJ9fSksXG4gICAgICAhdXNlciA/IG51bGwgOiBoKE5hdkxpbmssIHtocmVmOlRXSVRURVJfVVJMfSwgJ1R3aXR0ZXInKSxcbiAgICAgIGgoTGluaywge2hyZWY6IFwiL2NvdXJzZXNcIiwgcGFzc0hyZWY6IHRydWV9LCBoKE5hdkxpbmssICdDb3Vyc2VzJykpLFxuICAgICAgaChMZWFybk1lbnUpXG4gICAgXSksXG4gIF0pXG59XG5cbmNvbnN0IExlYXJuTWVudSA9ICgpPT57XG4gIGxldCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSlcbiAgbGV0IG1lbnVSZWYgPSB1c2VSZWY8SFRNTEVsZW1lbnQ+KG51bGwpXG4gIHVzZUVmZmVjdCgoKT0+e1xuICAgIGlmKCFvcGVuIHx8ICFtZW51UmVmKSByZXR1cm5cbiAgICBsZXQgbGlzdGVuZXIgPSAoZTpNb3VzZUV2ZW50KT0+e1xuICAgICAgaWYoIW1lbnVSZWYuY3VycmVudD8uY29udGFpbnMoZS50YXJnZXQgYXMgTm9kZSB8IG51bGwpKSBzZXRPcGVuKGZhbHNlKVxuICAgIH1cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBsaXN0ZW5lcilcbiAgICByZXR1cm4gKCk9PndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGxpc3RlbmVyKVxuXG4gIH0sIFtvcGVuXSlcbiAgcmV0dXJuIGgoJ2RpdicsIFtcbiAgICBoKENvdXJzZXNCdXR0b24sIHtvbkNsaWNrOigpPT5zZXRPcGVuKCFvcGVuKX0sICdMZWFybicpLFxuICAgICFvcGVuID8gbnVsbCA6IGgoRHJvcGRvd24sIHtyZWY6IG1lbnVSZWYsIG9uQ2xpY2s6KCk9PnNldE9wZW4oZmFsc2UpfSwgW1xuICAgICAgaChMZWFybk1lbnVJdGVtcylcbiAgICBdKVxuICBdKVxufVxuXG5sZXQgTGVhcm5NZW51SXRlbXMgPSAoKT0+IGgoJ2RpdicsIHtzdHlsZTp7dGV4dEFsaWduOidyaWdodCcsIGRpc3BsYXk6XCJncmlkXCJ9fSwgW1xuICBoKExpbmssIHtocmVmOlwiL2NvdXJzZXNcIn0saChMZWFybk1lbnVJdGVtLCBbXG4gICAgaCgnYi5tb25vJywgJ2NvdXJzZXMnKSxcbiAgICBoKCdwJywgXCJzdHJ1Y3R1cmVkIGRlZXAgbGVhcm5pbmdcIilcbiAgXSkpLFxuICAvLyBoKExpbmssIHtocmVmOlwiL2NsdWJzXCJ9LCBoKExlYXJuTWVudUl0ZW0sIFtcbiAgLy8gICBoKCdiLm1vbm8nLCAnY2x1YnMnKSxcbiAgLy8gICBoKCdwJywgXCJzb2NpYWwgcGVlciBsZWFybmluZ1wiKVxuICAvLyBdKSksXG4gIGgoTGluaywge2hyZWY6XCIvZXZlbnRzXCJ9LCBoKExlYXJuTWVudUl0ZW0sIFtcbiAgICBoKCdiLm1vbm8nLCAnZXZlbnRzJyksXG4gICAgaCgncCcsIFwic2luZ2xlIHNlc3Npb25zXCIpXG4gIF0pKSxcbiAgICAgIF0pXG5cbmxldCBMZWFybk1lbnVJdGVtID0gc3R5bGVkKCdhJylgXG4mOmhvdmVyIHtcbmJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjY2VudExpZ2h0Qmx1ZX07XG5jdXJzb3I6IHBvaW50ZXI7XG59XG5cbmNvbG9yOiR7Y29sb3JzLnRleHRTZWNvbmRhcnl9O1xucGFkZGluZzo4cHggMTZweDtcbmBcblxuY29uc3QgRHJvcGRvd24gPSBzdHlsZWQoJ25hdicpYFxucG9zaXRpb246IGFic29sdXRlO1xuYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuei1pbmRleDogOTtcblxuYm9yZGVyOiAxcHggc29saWQ7XG5ib3JkZXItcmFkaXVzOiAycHg7XG5tYXJnaW4tbGVmdDogLTEyMHB4O1xudHJhbnNmb3JtOiB0cmFuc2xhdGUoMHB4LCA4cHgpO1xuYmFja2dyb3VuZC1jb2xvcjoke2NvbG9ycy5hcHBCYWNrZ3JvdW5kfTtcbmBcblxuY29uc3QgTW9iaWxlTWVudSA9IChwcm9wczp7dXNlcjphbnksIG11dGF0ZVVzZXI6IGFueX0pID0+IHtcbiAgbGV0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBsZXQgcm91dGVyID0gdXNlUm91dGVyKClcbiAgdXNlRWZmZWN0KCgpPT57XG4gICAgbGV0IGhhbmRsZVJvdXRlQ2hhbmdlID0gKCk9PiBzZXRPcGVuKGZhbHNlKVxuICAgIHJvdXRlci5ldmVudHMub24oJ3JvdXRlQ2hhbmdlQ29tcGxldGUnLCBoYW5kbGVSb3V0ZUNoYW5nZSlcbiAgICByZXR1cm4gKCk9Pnsgcm91dGVyLmV2ZW50cy5vZmYoJ3JvdXRlQ2hhbmdlQ29tcGxldGUnLCBoYW5kbGVSb3V0ZUNoYW5nZSl9XG4gIH0sW3JvdXRlcl0pXG5cbiAgaWYob3BlbikgcmV0dXJuIGgoRnVsbFBhZ2VPdmVybGF5LCB7fSwgaChCb3gsIHtwYWRkaW5nOiAyNH0sIFtcbiAgICBoKEhlYWRlckNvbnRhaW5lciwge3N0eWxlOntwYWRkaW5nQm90dG9tOlwiMHB4XCJ9fSwgW1xuICAgICAgaChMaW5rLCB7aHJlZjogcHJvcHMudXNlciA/ICcvZGFzaGJvYXJkJyA6ICcvJywgcGFzc0hyZWY6dHJ1ZX0sIGgoJ2EnLCBbTG9nb10pKSxcbiAgICAgIGgoQ29udGFpbmVyLCBbXG4gICAgICAgIGgoTGlua0J1dHRvbiwge3N0eWxlOiB7anVzdGlmeVNlbGY6ICdyaWdodCcsIHRleHREZWNvcmF0aW9uOlwibm9uZVwifSwgb25DbGljazogKCk9PiB7c2V0T3BlbihmYWxzZSl9fSwgJ2Nsb3NlJylcbiAgICAgIF0pXG4gICAgXSksXG4gICAgaChCb3gsIHtzdHlsZTp7dGV4dEFsaWduOiBcInJpZ2h0XCJ9fSxbXG4gICAgICBoKExpbmssIHtocmVmOlwiL2NvdXJzZXNcIn0saChOYXZMaW5rLCBbXG4gICAgICAgIGgoJ2InLCAnY291cnNlcycpLFxuICAgICAgICBoKCdwJywgXCJzdHJ1Y3R1cmVkIGRlZXAgbGVhcm5pbmdcIilcbiAgICAgIF0pKSxcbiAgICAgIC8vIGgoTGluaywge2hyZWY6XCIvY2x1YnNcIn0sIGgoTmF2TGluaywgW1xuICAgICAgLy8gICBoKCdiJywgJ2NsdWJzJyksXG4gICAgICAvLyAgIGgoJ3AnLCBcInNvY2lhbCBwZWVyIGxlYXJuaW5nXCIpXG4gICAgICAvLyBdKSksXG4gICAgICBoKExpbmssIHtocmVmOlwiL2V2ZW50c1wifSwgaChOYXZMaW5rLCBbXG4gICAgICAgIGgoJ2InLCAnZXZlbnRzJyksXG4gICAgICAgIGgoJ3AnLCBcInNpbmdsZSBzZXNzaW9uc1wiKVxuICAgICAgXSkpLFxuICAgICAgIXByb3BzLnVzZXIgPyBudWxsIDogaChOYXZMaW5rLCB7aHJlZjpUV0lUVEVSX1VSTH0sIGgoJ2InLCAndHdpdHRlcicpKSxcbiAgICAgIC8vIGgoTGluaywge2hyZWY6IFwiL2xpYnJhcnlcIiwgcGFzc0hyZWY6dHJ1ZX0sIGgoTmF2TGluaywge30sIGgoJ2InLCAnbGlicmFyeScpKSksXG4gICAgICAvLyBoKFNlcGVyYXRvciksXG4gICAgICBoKEJveCwge2dhcDogMTYsIHN0eWxlOiB7dGV4dEFsaWduOiAncmlnaHQnfX0sIFtcbiAgICAgICAgaChMb2dpbkJ1dHRvbnMsIHByb3BzKSxcbiAgICAgIF0pLFxuICAgICAgaChTZXBlcmF0b3IpLFxuICAgICAgIXByb3BzLnVzZXIgPyBudWxsIDogaChGZWVkYmFjaylcbiAgICBdKVxuICBdKSlcbiAgZWxzZSByZXR1cm4gaChDb250YWluZXIsIFtcbiAgICBoKExpbmtCdXR0b24sIHtzdHlsZToge2p1c3RpZnlTZWxmOiAncmlnaHQnLCBwYWRkaW5nTGVmdDogJzEwcHgnLCB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCJ9LCBvbkNsaWNrOigpPT5zZXRPcGVuKHRydWUpfSwgJ21lbnUnKVxuICBdKVxufVxuXG5jb25zdCBMb2dpbkJ1dHRvbnMgPSAocHJvcHM6e3VzZXI6YW55LCBtdXRhdGVVc2VyOmFueX0pID0+IHtcbiAgbGV0IHJvdXRlciA9IHVzZVJvdXRlcigpXG4gIGxldCByZWRpcmVjdCA9IHJvdXRlci5wYXRobmFtZSA9PT0gJy8nID8gJycgOiAnP3JlZGlyZWN0PScgKyBlbmNvZGVVUklDb21wb25lbnQocm91dGVyLmFzUGF0aClcbiAgaWYoIXByb3BzLnVzZXIpIHJldHVybiBoKEZyYWdtZW50LCB7fSwgW1xuICAgIGgoTGluaywge2hyZWY6ICcvc2lnbnVwJ30sIGgoTmF2TGluaywgICdzaWduIHVwJykpLFxuICAgIGgoTGluaywge2hyZWY6ICcvbG9naW4nICsgcmVkaXJlY3R9LCBoKE5hdkxpbmssIFwibG9nIGluXCIpKSxcbiAgXSlcbiAgZWxzZSB7XG4gICAgcmV0dXJuIGgoTmF2TGluaywge29uQ2xpY2s6IGFzeW5jIChlKT0+e1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBsZXQgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvbG9nb3V0JylcbiAgICAgIGlmKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBwcm9wcy5tdXRhdGVVc2VyKGZhbHNlKVxuICAgICAgfVxuICAgIH19LCAnTG9nb3V0JylcbiAgfVxufVxuXG5jb25zdCBGZWVkYmFjayA9ICgpPT4ge1xuICBsZXQgcm91dGVyID0gdXNlUm91dGVyKClcbiAgbGV0IHtkYXRhOnVzZXJ9PSB1c2VVc2VyRGF0YSgpXG4gIGxldCBbZm9ybSwgc2V0Rm9ybV0gPSB1c2VTdGF0ZSh7ZW1haWw6ICcnLCBmZWVkYmFjazogJyd9KVxuICBsZXQgW3N0YXR1cywgY2FsbEZlZWRiYWNrLCBzZXRTdGF0dXNdID0gdXNlQXBpPEZlZWRiYWNrTXNnLCBGZWVkYmFja1Jlc3VsdD4oW10pXG4gIGxldCBvblN1Ym1pdCA9IChlOlJlYWN0LkZvcm1FdmVudCk9PntcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBpZihzdGF0dXM9PT0nc3VjY2VzcycpIHJldHVyblxuICAgIGNhbGxGZWVkYmFjaygnL2FwaS9mZWVkYmFjaycsIHtcbiAgICAgIGZlZWRiYWNrOmZvcm0uZmVlZGJhY2ssXG4gICAgICBlbWFpbDogdXNlciA/IHVuZGVmaW5lZCA6IGZvcm0uZW1haWwsXG4gICAgICBwYWdlOiByb3V0ZXIucGF0aG5hbWUsXG4gICAgICB1c2VybmFtZTogdXNlciA/IHVzZXIudXNlcm5hbWUgOiB1bmRlZmluZWRcbiAgICB9KVxuICB9XG5cbiAgaWYoc3RhdHVzPT09ICdzdWNjZXNzJykgcmV0dXJuIGgoQm94LCB7c3R5bGU6IHt0ZXh0QWxpZ246ICdjZW50ZXInfX0sIFtcbiAgICBDT1BZLmZlZWRiYWNrU3VjY2VzcyxcbiAgICBoKCdicicpLFxuICAgIGgoTGlua0J1dHRvbiwge29uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNldFN0YXR1cygnbm9ybWFsJylcbiAgICAgIHNldEZvcm0oey4uLmZvcm0sIGZlZWRiYWNrOiAnJ30pXG4gICAgfX0sIFwiSSBoYXZlIG1vcmUgZmVlZGJhY2shXCIpXG4gIF0pXG4gIHJldHVybiBoKEZvcm1Cb3gsIHtvblN1Ym1pdCwgZ2FwOiAxNn0sIFtcbiAgICBoKCdoNCcsIENPUFkuZmVlZGJhY2tUaXRsZSksXG4gICAgaChUZXh0YXJlYSwge3ZhbHVlOiBmb3JtLmZlZWRiYWNrLCByZXF1aXJlZDogdHJ1ZSwgb25DaGFuZ2U6IGU9PnNldEZvcm0oey4uLmZvcm0sIGZlZWRiYWNrOiBlLmN1cnJlbnRUYXJnZXQudmFsdWV9KX0pLFxuICAgIHVzZXIgPyBudWxsIDogaChMYWJlbEJveCwgW1xuICAgICAgaCgnaDQnLCBcIllvdXIgZW1haWwgKG9wdGlvbmFsKVwiKSxcbiAgICAgIGgoSW5wdXQsIHt0eXBlOiAnZW1haWwnLCB2YWx1ZTogZm9ybS5lbWFpbCwgb25DaGFuZ2U6IGU9PnNldEZvcm0oey4uLmZvcm0sIGVtYWlsOiBlLmN1cnJlbnRUYXJnZXQudmFsdWV9KX0pLFxuICAgIF0pLFxuICAgIGgoU2Vjb25kYXJ5LCB7XG4gICAgICB0eXBlOiAnc3VibWl0JyxcbiAgICAgIGRpc2FibGVkOiBmb3JtLmZlZWRiYWNrID09PSAnJyxcbiAgICAgIHN0eWxlOntqdXN0aWZ5U2VsZjonY2VudGVyJ31cbiAgICB9LCBcIlN1Ym1pdFwiKVxuICBdKVxufVxuXG5jb25zdCBGZWVkYmFja01vZGFsID0gKCk9PntcbiAgbGV0IFtkaXNwbGF5LCBzZXREaXNwbGF5XSA9IHVzZVN0YXRlKGZhbHNlKVxuICByZXR1cm4gaChGcmFnbWVudCwgW1xuICAgIGgoTmF2TGluaywge29uQ2xpY2s6ICgpPT5zZXREaXNwbGF5KHRydWUpfSwnJyksXG4gICAgaChNb2RhbCwge2Rpc3BsYXksIG9uRXhpdDogKCk9PnNldERpc3BsYXkoZmFsc2UpfSwgaChGZWVkYmFjaykpXG4gIF0pXG59XG5cbmNvbnN0IENvdXJzZXNCdXR0b24gPSBzdHlsZWQoUHJpbWFyeSlgXG5jb2xvcjogZ3JlZW47XG5iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbmJvcmRlci1jb2xvcjogIzE5ZWY3ZDtcbnBhZGRpbmc6IDdweCAxNnB4O1xuYFxuXG5jb25zdCBGdWxsUGFnZU92ZXJsYXkgPSBzdHlsZWQoJ2RpdicpYFxuZGlzcGxheTogYmxvY2s7XG5wb3NpdGlvbjogZml4ZWQ7XG56LWluZGV4OiAxMTtcbnRvcDogMDtcbmxlZnQ6IDA7XG53aWR0aDogMTAwdnc7XG5oZWlnaHQ6IDEwMHZoO1xuYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYXBwQmFja2dyb3VuZH07XG5gXG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2JylgXG5qdXN0aWZ5LXNlbGY6IHJpZ2h0O1xuYWxpZ24tc2VsZjogY2VudGVyO1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbmRpc3BsYXk6IGdyaWQ7XG5ncmlkLWdhcDogMzJweDtcbmdyaWQtYXV0by1mbG93OiBjb2x1bW47XG5ncmlkLWF1dG8tY29sdW1uczogbWF4LWNvbnRlbnQ7XG5gXG5cbmNvbnN0IE5hdkxpbmsgPSBzdHlsZWQoJ2EnKWBcbmZvbnQtZmFtaWx5OiAnUm9ib3RvIE1vbm8nLCBtb25vc3BhY2U7XG50ZXh0LWRlY29yYXRpb246IG5vbmU7XG5jb2xvcjogJHtjb2xvcnMudGV4dFNlY29uZGFyeX07XG5cbiY6dmlzaXRlZCB7XG5jb2xvcjogJHtjb2xvcnMudGV4dFNlY29uZGFyeX07XG59XG5cbiY6aG92ZXIge1xuY3Vyc29yOiBwb2ludGVyO1xuY29sb3I6ICMwMDAwOEI7XG59XG5gXG5cbmNvbnN0IEhlYWRlckNvbnRhaW5lciA9IHN0eWxlZCgnZGl2JylgXG5kaXNwbGF5OiBncmlkO1xuZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG87XG5oZWlnaHQ6IDMycHg7XG5wYWRkaW5nLWJvdHRvbTogNjRweDtcbmFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiR7TW9iaWxlfSB7XG4gIHBhZGRpbmctYm90dG9tOiAzMnB4IDtcbiAgcGFkZGluZy10b3A6IDE2cHggO1xufVxuYFxuXG4iXX0= */\"));\n\nconst HeaderContainer = /*#__PURE__*/_styled('div', {\n  target: \"ekal7xw6\",\n  label: \"HeaderContainer\"\n})(\"display:grid;grid-template-columns:auto auto;height:32px;padding-bottom:64px;align-items:center;\", Mobile, \"{padding-bottom:32px;padding-top:16px;}\" + (false ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/components/Layout/Header.ts"],"names":["h","Link","useRouter","useState","Fragment","useEffect","useRef","colors","Mobile","Logo","Box","Seperator","FormBox","LabelBox","useUserData","useMediaQuery","Textarea","Input","Secondary","Primary","LinkButton","Modal","useApi","TWITTER_URL","COPY","feedbackTitle","feedbackSuccess","Header","data","user","mutate","mutateUser","mobile","HeaderContainer","href","passHref","MobileMenu","Container","LoginButtons","FeedbackModal","style","height","NavLink","LearnMenu","open","setOpen","menuRef","listener","e","current","contains","target","window","addEventListener","removeEventListener","CoursesButton","onClick","Dropdown","ref","LearnMenuItems","textAlign","display","LearnMenuItem","accentLightBlue","textSecondary","appBackground","props","router","handleRouteChange","events","on","off","FullPageOverlay","padding","paddingBottom","justifySelf","textDecoration","gap","Feedback","paddingLeft","redirect","pathname","encodeURIComponent","asPath","preventDefault","res","fetch","status","form","setForm","email","feedback","callFeedback","setStatus","onSubmit","undefined","page","username","value","required","onChange","currentTarget","type","disabled","setDisplay","onExit"],"mappings":"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","sourcesContent":["import styled from '@emotion/styled'\nimport h from 'react-hyperscript'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport { useState, Fragment, useEffect, useRef } from 'react'\n\nimport {colors, Mobile} from '../Tokens'\nimport { Logo } from '../Icons'\nimport { Box, Seperator, FormBox, LabelBox} from './index'\nimport { useUserData } from '../../src/data'\nimport { useMediaQuery } from '../../src/hooks'\nimport { Textarea, Input } from '../Form'\nimport { Secondary, Primary, LinkButton } from '../Button'\nimport { Modal } from '../Modal'\nimport { useApi } from '../../src/apiHelpers'\nimport { FeedbackMsg, FeedbackResult } from '../../pages/api/feedback'\n\n// import {DISCOURSE_URL} from 'src/constants'\nlet TWITTER_URL = 'https://twitter.com/BojaleLabs'\n\nconst COPY = {\n  feedbackTitle: \"Tell us what's on your mind!\",\n  feedbackSuccess: \"ðŸŽ‰ Thank you for your thoughts ðŸŽ‰\"\n}\n\nexport default function Header() {\n  const {data: user, mutate:mutateUser}= useUserData()\n  let mobile = useMediaQuery('(max-width:768px)')\n  return h(HeaderContainer, [\n    h(Link, {href: user ? '/dashboard' : '/', passHref:true}, h('a', [Logo])),\n    mobile ? h(MobileMenu, {user, mutateUser}) : h(Container, {}, [\n      h(LoginButtons, {user, mutateUser}),\n      !user ? null : h(FeedbackModal),\n      h(Seperator, {style:{height:\"100%\"}}),\n      !user ? null : h(NavLink, {href:TWITTER_URL}, 'Twitter'),\n      h(Link, {href: \"/courses\", passHref: true}, h(NavLink, 'Courses')),\n      h(LearnMenu)\n    ]),\n  ])\n}\n\nconst LearnMenu = ()=>{\n  let [open, setOpen] = useState(false)\n  let menuRef = useRef<HTMLElement>(null)\n  useEffect(()=>{\n    if(!open || !menuRef) return\n    let listener = (e:MouseEvent)=>{\n      if(!menuRef.current?.contains(e.target as Node | null)) setOpen(false)\n    }\n    window.addEventListener('click', listener)\n    return ()=>window.removeEventListener('click', listener)\n\n  }, [open])\n  return h('div', [\n    h(CoursesButton, {onClick:()=>setOpen(!open)}, 'Learn'),\n    !open ? null : h(Dropdown, {ref: menuRef, onClick:()=>setOpen(false)}, [\n      h(LearnMenuItems)\n    ])\n  ])\n}\n\nlet LearnMenuItems = ()=> h('div', {style:{textAlign:'right', display:\"grid\"}}, [\n  h(Link, {href:\"/courses\"},h(LearnMenuItem, [\n    h('b.mono', 'courses'),\n    h('p', \"structured deep learning\")\n  ])),\n  // h(Link, {href:\"/clubs\"}, h(LearnMenuItem, [\n  //   h('b.mono', 'clubs'),\n  //   h('p', \"social peer learning\")\n  // ])),\n  h(Link, {href:\"/events\"}, h(LearnMenuItem, [\n    h('b.mono', 'events'),\n    h('p', \"single sessions\")\n  ])),\n      ])\n\nlet LearnMenuItem = styled('a')`\n&:hover {\nbackground-color: ${colors.accentLightBlue};\ncursor: pointer;\n}\n\ncolor:${colors.textSecondary};\npadding:8px 16px;\n`\n\nconst Dropdown = styled('nav')`\nposition: absolute;\nbox-sizing: border-box;\n\nz-index: 9;\n\nborder: 1px solid;\nborder-radius: 2px;\nmargin-left: -120px;\ntransform: translate(0px, 8px);\nbackground-color:${colors.appBackground};\n`\n\nconst MobileMenu = (props:{user:any, mutateUser: any}) => {\n  let [open, setOpen] = useState(false)\n  let router = useRouter()\n  useEffect(()=>{\n    let handleRouteChange = ()=> setOpen(false)\n    router.events.on('routeChangeComplete', handleRouteChange)\n    return ()=>{ router.events.off('routeChangeComplete', handleRouteChange)}\n  },[router])\n\n  if(open) return h(FullPageOverlay, {}, h(Box, {padding: 24}, [\n    h(HeaderContainer, {style:{paddingBottom:\"0px\"}}, [\n      h(Link, {href: props.user ? '/dashboard' : '/', passHref:true}, h('a', [Logo])),\n      h(Container, [\n        h(LinkButton, {style: {justifySelf: 'right', textDecoration:\"none\"}, onClick: ()=> {setOpen(false)}}, 'close')\n      ])\n    ]),\n    h(Box, {style:{textAlign: \"right\"}},[\n      h(Link, {href:\"/courses\"},h(NavLink, [\n        h('b', 'courses'),\n        h('p', \"structured deep learning\")\n      ])),\n      // h(Link, {href:\"/clubs\"}, h(NavLink, [\n      //   h('b', 'clubs'),\n      //   h('p', \"social peer learning\")\n      // ])),\n      h(Link, {href:\"/events\"}, h(NavLink, [\n        h('b', 'events'),\n        h('p', \"single sessions\")\n      ])),\n      !props.user ? null : h(NavLink, {href:TWITTER_URL}, h('b', 'twitter')),\n      // h(Link, {href: \"/library\", passHref:true}, h(NavLink, {}, h('b', 'library'))),\n      // h(Seperator),\n      h(Box, {gap: 16, style: {textAlign: 'right'}}, [\n        h(LoginButtons, props),\n      ]),\n      h(Seperator),\n      !props.user ? null : h(Feedback)\n    ])\n  ]))\n  else return h(Container, [\n    h(LinkButton, {style: {justifySelf: 'right', paddingLeft: '10px', textDecoration: \"none\"}, onClick:()=>setOpen(true)}, 'menu')\n  ])\n}\n\nconst LoginButtons = (props:{user:any, mutateUser:any}) => {\n  let router = useRouter()\n  let redirect = router.pathname === '/' ? '' : '?redirect=' + encodeURIComponent(router.asPath)\n  if(!props.user) return h(Fragment, {}, [\n    h(Link, {href: '/signup'}, h(NavLink,  'sign up')),\n    h(Link, {href: '/login' + redirect}, h(NavLink, \"log in\")),\n  ])\n  else {\n    return h(NavLink, {onClick: async (e)=>{\n      e.preventDefault()\n      let res = await fetch('/api/logout')\n      if(res.status === 200) {\n        props.mutateUser(false)\n      }\n    }}, 'Logout')\n  }\n}\n\nconst Feedback = ()=> {\n  let router = useRouter()\n  let {data:user}= useUserData()\n  let [form, setForm] = useState({email: '', feedback: ''})\n  let [status, callFeedback, setStatus] = useApi<FeedbackMsg, FeedbackResult>([])\n  let onSubmit = (e:React.FormEvent)=>{\n    e.preventDefault()\n    if(status==='success') return\n    callFeedback('/api/feedback', {\n      feedback:form.feedback,\n      email: user ? undefined : form.email,\n      page: router.pathname,\n      username: user ? user.username : undefined\n    })\n  }\n\n  if(status=== 'success') return h(Box, {style: {textAlign: 'center'}}, [\n    COPY.feedbackSuccess,\n    h('br'),\n    h(LinkButton, {onClick: () => {\n      setStatus('normal')\n      setForm({...form, feedback: ''})\n    }}, \"I have more feedback!\")\n  ])\n  return h(FormBox, {onSubmit, gap: 16}, [\n    h('h4', COPY.feedbackTitle),\n    h(Textarea, {value: form.feedback, required: true, onChange: e=>setForm({...form, feedback: e.currentTarget.value})}),\n    user ? null : h(LabelBox, [\n      h('h4', \"Your email (optional)\"),\n      h(Input, {type: 'email', value: form.email, onChange: e=>setForm({...form, email: e.currentTarget.value})}),\n    ]),\n    h(Secondary, {\n      type: 'submit',\n      disabled: form.feedback === '',\n      style:{justifySelf:'center'}\n    }, \"Submit\")\n  ])\n}\n\nconst FeedbackModal = ()=>{\n  let [display, setDisplay] = useState(false)\n  return h(Fragment, [\n    h(NavLink, {onClick: ()=>setDisplay(true)},''),\n    h(Modal, {display, onExit: ()=>setDisplay(false)}, h(Feedback))\n  ])\n}\n\nconst CoursesButton = styled(Primary)`\ncolor: green;\nbackground-color: white;\nborder-color: #19ef7d;\npadding: 7px 16px;\n`\n\nconst FullPageOverlay = styled('div')`\ndisplay: block;\nposition: fixed;\nz-index: 11;\ntop: 0;\nleft: 0;\nwidth: 100vw;\nheight: 100vh;\nbackground-color: ${colors.appBackground};\n`\n\nconst Container = styled('div')`\njustify-self: right;\nalign-self: center;\nalign-items: center;\ndisplay: grid;\ngrid-gap: 32px;\ngrid-auto-flow: column;\ngrid-auto-columns: max-content;\n`\n\nconst NavLink = styled('a')`\nfont-family: 'Roboto Mono', monospace;\ntext-decoration: none;\ncolor: ${colors.textSecondary};\n\n&:visited {\ncolor: ${colors.textSecondary};\n}\n\n&:hover {\ncursor: pointer;\ncolor: #00008B;\n}\n`\n\nconst HeaderContainer = styled('div')`\ndisplay: grid;\ngrid-template-columns: auto auto;\nheight: 32px;\npadding-bottom: 64px;\nalign-items: center;\n\n${Mobile} {\n  padding-bottom: 32px ;\n  padding-top: 16px ;\n}\n`\n\n"]},"metadata":{},"sourceType":"module"}