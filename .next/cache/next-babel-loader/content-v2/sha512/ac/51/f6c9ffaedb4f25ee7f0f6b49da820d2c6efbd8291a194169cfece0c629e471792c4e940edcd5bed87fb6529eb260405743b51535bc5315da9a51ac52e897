{"ast":null,"code":"import { APIHandler } from 'src/apiHelpers';\nimport { getToken } from 'src/token';\nimport prisma from \"lib/prisma\";\nexport default APIHandler({\n  POST: updateTemplate,\n  DELETE: deleteTemplate\n});\n\nasync function deleteTemplate(req) {\n  let courseId = parseInt(req.query.id);\n  if (Number.isNaN(courseId)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let templateId = req.query.templateId;\n  let user = getToken(req);\n  if (!user) return {\n    status: 401,\n    result: \"ERROR: no user logged in\"\n  };\n  let course_maintainer = await prisma.course_maintainers.findUnique({\n    where: {\n      course_maintainer: {\n        course: courseId,\n        maintainer: user.id\n      }\n    }\n  });\n  if (!course_maintainer) return {\n    status: 401,\n    result: \"ERROR: user is not maintainer of this course\"\n  };\n\n  try {\n    await prisma.course_templates.delete({\n      where: {\n        name_course: {\n          name: templateId,\n          course: courseId\n        }\n      }\n    });\n    return {\n      status: 200,\n      result: \"\"\n    };\n  } catch (e) {\n    return {\n      status: 400,\n      result: 'Unable to delete template'\n    };\n  }\n}\n\nasync function updateTemplate(req) {\n  let msg = req.body;\n  let courseId = parseInt(req.query.id);\n  if (Number.isNaN(courseId)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let templateId = req.query.templateId;\n  let user = getToken(req);\n  if (!user) return {\n    status: 401,\n    result: \"ERROR: no user logged in\"\n  };\n  let course_maintainer = await prisma.course_maintainers.findUnique({\n    where: {\n      course_maintainer: {\n        course: courseId,\n        maintainer: user.id\n      }\n    }\n  });\n  if (!course_maintainer) return {\n    status: 401,\n    result: \"ERROR: user is not maintainer of this course\"\n  };\n  let template = await prisma.course_templates.findUnique({\n    where: {\n      name_course: {\n        name: templateId,\n        course: courseId\n      }\n    }\n  });\n  if (!template) return {\n    status: 404,\n    result: \"ERROR: cannot find template with name \" + templateId\n  };\n  let updatedTemplate = await prisma.course_templates.update({\n    where: {\n      name_course: {\n        name: templateId,\n        course: courseId\n      }\n    },\n    data: {\n      name: template.required ? template.name : msg.name,\n      title: msg.title,\n      content: msg.content,\n      type: template.required ? template.type : msg.type\n    }\n  });\n  return {\n    status: 200,\n    result: updatedTemplate\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/templates/[templateId].ts"],"names":["APIHandler","getToken","prisma","POST","updateTemplate","DELETE","deleteTemplate","req","courseId","parseInt","query","id","Number","isNaN","status","result","templateId","user","course_maintainer","course_maintainers","findUnique","where","course","maintainer","course_templates","delete","name_course","name","e","msg","body","template","updatedTemplate","update","data","required","title","content","type"],"mappings":"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","sourcesContent":["import { ResultType, APIHandler, Request} from 'src/apiHelpers'\nimport { getToken } from 'src/token'\nimport prisma from \"lib/prisma\";\n\nexport type UpdateTemplateMsg = {\n  name?: string,\n  title?: string\n  content?: string,\n  type?: \"prepopulated\" | 'triggered'\n}\nexport type UpdateTemplateResult = ResultType<typeof updateTemplate>\nexport type DeleteTemplateResult = ResultType<typeof deleteTemplate>\n\nexport default APIHandler({POST: updateTemplate, DELETE: deleteTemplate})\n\nasync function deleteTemplate(req: Request) {\n  let courseId = parseInt(req.query.id as string)\n  if(Number.isNaN(courseId)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n  let templateId = req.query.templateId as string\n  let user = getToken(req)\n  if(!user) return {status: 401, result: \"ERROR: no user logged in\"} as const\n\n  let course_maintainer = await prisma.course_maintainers.findUnique({where: {\n    course_maintainer: {\n      course: courseId,\n      maintainer: user.id\n    }\n  }})\n\n  if(!course_maintainer) return {status: 401, result: \"ERROR: user is not maintainer of this course\"} as const\n  try {\n    await prisma.course_templates.delete({\n      where: {name_course: {\n        name: templateId,\n        course: courseId\n      }}\n    })\n    return {status: 200, result: \"\"} as const\n  } catch (e) {\n    return {status: 400, result: 'Unable to delete template'} as const\n  }\n}\n\nasync function updateTemplate(req: Request) {\n  let msg = req.body as Partial<UpdateTemplateMsg>\n  let courseId = parseInt(req.query.id as string)\n  if(Number.isNaN(courseId)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n\n  let templateId = req.query.templateId as string\n  let user = getToken(req)\n  if(!user) return {status: 401, result: \"ERROR: no user logged in\"} as const\n\n  let course_maintainer = await prisma.course_maintainers.findUnique({where: {\n    course_maintainer: {\n      course: courseId,\n      maintainer: user.id\n    }\n  }})\n\n  if(!course_maintainer) return {status: 401, result: \"ERROR: user is not maintainer of this course\"} as const\n  let template = await prisma.course_templates.findUnique({where: {\n    name_course: {\n      name: templateId,\n      course: courseId\n    }\n  }})\n  if(!template) return {status:404, result: \"ERROR: cannot find template with name \"+templateId} as const\n  let updatedTemplate = await prisma.course_templates.update({\n    where: {\n      name_course: {\n        name: templateId,\n        course: courseId\n      }\n    },\n    data: {\n      name: template.required ? template.name : msg.name,\n      title: msg.title,\n      content: msg.content,\n      type: template.required ? template.type : msg.type\n    }\n  })\n  return {status: 200, result: updatedTemplate}\n}\n"]},"metadata":{},"sourceType":"module"}