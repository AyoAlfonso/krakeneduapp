{"ast":null,"code":"import { APIHandler } from '../../src/apiHelpers';\nimport { setTokenHeader } from '../../src/token';\nimport bcrypt from 'bcryptjs';\nimport prisma from \"lib/prisma\";\n\nconst handler = async req => {\n  let msg = req.body;\n\n  if (!msg.emailOrUsername || !msg.password) {\n    return {\n      status: 400,\n      result: \"Invalid request, email or password missing\"\n    };\n  }\n\n  let person = await validateLogin(msg.emailOrUsername, msg.password);\n\n  if (person) {\n    let token = {\n      username: person.username,\n      email: person.email,\n      id: person.id,\n      display_name: person.display_name,\n      bio: person.bio,\n      link: person.link,\n      admin: person.admins !== null\n    };\n    return {\n      status: 200,\n      headers: setTokenHeader(token),\n      result: token\n    };\n  } else {\n    return {\n      status: 401,\n      result: 'Wrong username or password'\n    };\n  }\n};\n\nexport default APIHandler(handler);\n\nasync function validateLogin(emailOrUsername, password) {\n  try {\n    let person = await prisma.people.findFirst({\n      where: {\n        OR: [{\n          email: {\n            equals: emailOrUsername,\n            mode: 'insensitive'\n          }\n        }, {\n          username: {\n            equals: emailOrUsername,\n            mode: 'insensitive'\n          }\n        }]\n      },\n      include: {\n        admins: true\n      }\n    });\n    if (!person) return false;\n    if (!(await bcrypt.compare(password, person.password_hash))) return false;\n    return person;\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/login.ts"],"names":["APIHandler","setTokenHeader","bcrypt","prisma","handler","req","msg","body","emailOrUsername","password","status","result","person","validateLogin","token","username","email","id","display_name","bio","link","admin","admins","headers","people","findFirst","where","OR","equals","mode","include","compare","password_hash","e","console","log"],"mappings":"AAAA,SAAQA,UAAR,QAA8C,sBAA9C;AACA,SAAQC,cAAR,QAA6B,iBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,YAAnB;;AASA,MAAMC,OAAO,GAAG,MAAOC,GAAP,IAAwB;AACtC,MAAIC,GAAG,GAAGD,GAAG,CAACE,IAAd;;AACA,MAAG,CAACD,GAAG,CAACE,eAAL,IAAwB,CAACF,GAAG,CAACG,QAAhC,EAA0C;AACxC,WAAO;AACLC,MAAAA,MAAM,EAAE,GADH;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID;;AAED,MAAIC,MAAM,GAAG,MAAMC,aAAa,CAACP,GAAG,CAACE,eAAL,EAAsBF,GAAG,CAACG,QAA1B,CAAhC;;AACA,MAAGG,MAAH,EAAW;AACT,QAAIE,KAAK,GAAG;AACVC,MAAAA,QAAQ,EAAEH,MAAM,CAACG,QADP;AAEVC,MAAAA,KAAK,EAACJ,MAAM,CAACI,KAFH;AAGVC,MAAAA,EAAE,EAACL,MAAM,CAACK,EAHA;AAIVC,MAAAA,YAAY,EAACN,MAAM,CAACM,YAJV;AAKVC,MAAAA,GAAG,EAAEP,MAAM,CAACO,GALF;AAMVC,MAAAA,IAAI,EAAER,MAAM,CAACQ,IANH;AAOVC,MAAAA,KAAK,EAAET,MAAM,CAACU,MAAP,KAAkB;AAPf,KAAZ;AASA,WAAO;AACLZ,MAAAA,MAAM,EAAE,GADH;AAELa,MAAAA,OAAO,EAAEtB,cAAc,CAACa,KAAD,CAFlB;AAGLH,MAAAA,MAAM,EAAEG;AAHH,KAAP;AAKD,GAfD,MAgBK;AACH,WAAO;AACLJ,MAAAA,MAAM,EAAE,GADH;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID;AACF,CAhCD;;AAkCA,eAAeX,UAAU,CAACI,OAAD,CAAzB;;AAEA,eAAeS,aAAf,CAA6BL,eAA7B,EAAsDC,QAAtD,EAAuE;AACrE,MAAI;AACF,QAAIG,MAAM,GAAG,MAAMT,MAAM,CAACqB,MAAP,CAAcC,SAAd,CAAwB;AACzCC,MAAAA,KAAK,EAAC;AAACC,QAAAA,EAAE,EAAE,CACT;AAACX,UAAAA,KAAK,EAAE;AAACY,YAAAA,MAAM,EAAEpB,eAAT;AAA0BqB,YAAAA,IAAI,EAAE;AAAhC;AAAR,SADS,EAET;AAACd,UAAAA,QAAQ,EAAE;AAACa,YAAAA,MAAM,EAAEpB,eAAT;AAA0BqB,YAAAA,IAAI,EAAE;AAAhC;AAAX,SAFS;AAAL,OADmC;AAIrCC,MAAAA,OAAO,EAAE;AAACR,QAAAA,MAAM,EAAE;AAAT;AAJ4B,KAAxB,CAAnB;AAMA,QAAG,CAACV,MAAJ,EAAY,OAAO,KAAP;AACZ,QAAG,EAAC,MAAMV,MAAM,CAAC6B,OAAP,CAAetB,QAAf,EAAyBG,MAAM,CAACoB,aAAhC,CAAP,CAAH,EAA0D,OAAO,KAAP;AAC1D,WAAOpB,MAAP;AACD,GAVD,CAUE,OAAOqB,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAO,KAAP;AACD;AACF","sourcesContent":["import {APIHandler, ResultType, Request} from '../../src/apiHelpers'\nimport {setTokenHeader} from '../../src/token'\nimport bcrypt from 'bcryptjs'\nimport prisma from \"lib/prisma\";\n\nexport type Msg = {\n  emailOrUsername: string\n  password: string\n}\n\nexport type Result = ResultType<typeof handler>\n\nconst handler = async (req: Request) => {\n  let msg = req.body as Partial<Msg>\n  if(!msg.emailOrUsername || !msg.password) {\n    return {\n      status: 400 as const,\n      result: \"Invalid request, email or password missing\" as const\n    }\n  }\n\n  let person = await validateLogin(msg.emailOrUsername, msg.password)\n  if(person) {\n    let token = {\n      username: person.username,\n      email:person.email,\n      id:person.id,\n      display_name:person.display_name,\n      bio: person.bio,\n      link: person.link,\n      admin: person.admins !== null\n    }\n    return {\n      status: 200 as const,\n      headers: setTokenHeader(token),\n      result: token\n    }\n  }\n  else {\n    return {\n      status: 401 as const,\n      result: 'Wrong username or password' as const\n    }\n  }\n}\n\nexport default APIHandler(handler)\n\nasync function validateLogin(emailOrUsername: string, password: string){\n  try {\n    let person = await prisma.people.findFirst({\n      where:{OR: [\n        {email: {equals: emailOrUsername, mode: 'insensitive'}},\n        {username: {equals: emailOrUsername, mode: 'insensitive'}}\n      ]}, include: {admins: true}\n    })\n    if(!person) return false\n    if(!await bcrypt.compare(password, person.password_hash)) return false\n    return person\n  } catch (e) {\n    console.log(e)\n    return false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}