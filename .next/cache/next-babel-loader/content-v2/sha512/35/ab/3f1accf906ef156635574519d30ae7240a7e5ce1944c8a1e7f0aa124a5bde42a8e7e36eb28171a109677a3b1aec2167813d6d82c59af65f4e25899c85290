{"ast":null,"code":"import cookie from 'cookie';\nexport function setTokenHeader(token) {\n  return {\n    'Set-Cookie': cookie.serialize('loginToken', JSON.stringify(token), {\n      path: '/',\n      expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30),\n      // 30 days\n      httpOnly: true,\n      sameSite: \"lax\"\n    })\n  };\n}\nexport function getToken(req) {\n  const cookies = req.headers.cookie;\n  if (!cookies) return;\n  const {\n    loginToken\n  } = cookie.parse(cookies);\n  if (loginToken) return JSON.parse(loginToken);\n  return;\n}\nexport function removeToken(res) {\n  res.setHeader('Set-Cookie', cookie.serialize('loginToken', '', {\n    path: '/',\n    expires: new Date(Date.now() - 1000),\n    httpOnly: false\n  }));\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/src/token.ts"],"names":["cookie","setTokenHeader","token","serialize","JSON","stringify","path","expires","Date","now","httpOnly","sameSite","getToken","req","cookies","headers","loginToken","parse","removeToken","res","setHeader"],"mappings":"AACA,OAAOA,MAAP,MAAmB,QAAnB;AAYA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAsC;AAC3C,SAAO;AACL,kBAAaF,MAAM,CAACG,SAAP,CAAiB,YAAjB,EAA+BC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAA/B,EAAsD;AACjEI,MAAAA,IAAI,EAAE,GAD2D;AAEjEC,MAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAA5C,CAFwD;AAEP;AAC1DC,MAAAA,QAAQ,EAAE,IAHuD;AAIjEC,MAAAA,QAAQ,EAAE;AAJuD,KAAtD;AADR,GAAP;AAQD;AAED,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuC;AAC5C,QAAMC,OAAO,GAAGD,GAAG,CAACE,OAAJ,CAAYf,MAA5B;AACA,MAAI,CAACc,OAAL,EAAc;AAEd,QAAM;AAAEE,IAAAA;AAAF,MAAiBhB,MAAM,CAACiB,KAAP,CAAaH,OAAb,CAAvB;AACA,MAAGE,UAAH,EAAe,OAAOZ,IAAI,CAACa,KAAL,CAAWD,UAAX,CAAP;AACf;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAAyC;AAC9CA,EAAAA,GAAG,CAACC,SAAJ,CACI,YADJ,EAEIpB,MAAM,CAACG,SAAP,CAAiB,YAAjB,EAA+B,EAA/B,EAAmC;AACjCG,IAAAA,IAAI,EAAE,GAD2B;AAEjCC,IAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,IAAtB,CAFwB;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAnC,CAFJ;AAQD","sourcesContent":["import { ServerResponse, IncomingMessage } from \"http\";\nimport cookie from 'cookie'\n\nexport type Token = {\n  email: string,\n  id: string,\n  username: string,\n  display_name?: string | null,\n  link?: string | null\n  bio?: string | null\n  admin?: boolean\n}\n\nexport function setTokenHeader(token:Token)  {\n  return {\n    'Set-Cookie':cookie.serialize('loginToken', JSON.stringify(token), {\n      path: '/',\n      expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), // 30 days\n      httpOnly: true,\n      sameSite: \"lax\"\n    })\n  }\n}\n\nexport function getToken(req:IncomingMessage) {\n  const cookies = req.headers.cookie\n  if (!cookies) return;\n\n  const { loginToken } = cookie.parse(cookies);\n  if(loginToken) return JSON.parse(loginToken) as Token;\n  return\n}\n\nexport function removeToken(res:ServerResponse) {\n  res.setHeader(\n      'Set-Cookie',\n      cookie.serialize('loginToken', '', {\n        path: '/',\n        expires: new Date(Date.now() - 1000),\n        httpOnly: false\n      })\n    );\n}\n"]},"metadata":{},"sourceType":"module"}