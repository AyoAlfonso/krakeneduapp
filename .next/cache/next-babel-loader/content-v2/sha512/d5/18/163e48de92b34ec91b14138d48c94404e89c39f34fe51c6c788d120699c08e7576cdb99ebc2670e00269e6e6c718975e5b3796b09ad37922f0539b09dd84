{"ast":null,"code":"import { APIHandler } from \"src/apiHelpers\";\nimport { getToken } from \"src/token\";\nimport { createTopic } from \"src/discourse\";\nimport prisma from \"lib/prisma\";\nexport default APIHandler(postTopic);\n\nasync function postTopic(req) {\n  let msg = req.body;\n  let courseId = req.query.id;\n  let cohortId = parseInt(req.query.cohortId);\n  if (Number.isNaN(cohortId)) return {\n    status: 400,\n    result: \"ERROR: Cohort id is not a number\"\n  };\n  if (!msg.title || !msg.body || !msg.tags) return {\n    status: 400,\n    result: \"ERROR: missing field title, body, or tags\"\n  };\n  let user = getToken(req);\n  if (!user) return {\n    status: 400,\n    result: \"ERROR: no user logged in\"\n  };\n  let cohort = await prisma.course_cohorts.findUnique({\n    where: {\n      id: cohortId\n    },\n    select: {\n      cohort_facilitators: true,\n      id: true,\n      category_id: true,\n      courses: {\n        select: {\n          id: true,\n          slug: true\n        }\n      }\n    }\n  });\n  if (!cohort) return {\n    status: 404,\n    result: `ERROR: Cannot find cohort ${cohortId} in course ${courseId}`\n  };\n  if (!cohort.cohort_facilitators.find(f => user && f.facilitator === user.id)) return {\n    status: 401,\n    result: `ERROR: User is not facilitator of cohort`\n  };\n  let topic = await createTopic({\n    title: msg.title,\n    raw: msg.body,\n    category: cohort.category_id,\n    tags: msg.tags\n  }, user.username);\n  if (!topic) return {\n    status: 500,\n    result: \"ERROR: Unable to create topic\"\n  };\n  return {\n    status: 200,\n    result: {\n      topic\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/cohorts/[cohortId]/postTopic.ts"],"names":["APIHandler","getToken","createTopic","prisma","postTopic","req","msg","body","courseId","query","id","cohortId","parseInt","Number","isNaN","status","result","title","tags","user","cohort","course_cohorts","findUnique","where","select","cohort_facilitators","category_id","courses","slug","find","f","facilitator","topic","raw","category","username"],"mappings":"AAAA,SAAqBA,UAArB,QAAgD,gBAAhD;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAQA,eAAeH,UAAU,CAACI,SAAD,CAAzB;;AAEA,eAAeA,SAAf,CAAyBC,GAAzB,EAAsC;AACpC,MAAIC,GAAG,GAAGD,GAAG,CAACE,IAAd;AACA,MAAIC,QAAQ,GAAGH,GAAG,CAACI,KAAJ,CAAUC,EAAzB;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACP,GAAG,CAACI,KAAJ,CAAUE,QAAX,CAAvB;AACA,MAAGE,MAAM,CAACC,KAAP,CAAaH,QAAb,CAAH,EAA2B,OAAO;AAACI,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAE3B,MAAG,CAACV,GAAG,CAACW,KAAL,IAAc,CAACX,GAAG,CAACC,IAAnB,IAA2B,CAACD,GAAG,CAACY,IAAnC,EAAyC,OAAO;AAACH,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAP;AACzC,MAAIG,IAAI,GAAGlB,QAAQ,CAACI,GAAD,CAAnB;AACA,MAAG,CAACc,IAAJ,EAAU,OAAO;AAACJ,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAEV,MAAII,MAAM,GAAG,MAAMjB,MAAM,CAACkB,cAAP,CAAsBC,UAAtB,CAAiC;AAClDC,IAAAA,KAAK,EAAE;AAACb,MAAAA,EAAE,EAAEC;AAAL,KAD2C;AAElDa,IAAAA,MAAM,EAAC;AACLC,MAAAA,mBAAmB,EAAE,IADhB;AAELf,MAAAA,EAAE,EAAE,IAFC;AAGLgB,MAAAA,WAAW,EAAE,IAHR;AAILC,MAAAA,OAAO,EAAE;AAACH,QAAAA,MAAM,EAAE;AAACd,UAAAA,EAAE,EAAE,IAAL;AAAWkB,UAAAA,IAAI,EAAE;AAAjB;AAAT;AAJJ;AAF2C,GAAjC,CAAnB;AAQA,MAAG,CAACR,MAAJ,EAAY,OAAO;AAACL,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAG,6BAA4BL,QAAS,cAAaH,QAAS;AAAjF,GAAP;AACZ,MAAG,CAACY,MAAM,CAACK,mBAAP,CAA2BI,IAA3B,CAAgCC,CAAC,IAAEX,IAAI,IAAEW,CAAC,CAACC,WAAF,KAAgBZ,IAAI,CAACT,EAA9D,CAAJ,EAAuE,OAAO;AAACK,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAP;AAEvE,MAAIgB,KAAK,GAAG,MAAM9B,WAAW,CAAC;AAC5Be,IAAAA,KAAK,EAAEX,GAAG,CAACW,KADiB;AAE5BgB,IAAAA,GAAG,EAAE3B,GAAG,CAACC,IAFmB;AAG5B2B,IAAAA,QAAQ,EAAEd,MAAM,CAACM,WAHW;AAI5BR,IAAAA,IAAI,EAAEZ,GAAG,CAACY;AAJkB,GAAD,EAK1BC,IAAI,CAACgB,QALqB,CAA7B;AAMA,MAAG,CAACH,KAAJ,EAAY,OAAO;AAACjB,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAP;AACZ,SAAO;AAACD,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAACgB,MAAAA;AAAD;AAArB,GAAP;AACD","sourcesContent":["import { ResultType, APIHandler, Request } from \"src/apiHelpers\"\nimport { getToken } from \"src/token\";\nimport { createTopic } from \"src/discourse\";\nimport prisma from \"lib/prisma\";\nexport type PostTopicMsg = {\n  title: string,\n  body: string,\n  tags: string[]\n}\nexport type PostTopicResponse = ResultType<typeof postTopic>\n\nexport default APIHandler(postTopic)\n\nasync function postTopic(req:Request) {\n  let msg = req.body as Partial<PostTopicMsg>\n  let courseId = req.query.id\n  let cohortId = parseInt(req.query.cohortId as string)\n  if(Number.isNaN(cohortId)) return {status: 400, result: \"ERROR: Cohort id is not a number\"} as const\n\n  if(!msg.title || !msg.body || !msg.tags) return {status:400, result: \"ERROR: missing field title, body, or tags\"} as const\n  let user = getToken(req)\n  if(!user) return {status: 400, result: \"ERROR: no user logged in\"} as const\n\n  let cohort = await prisma.course_cohorts.findUnique({\n    where: {id: cohortId},\n    select:{\n      cohort_facilitators: true,\n      id: true,\n      category_id: true,\n      courses: {select: {id: true, slug: true}}}\n  })\n  if(!cohort) return {status:404, result: `ERROR: Cannot find cohort ${cohortId} in course ${courseId}`} as const\n  if(!cohort.cohort_facilitators.find(f=>user&&f.facilitator===user.id)) return {status:401, result:`ERROR: User is not facilitator of cohort`} as const\n\n  let topic = await createTopic({\n    title: msg.title,\n    raw: msg.body,\n    category: cohort.category_id,\n    tags: msg.tags\n  }, user.username)\n  if(!topic)  return {status:500, result: \"ERROR: Unable to create topic\"} as const\n  return {status:200, result: {topic}} as const\n}\n"]},"metadata":{},"sourceType":"module"}