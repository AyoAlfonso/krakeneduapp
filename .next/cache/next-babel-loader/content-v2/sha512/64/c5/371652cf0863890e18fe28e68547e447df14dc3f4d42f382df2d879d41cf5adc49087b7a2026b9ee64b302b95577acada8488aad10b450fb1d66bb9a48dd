{"ast":null,"code":"import { APIHandler } from 'src/apiHelpers';\nimport { getToken } from 'src/token';\nimport prisma from \"lib/prisma\";\nexport default APIHandler({\n  GET: getDiscount,\n  DELETE: deleteDiscount\n});\nexport const getDiscountQuery = code => prisma.course_discounts.findUnique({\n  where: {\n    code\n  },\n  include: {\n    courses: {\n      select: {\n        card_image: true,\n        name: true,\n        description: true,\n        slug: true,\n        id: true,\n        type: true,\n        course_cohorts: {\n          take: 1,\n          orderBy: {\n            start_date: 'desc'\n          },\n          where: {\n            start_date: {\n              gte: new Date().toISOString()\n            }\n          }\n        }\n      }\n    }\n  }\n});\n\nasync function getDiscount(req) {\n  let code = req.query.code;\n  if (!code) return {\n    status: 400,\n    result: \"ERROR: no discount code given\"\n  };\n  let discount = await getDiscountQuery(code);\n  if (!discount || discount.deleted) return {\n    status: 404,\n    result: \"ERROR: no discount found\"\n  };\n  return {\n    status: 200,\n    result: discount\n  };\n}\n\nasync function deleteDiscount(req) {\n  let code = req.query.code;\n  let user = getToken(req);\n  if (!user) return {\n    status: 401,\n    result: \"ERROR: no user logged in\"\n  };\n  if (!code) return {\n    status: 400,\n    result: \"ERROR: no discount code given\"\n  };\n  let discount = await prisma.course_discounts.findUnique({\n    where: {\n      code\n    },\n    select: {\n      people_in_cohorts: {\n        select: {\n          discount_used: true\n        }\n      },\n      courses: {\n        select: {\n          course_maintainers: {\n            select: {\n              maintainer: true\n            }\n          }\n        }\n      }\n    }\n  });\n  if (!discount) return {\n    status: 404,\n    result: \"ERROR: no discount found\"\n  };\n\n  if (!discount.courses.course_maintainers.find(m => m.maintainer === (user === null || user === void 0 ? void 0 : user.id))) {\n    return {\n      status: 401,\n      result: \"ERROR: user is not a maintainer of this course\"\n    };\n  }\n\n  if (discount.people_in_cohorts.length === 0) {\n    await prisma.course_discounts.delete({\n      where: {\n        code\n      }\n    });\n  } else {\n    await prisma.course_discounts.update({\n      where: {\n        code\n      },\n      data: {\n        deleted: true\n      }\n    });\n  }\n\n  return {\n    status: 200,\n    result: code\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/discounts/[code].ts"],"names":["APIHandler","getToken","prisma","GET","getDiscount","DELETE","deleteDiscount","getDiscountQuery","code","course_discounts","findUnique","where","include","courses","select","card_image","name","description","slug","id","type","course_cohorts","take","orderBy","start_date","gte","Date","toISOString","req","query","status","result","discount","deleted","user","people_in_cohorts","discount_used","course_maintainers","maintainer","find","m","length","delete","update","data"],"mappings":"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","sourcesContent":["import { ResultType, APIHandler, Request} from 'src/apiHelpers'\nimport { getToken } from 'src/token'\nimport prisma from \"lib/prisma\";\nexport default APIHandler({GET: getDiscount, DELETE: deleteDiscount})\nexport type GetDiscountResult = ResultType<typeof getDiscount>\nexport type DeleteDiscountResult = ResultType<typeof deleteDiscount>\n\nexport const getDiscountQuery = (code: string) => prisma.course_discounts.findUnique({\n    where: {code},\n    include: {\n      courses: {\n        select: {\n          card_image: true,\n          name: true,\n          description: true,\n          slug: true,\n          id: true,\n          type: true,\n          course_cohorts:{\n            take: 1,\n            orderBy:{start_date:'desc'},\n            where:{start_date: {gte: (new Date()).toISOString()}}\n          }\n        }}}\n  })\nasync function getDiscount(req:Request){\n  let code = req.query.code as string\n  if(!code) return {status: 400, result: \"ERROR: no discount code given\"} as const\n  let discount = await getDiscountQuery(code)\n  if(!discount || discount.deleted) return {status:404, result: \"ERROR: no discount found\"} as const\n  return {status:200, result: discount} as const\n}\n\nasync function deleteDiscount(req:Request){\n  let code = req.query.code as string\n  let user = getToken(req)\n  if(!user) return {status:401, result:\"ERROR: no user logged in\"}\n  if(!code) return {status: 400, result: \"ERROR: no discount code given\"} as const\n  let discount = await prisma.course_discounts.findUnique({where:{code}, select:{\n    people_in_cohorts:{\n      select: {\n        discount_used: true\n      }\n    },\n    courses:{\n      select:{\n      course_maintainers: {select:{maintainer: true}}\n      }\n    }\n  }})\n  if(!discount) return {status:404, result: \"ERROR: no discount found\"} as const\n  if(!discount.courses.course_maintainers.find(m=>m.maintainer === user?.id)){\n    return {status:401, result: \"ERROR: user is not a maintainer of this course\"}\n  }\n  if(discount.people_in_cohorts.length === 0) {\n    await prisma.course_discounts.delete({where:{code}})\n  }\n  else {\n    await prisma.course_discounts.update({where:{code}, data: {deleted: true}})\n  }\n  return {status: 200, result: code} as const\n}\n"]},"metadata":{},"sourceType":"module"}