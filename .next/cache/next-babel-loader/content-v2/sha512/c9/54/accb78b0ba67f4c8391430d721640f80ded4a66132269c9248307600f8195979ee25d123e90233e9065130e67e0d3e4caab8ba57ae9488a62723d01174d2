{"ast":null,"code":"import * as t from \"runtypes\";\nimport { getUsername, createGroup, createCategory, updateTopic } from '../../../src/discourse';\nimport TemplateCourseDescription from '../../../writing/TemplateCourseDescription.txt';\nimport TemplateClubDescription from '../../../writing/TemplateClubDescription.txt';\nimport { getToken } from '../../../src/token';\nimport { APIHandler } from '../../../src/apiHelpers';\nimport TemplateCohortGettingStarted from 'writing/TemplateCohortGettingStarted.txt';\nimport TemplateCohortNotes from 'writing/TemplateCohortNotes.txt';\nimport TemplateCohortArtifact from 'writing/TemplateCohortArtifact.txt';\nimport TemplateCohortAssignment from 'writing/TemplateCohortAssignment.txt';\nimport TemplateCohortEvent from 'writing/TemplateCohortEvent.txt';\nimport TemplateCohortPrompt from 'writing/TemplateCohortPrompt.txt';\nimport TemplateCohortRetrospective from 'writing/TemplateCohortRetrospective.txt';\nimport { slugify } from 'src/utils';\nimport prisma from \"lib/prisma\";\nconst CreateCourseMsgValidator = t.Record({\n  type: t.Union(t.Literal('club'), t.Literal('course'), t.Undefined),\n  description: t.String,\n  name: t.String,\n  cost: t.Number,\n  duration: t.String,\n  prerequisites: t.String,\n  maintainers: t.Array(t.String)\n});\nexport default APIHandler({\n  POST: createCourse,\n  GET: getCourses\n});\nexport const coursesQuery = options => prisma.courses.findMany({\n  where: {\n    status: \"live\",\n    type: (options === null || options === void 0 ? void 0 : options.type) || undefined\n  },\n  include: {\n    course_cohorts: {\n      where: {\n        AND: [{\n          live: true\n        }, {\n          start_date: {\n            gt: new Date().toISOString()\n          }\n        }]\n      },\n      select: {\n        name: true,\n        start_date: true,\n        id: true,\n        people_in_cohorts: {\n          select: {\n            cohort: true\n          }\n        }\n      },\n      orderBy: {\n        start_date: \"desc\"\n      }\n    }\n  }\n});\n\nasync function getCourses(req) {\n  let courses = await coursesQuery(req.query);\n  return {\n    status: 200,\n    result: {\n      courses\n    }\n  };\n}\n\nasync function createCourse(req) {\n  let msg;\n\n  try {\n    msg = CreateCourseMsgValidator.check(req.body);\n  } catch (e) {\n    return {\n      status: 400,\n      result: e.toString()\n    };\n  }\n\n  let user = getToken(req);\n  if (!user) return {\n    status: 403,\n    result: \"ERROR: no user logged in\"\n  };\n  let isAdmin = await prisma.admins.findUnique({\n    where: {\n      person: user.id\n    }\n  });\n  if (!isAdmin) return {\n    status: 403,\n    result: \"ERROR: user is not an admin\"\n  };\n  let maintainers = await prisma.people.findMany({\n    where: {\n      email: {\n        in: msg.maintainers,\n        mode: \"insensitive\"\n      }\n    },\n    select: {\n      username: true,\n      id: true\n    }\n  });\n  let slug = slugify(msg.name);\n  if (maintainers.length === 0) return {\n    status: 400,\n    result: \"ERROR: No maintainers provided, or found with the emails provided\"\n  };\n  let maintainerGroupName = slug + \"-m\";\n  let [maintainerGroup, courseGroup] = await Promise.all([createGroup({\n    name: maintainerGroupName,\n    visibility_level: 2,\n    owner_usernames: maintainers.map(m => m.username),\n    messageable_level: 3,\n    mentionable_level: 99\n  }), createGroup({\n    name: slug,\n    visibility_level: 2,\n    owner_usernames: maintainers.map(m => m.username),\n    messageable_level: 3,\n    mentionable_level: 3\n  })]);\n  if (!maintainerGroup || !courseGroup) return {\n    status: 500,\n    result: \"ERROR: couldn't create course maintainers group\"\n  };\n  let category = await createCategory(msg.name, {\n    slug,\n    permissions: {\n      [maintainerGroupName]: 1\n    },\n    show_subcategory_list: true,\n    subcategory_list_style: \"rows_with_featured_topics\",\n    default_list_filter: \"none\"\n  });\n  if (!category) return {\n    status: 500,\n    result: \"ERROR: couldn't create course category\"\n  };\n  await updateTopic(category.topic_url, {\n    category_id: category.id,\n    title: `${msg.name} ${msg.type === \"club\" ? \"Details\" : \"Curriculum\"}`,\n    tags: [\"curriculum\"],\n    raw: msg.type === \"club\" ? TemplateClubDescription : TemplateCourseDescription\n  }, await getUsername(maintainers[0].id));\n  await prisma.courses.create({\n    data: {\n      maintainer_groupTodiscourse_groups: {\n        create: {\n          id: maintainerGroup.basic_group.id,\n          name: maintainerGroupName\n        }\n      },\n      course_groupTodiscourse_groups: {\n        create: {\n          id: courseGroup.basic_group.id,\n          name: slug\n        }\n      },\n      category_id: category.id,\n      slug: slugify(msg.name),\n      name: msg.name,\n      status: msg.type === \"club\" ? \"live\" : \"draft\",\n      card_image: msg.type === \"club\" ? \"https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png,https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png,https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png\" : undefined,\n      description: msg.description,\n      duration: msg.duration,\n      prerequisites: msg.prerequisites,\n      cost: msg.cost,\n      type: msg.type,\n      course_maintainers: {\n        create: msg.maintainers.map(email => {\n          return {\n            people: {\n              connect: {\n                email\n              }\n            }\n          };\n        })\n      },\n      course_templates: {\n        create: [{\n          content: TemplateCohortGettingStarted,\n          name: \"Getting Started\",\n          title: \"Getting Started\",\n          type: \"prepopulated\",\n          required: true\n        }, {\n          content: TemplateCohortNotes,\n          name: \"Notes\",\n          title: \"Notes\",\n          type: \"prepopulated\",\n          required: true\n        }, {\n          content: TemplateCohortArtifact,\n          name: \"Artifact\",\n          title: \"Artifact\",\n          type: \"triggered\",\n          required: true\n        }, {\n          content: TemplateCohortAssignment,\n          name: \"Assignment\",\n          title: \"Assignment\",\n          type: \"triggered\",\n          required: false\n        }, {\n          content: TemplateCohortEvent,\n          name: \"Event\",\n          title: \"Event\",\n          type: \"triggered\",\n          required: false\n        }, {\n          content: TemplateCohortPrompt,\n          name: \"Prompt\",\n          title: \"Prompt\",\n          type: \"triggered\",\n          required: false\n        }, {\n          content: TemplateCohortRetrospective,\n          name: \"Retrospective\",\n          title: \"Retrospective\",\n          type: \"triggered\",\n          required: false\n        }]\n      }\n    }\n  });\n  return {\n    status: 200,\n    result: \"Course created\"\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/index.ts"],"names":["t","getUsername","createGroup","createCategory","updateTopic","TemplateCourseDescription","TemplateClubDescription","getToken","APIHandler","TemplateCohortGettingStarted","TemplateCohortNotes","TemplateCohortArtifact","TemplateCohortAssignment","TemplateCohortEvent","TemplateCohortPrompt","TemplateCohortRetrospective","slugify","prisma","CreateCourseMsgValidator","Record","type","Union","Literal","Undefined","description","String","name","cost","Number","duration","prerequisites","maintainers","Array","POST","createCourse","GET","getCourses","coursesQuery","options","courses","findMany","where","status","undefined","include","course_cohorts","AND","live","start_date","gt","Date","toISOString","select","id","people_in_cohorts","cohort","orderBy","req","query","result","msg","check","body","e","toString","user","isAdmin","admins","findUnique","person","people","email","in","mode","username","slug","length","maintainerGroupName","maintainerGroup","courseGroup","Promise","all","visibility_level","owner_usernames","map","m","messageable_level","mentionable_level","category","permissions","show_subcategory_list","subcategory_list_style","default_list_filter","topic_url","category_id","title","tags","raw","create","data","maintainer_groupTodiscourse_groups","basic_group","course_groupTodiscourse_groups","card_image","course_maintainers","connect","course_templates","content","required"],"mappings":"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","sourcesContent":["import * as t from \"runtypes\";\nimport { getUsername, createGroup, createCategory, updateTopic } from '../../../src/discourse'\nimport TemplateCourseDescription from '../../../writing/TemplateCourseDescription.txt'\nimport TemplateClubDescription from '../../../writing/TemplateClubDescription.txt'\nimport {getToken} from '../../../src/token'\nimport { ResultType, Request, APIHandler} from '../../../src/apiHelpers'\nimport TemplateCohortGettingStarted from 'writing/TemplateCohortGettingStarted.txt'\nimport TemplateCohortNotes from 'writing/TemplateCohortNotes.txt'\nimport TemplateCohortArtifact from 'writing/TemplateCohortArtifact.txt'\nimport TemplateCohortAssignment from 'writing/TemplateCohortAssignment.txt'\nimport TemplateCohortEvent from 'writing/TemplateCohortEvent.txt'\nimport TemplateCohortPrompt from 'writing/TemplateCohortPrompt.txt'\nimport TemplateCohortRetrospective from 'writing/TemplateCohortRetrospective.txt'\nimport {slugify} from 'src/utils'\n\nimport prisma from \"lib/prisma\";\n\nexport type CourseResult = ResultType<typeof getCourses>\nexport type CreateCourseMsg = t.Static<typeof CreateCourseMsgValidator>\nconst CreateCourseMsgValidator = t.Record({\n  type: t.Union(t.Literal('club'), t.Literal('course'), t.Undefined),\n  description: t.String,\n  name: t.String,\n  cost: t.Number,\n  duration: t.String,\n  prerequisites: t.String,\n  maintainers: t.Array(t.String)\n})\n\nexport type CreateCourseResponse = ResultType<typeof createCourse>\n\nexport default APIHandler({POST: createCourse, GET: getCourses})\n\nexport const coursesQuery = (options?:Partial<{type:'course' | 'club'}>) => prisma.courses.findMany({\n  where: {status: \"live\", type: options?.type || undefined},\n  include: {\n    course_cohorts: {\n      where: {AND: [{live:true}, {start_date: {gt: (new Date()).toISOString()}}]},\n      select: {name: true, start_date: true, id: true, people_in_cohorts: {select:{cohort: true}}},\n      orderBy: {start_date: \"desc\"},\n    }\n  }\n})\n\nasync function getCourses(req:Request) {\n  let courses = await coursesQuery(req.query)\n  return {status: 200, result: {courses}} as const\n}\n\n\nasync function createCourse(req: Request) {\n  let msg;\n  try {\n    msg = CreateCourseMsgValidator.check(req.body);\n  } catch (e) {\n    return { status: 400, result: e.toString() } as const;\n  }\n  \n\n  let user = getToken(req);\n  if (!user)\n    return { status: 403, result: \"ERROR: no user logged in\" } as const;\n\n  let isAdmin = await prisma.admins.findUnique({ where: { person: user.id } });\n  if (!isAdmin)\n    return { status: 403, result: \"ERROR: user is not an admin\" } as const;\n\n  let maintainers = await prisma.people.findMany({\n    where: { email: { in: msg.maintainers, mode: \"insensitive\" } },\n    select: { username: true, id: true },\n  });\n\n\n  let slug = slugify(msg.name);\n  if (maintainers.length === 0)\n    return {\n      status: 400,\n      result:\n        \"ERROR: No maintainers provided, or found with the emails provided\",\n    };\n\n  let maintainerGroupName = slug + \"-m\";\n  let [maintainerGroup, courseGroup] = await Promise.all([\n    createGroup({\n      name: maintainerGroupName,\n      visibility_level: 2,\n      owner_usernames: maintainers.map((m) => m.username),\n      messageable_level: 3,\n      mentionable_level: 99,\n    }),\n    createGroup({\n      name: slug,\n      visibility_level: 2,\n      owner_usernames: maintainers.map((m) => m.username),\n      messageable_level: 3,\n      mentionable_level: 3,\n    }),\n  ]);\n  if (!maintainerGroup || !courseGroup)\n    return {\n      status: 500,\n      result: \"ERROR: couldn't create course maintainers group\",\n    } as const;\n\n  let category = await createCategory(msg.name, {\n    slug,\n    permissions: { [maintainerGroupName]: 1 },\n    show_subcategory_list: true,\n    subcategory_list_style: \"rows_with_featured_topics\",\n    default_list_filter: \"none\",\n  });\n  if (!category)\n    return {\n      status: 500,\n      result: \"ERROR: couldn't create course category\",\n    } as const;\n  await updateTopic(\n    category.topic_url,\n    {\n      category_id: category.id,\n      title: `${msg.name} ${msg.type === \"club\" ? \"Details\" : \"Curriculum\"}`,\n      tags: [\"curriculum\"],\n      raw:\n        msg.type === \"club\"\n          ? TemplateClubDescription\n          : TemplateCourseDescription,\n    },\n    await getUsername(maintainers[0].id)\n  );\n\n  await prisma.courses.create({\n    data: {\n      maintainer_groupTodiscourse_groups: {\n        create: {\n          id: maintainerGroup.basic_group.id,\n          name: maintainerGroupName,\n        },\n      },\n      course_groupTodiscourse_groups: {\n        create: {\n          id: courseGroup.basic_group.id,\n          name: slug,\n        },\n      },\n      category_id: category.id,\n      slug: slugify(msg.name),\n      name: msg.name,\n      status: msg.type === \"club\" ? \"live\" : \"draft\",\n      card_image:\n        msg.type === \"club\"\n          ? \"https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png,https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png,https://hyperlink-data.nyc3.cdn.digitaloceanspaces.com/icons/EmojiSet/Sparkle.png\"\n          : undefined,\n      description: msg.description,\n      duration: msg.duration,\n      prerequisites: msg.prerequisites,\n      cost: msg.cost,\n      type: msg.type,\n      course_maintainers: {\n        create: msg.maintainers.map((email) => {\n          return {\n            people: {\n              connect: { email },\n            },\n          };\n        }),\n      },\n      course_templates: {\n        create: [\n          {\n            content: TemplateCohortGettingStarted,\n            name: \"Getting Started\",\n            title: \"Getting Started\",\n            type: \"prepopulated\",\n            required: true,\n          },\n          {\n            content: TemplateCohortNotes,\n            name: \"Notes\",\n            title: \"Notes\",\n            type: \"prepopulated\",\n            required: true,\n          },\n          {\n            content: TemplateCohortArtifact,\n            name: \"Artifact\",\n            title: \"Artifact\",\n            type: \"triggered\",\n            required: true,\n          },\n          {\n            content: TemplateCohortAssignment,\n            name: \"Assignment\",\n            title: \"Assignment\",\n            type: \"triggered\",\n            required: false,\n          },\n          {\n            content: TemplateCohortEvent,\n            name: \"Event\",\n            title: \"Event\",\n            type: \"triggered\",\n            required: false,\n          },\n          {\n            content: TemplateCohortPrompt,\n            name: \"Prompt\",\n            title: \"Prompt\",\n            type: \"triggered\",\n            required: false,\n          },\n          {\n            content: TemplateCohortRetrospective,\n            name: \"Retrospective\",\n            title: \"Retrospective\",\n            type: \"triggered\",\n            required: false,\n          },\n        ],\n      },\n    },\n  });\n  return { status: 200, result: \"Course created\" };\n}\n"]},"metadata":{},"sourceType":"module"}