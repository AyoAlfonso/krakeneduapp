{"ast":null,"code":"import { APIHandler } from \"../../../../src/apiHelpers\";\nimport prisma from \"lib/prisma\";\nimport { sendInviteToCourseEmail } from \"../../../../emails\";\nexport default APIHandler(inviteToCourse);\n\nasync function inviteToCourse(req) {\n  var _msg$email;\n\n  let msg = req.body;\n  let courseID = parseInt(req.query.id);\n  if (Number.isNaN(courseID)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  if (!msg.email && !msg.username) return {\n    status: 400,\n    result: \"ERROR: Must include username or email\"\n  };\n  let email = ((_msg$email = msg.email) === null || _msg$email === void 0 ? void 0 : _msg$email.toLowerCase()) || '';\n  let name = '';\n\n  if (msg.username) {\n    let person = await prisma.people.findFirst({\n      where: {\n        username: {\n          equals: msg.username,\n          mode: 'insensitive'\n        }\n      },\n      select: {\n        email: true,\n        display_name: true\n      }\n    });\n    if (!person) return {\n      status: 404,\n      result: `no user with username ${msg.username} found`\n    };\n    email = person.email;\n    name = person.display_name || '';\n  }\n\n  let courseData = await prisma.courses.findUnique({\n    where: {\n      id: courseID\n    },\n    select: {\n      name: true,\n      slug: true\n    }\n  });\n  if (!courseData) return {\n    status: 404,\n    result: `ERROR: no course found with id ${courseID}`\n  };\n  await prisma.course_invites.create({\n    data: {\n      email,\n      courses: {\n        connect: {\n          id: courseID\n        }\n      }\n    }\n  });\n  await sendInviteToCourseEmail(email, {\n    course_url: `ttps://app.krakenedu.com/courses/${courseData.slug}/${courseID}`,\n    course_name: courseData.name,\n    name\n  });\n  return {\n    status: 200,\n    result: {\n      email\n    }\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/invite.ts"],"names":["APIHandler","prisma","sendInviteToCourseEmail","inviteToCourse","req","msg","body","courseID","parseInt","query","id","Number","isNaN","status","result","email","username","toLowerCase","name","person","people","findFirst","where","equals","mode","select","display_name","courseData","courses","findUnique","slug","course_invites","create","data","connect","course_url","course_name"],"mappings":"AAAA,SAA8BA,UAA9B,QAA+C,4BAA/C;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AAKA,eAAeF,UAAU,CAACG,cAAD,CAAzB;;AACA,eAAeA,cAAf,CAA8BC,GAA9B,EAA2C;AAAA;;AACzC,MAAIC,GAAG,GAAGD,GAAG,CAACE,IAAd;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACJ,GAAG,CAACK,KAAJ,CAAUC,EAAX,CAAvB;AACA,MAAGC,MAAM,CAACC,KAAP,CAAaL,QAAb,CAAH,EAA2B,OAAO;AAACM,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAE3B,MAAG,CAACT,GAAG,CAACU,KAAL,IAAc,CAACV,GAAG,CAACW,QAAtB,EAAgC,OAAO;AAACH,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAEhC,MAAIC,KAAK,GAAG,eAAAV,GAAG,CAACU,KAAJ,0DAAWE,WAAX,OAA4B,EAAxC;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAGb,GAAG,CAACW,QAAP,EAAiB;AACf,QAAIG,MAAM,GAAG,MAAMlB,MAAM,CAACmB,MAAP,CAAcC,SAAd,CAAwB;AAACC,MAAAA,KAAK,EAAE;AAACN,QAAAA,QAAQ,EAAE;AAACO,UAAAA,MAAM,EAAElB,GAAG,CAACW,QAAb;AAAuBQ,UAAAA,IAAI,EAAE;AAA7B;AAAX,OAAR;AAAiEC,MAAAA,MAAM,EAAC;AAACV,QAAAA,KAAK,EAAE,IAAR;AAAcW,QAAAA,YAAY,EAAE;AAA5B;AAAxE,KAAxB,CAAnB;AACA,QAAG,CAACP,MAAJ,EAAY,OAAO;AAACN,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAG,yBAAwBT,GAAG,CAACW,QAAS;AAA5D,KAAP;AACZD,IAAAA,KAAK,GAAGI,MAAM,CAACJ,KAAf;AACAG,IAAAA,IAAI,GAAGC,MAAM,CAACO,YAAP,IAAuB,EAA9B;AACD;;AAED,MAAIC,UAAU,GAAG,MAAM1B,MAAM,CAAC2B,OAAP,CAAeC,UAAf,CAA0B;AAACP,IAAAA,KAAK,EAAE;AAACZ,MAAAA,EAAE,EAAEH;AAAL,KAAR;AAAwBkB,IAAAA,MAAM,EAAC;AAACP,MAAAA,IAAI,EAAE,IAAP;AAAaY,MAAAA,IAAI,EAAC;AAAlB;AAA/B,GAA1B,CAAvB;AACA,MAAG,CAACH,UAAJ,EAAgB,OAAO;AAACd,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAG,kCAAiCP,QAAS;AAAhE,GAAP;AAEhB,QAAMN,MAAM,CAAC8B,cAAP,CAAsBC,MAAtB,CAA6B;AAACC,IAAAA,IAAI,EAAE;AACxClB,MAAAA,KADwC;AAExCa,MAAAA,OAAO,EAAE;AACPM,QAAAA,OAAO,EAAE;AACPxB,UAAAA,EAAE,EAAEH;AADG;AADF;AAF+B;AAAP,GAA7B,CAAN;AASA,QAAML,uBAAuB,CAACa,KAAD,EAAQ;AACnCoB,IAAAA,UAAU,EAAG,oCAAmCR,UAAU,CAACG,IAAK,IAAGvB,QAAS,EADzC;AAEnC6B,IAAAA,WAAW,EAAET,UAAU,CAACT,IAFW;AAGnCA,IAAAA;AAHmC,GAAR,CAA7B;AAMA,SAAO;AAACL,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAACC,MAAAA;AAAD;AAAtB,GAAP;AACD","sourcesContent":["import { Request, ResultType, APIHandler} from \"../../../../src/apiHelpers\"\nimport prisma from \"lib/prisma\";\nimport { sendInviteToCourseEmail } from \"../../../../emails\"\n\nexport type InviteToCourseMsg = ({ email: string, username: undefined} | {username: string, email: undefined})\nexport type InviteToCourseResponse = ResultType<typeof inviteToCourse>\n\nexport default APIHandler(inviteToCourse)\nasync function inviteToCourse(req:Request) {\n  let msg = req.body as Partial<InviteToCourseMsg>\n  let courseID = parseInt(req.query.id as string)\n  if(Number.isNaN(courseID)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n\n  if(!msg.email && !msg.username) return {status: 400, result: \"ERROR: Must include username or email\"} as const\n\n  let email = msg.email?.toLowerCase() || ''\n  let name = ''\n  if(msg.username) {\n    let person = await prisma.people.findFirst({where: {username: {equals: msg.username, mode: 'insensitive'}}, select:{email: true, display_name: true}})\n    if(!person) return {status: 404, result: `no user with username ${msg.username} found`} as const\n    email = person.email\n    name = person.display_name || ''\n  }\n\n  let courseData = await prisma.courses.findUnique({where: {id: courseID}, select:{name: true, slug:true}})\n  if(!courseData) return {status:404, result: `ERROR: no course found with id ${courseID}`}\n\n  await prisma.course_invites.create({data: {\n    email,\n    courses: {\n      connect: {\n        id: courseID\n      }\n    }\n  }})\n\n  await sendInviteToCourseEmail(email, {\n    course_url: `ttps://app.krakenedu.com/courses/${courseData.slug}/${courseID}`,\n    course_name: courseData.name,\n    name,\n  });\n\n  return {status: 200, result: {email}} as const\n}\n"]},"metadata":{},"sourceType":"module"}