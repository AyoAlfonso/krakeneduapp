{"ast":null,"code":"import h from 'react-hyperscript';\nimport * as t from 'runtypes';\nimport { useState, useEffect, Fragment } from 'react';\nimport { CheckBox, Input } from './Form';\nvar TodoParser = t.Array(t.Boolean);\nexport function TodoList(props) {\n  var items = props.items.filter(function (i) {\n    return !!i;\n  });\n\n  var _useState = useState(new Array(items.length).fill(false)),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  useEffect(function () {\n    if (!props.persistKey) return;\n    var savedValue = localStorage.getItem(props.persistKey);\n\n    try {\n      var localData = TodoParser.check(JSON.parse(savedValue || ''));\n      setChecked(localData);\n    } catch (e) {}\n  }, []);\n  useEffect(function () {\n    if (!props.persistKey) return;\n    localStorage.setItem(props.persistKey, JSON.stringify(checked));\n  }, [checked]);\n  return h(Fragment, items.map(function (todo, index) {\n    return h(CheckBox, [h(Input, {\n      type: 'checkbox',\n      checked: checked[index],\n      onChange: function onChange(e) {\n        var newValues = checked.slice(0);\n        newValues[index] = e.currentTarget.checked;\n        setChecked(newValues);\n      }\n    }), todo]);\n  }));\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/components/TodoList.ts"],"names":["h","t","useState","useEffect","Fragment","CheckBox","Input","TodoParser","Array","Boolean","TodoList","props","items","filter","i","length","fill","checked","setChecked","persistKey","savedValue","localStorage","getItem","localData","check","JSON","parse","e","setItem","stringify","map","todo","index","type","onChange","newValues","slice","currentTarget"],"mappings":"AAAA,OAAOA,CAAP,MAAc,mBAAd;AACA,OAAO,KAAKC,CAAZ,MAAmB,UAAnB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA4C,OAA5C;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,QAAhC;AAEA,IAAIC,UAAU,GAAGN,CAAC,CAACO,KAAF,CAAQP,CAAC,CAACQ,OAAV,CAAjB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAmG;AACxG,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAYC,MAAZ,CAAmB,UAAAC,CAAC;AAAA,WAAE,CAAC,CAACA,CAAJ;AAAA,GAApB,CAAZ;;AADwG,kBAE5EZ,QAAQ,CAAE,IAAIM,KAAJ,CAAUI,KAAK,CAACG,MAAhB,EAAwBC,IAAxB,CAA6B,KAA7B,CAAF,CAFoE;AAAA,MAEnGC,OAFmG;AAAA,MAE1FC,UAF0F;;AAGxGf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAG,CAACQ,KAAK,CAACQ,UAAV,EAAsB;AACtB,QAAIC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqBX,KAAK,CAACQ,UAA3B,CAAjB;;AACA,QAAI;AACF,UAAII,SAAS,GAAGhB,UAAU,CAACiB,KAAX,CAAiBC,IAAI,CAACC,KAAL,CAAWN,UAAU,IAAI,EAAzB,CAAjB,CAAhB;AACAF,MAAAA,UAAU,CAACK,SAAD,CAAV;AACD,KAHD,CAIA,OAAMI,CAAN,EAAQ,CAAE;AACX,GARQ,EAQP,EARO,CAAT;AASAxB,EAAAA,SAAS,CAAC,YAAI;AACZ,QAAG,CAACQ,KAAK,CAACQ,UAAV,EAAsB;AACtBE,IAAAA,YAAY,CAACO,OAAb,CAAqBjB,KAAK,CAACQ,UAA3B,EAAuCM,IAAI,CAACI,SAAL,CAAeZ,OAAf,CAAvC;AACD,GAHQ,EAGP,CAACA,OAAD,CAHO,CAAT;AAKA,SAAOjB,CAAC,CAACI,QAAD,EAAWQ,KAAK,CAACkB,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAe;AAC1C,WAAOhC,CAAC,CAACK,QAAD,EAAW,CACjBL,CAAC,CAACM,KAAD,EAAQ;AACP2B,MAAAA,IAAI,EAAE,UADC;AAEPhB,MAAAA,OAAO,EAAEA,OAAO,CAACe,KAAD,CAFT;AAGPE,MAAAA,QAAQ,EAAE,kBAAAP,CAAC,EAAG;AACZ,YAAIQ,SAAS,GAAGlB,OAAO,CAACmB,KAAR,CAAc,CAAd,CAAhB;AACAD,QAAAA,SAAS,CAACH,KAAD,CAAT,GAAmBL,CAAC,CAACU,aAAF,CAAgBpB,OAAnC;AACAC,QAAAA,UAAU,CAACiB,SAAD,CAAV;AACD;AAPM,KAAR,CADgB,EAUjBJ,IAViB,CAAX,CAAR;AAYD,GAbkB,CAAX,CAAR;AAcD","sourcesContent":["import h from 'react-hyperscript'\nimport * as t from 'runtypes'\nimport {useState, useEffect, Fragment} from 'react'\nimport { CheckBox, Input } from './Form'\n\nlet TodoParser = t.Array(t.Boolean)\n\nexport function TodoList(props: {items: Array< string | React.ReactElement | null>, persistKey?: string}) {\n  let items = props.items.filter(i=>!!i)\n  let [checked, setChecked] = useState (new Array(items.length).fill(false))\n  useEffect(() => {\n    if(!props.persistKey) return\n    let savedValue = localStorage.getItem(props.persistKey)\n    try {\n      let localData = TodoParser.check(JSON.parse(savedValue || ''))\n      setChecked(localData)\n    }\n    catch(e){}\n  },[])\n  useEffect(()=>{\n    if(!props.persistKey) return\n    localStorage.setItem(props.persistKey, JSON.stringify(checked))\n  },[checked])\n\n  return h(Fragment, items.map((todo, index)=>{\n    return h(CheckBox, [\n      h(Input, {\n        type: 'checkbox',\n        checked: checked[index],\n        onChange: e=> {\n          let newValues = checked.slice(0)\n          newValues[index] = e.currentTarget.checked\n          setChecked(newValues)\n        }\n      }),\n      todo\n    ])\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}