{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport h from 'react-hyperscript';\nimport { cohortDataQuery } from \"pages/api/cohorts/[cohortId]\";\nimport { getTaggedPost } from \"src/discourse\";\nimport ErrorPage from 'pages/404';\nimport { Box, FormBox, LabelBox } from 'components/Layout';\nimport { PageLoader } from 'components/Loader';\nimport { useCohortData, useUserData } from 'src/data';\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { BackButton, Primary, Destructive } from 'components/Button';\nimport { Tabs } from 'components/Tabs';\nimport { Input, Textarea } from 'components/Form';\nimport { useFormData } from 'src/hooks';\nimport { useApi } from 'src/apiHelpers';\nimport { cohortName } from 'src/utils';\nexport default function WrappedSettingsPage(props) {\n  return props.notFound ? h(ErrorPage) : h(CohortSettingsPage, props);\n}\n\nconst CohortSettingsPage = props => {\n  let {\n    data: user\n  } = useUserData();\n  let {\n    data: cohort,\n    mutate\n  } = useCohortData(props.cohortId, props.cohort);\n  let router = useRouter();\n  useEffect(() => {\n    if (!props.cohort || user === undefined) return;else if (user === false) router.push('/');else if (!props.cohort.cohort_facilitators.find(f => user && f.facilitator === user.id)) router.push('/dashboard');\n  }, [user, props.cohort]);\n  if (!cohort) return h(PageLoader);\n  return h(Box, {\n    gap: 64\n  }, [h(Box, [h(BackButton, {\n    href: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n  }, \"Cohort\"), h('h1', \"Cohort Settings\"), h('h4', cohortName(cohort.name))]), h(Tabs, {\n    tabs: {\n      Details: h(CohortDetails, {\n        cohort,\n        mutate\n      })\n    }\n  })]);\n};\n\nfunction CohortDetails(props) {\n  let start_date = new Date(props.cohort.start_date);\n  let {\n    state,\n    form,\n    reset,\n    changed\n  } = useFormData({\n    name: props.cohort.name,\n    description: props.cohort.description,\n    start_date: `${start_date.getFullYear()}-${('0' + (start_date.getMonth() + 1)).slice(-2)}-${('0' + start_date.getDate()).slice(-2)}`,\n    start_time: start_date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    })\n  }, [props.cohort]);\n  let [status, callUpdateCohort] = useApi([]);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    let d1 = state.start_date.split('-').map(x => parseInt(x));\n    let t1 = state.start_time.split(':').map(x => parseInt(x));\n    let start_date = new Date(d1[0], d1[1] - 1, d1[2], t1[0], t1[1]).toISOString();\n    let result = await callUpdateCohort(`/api/cohorts/${props.cohort.id}`, {\n      data: {\n        name: state.name,\n        description: state.description,\n        start_date\n      }\n    });\n\n    if (result.status === 200) {\n      props.mutate(_objectSpread(_objectSpread({}, props.cohort), result.result));\n    }\n  };\n\n  return h(FormBox, {\n    width: 400,\n    onSubmit\n  }, [h(LabelBox, {\n    gap: 8\n  }, [h('h3', 'Cohort Name'), h(Input, _objectSpread({\n    maxLength: 50\n  }, form.name))]), h(LabelBox, {\n    gap: 8\n  }, [h(\"div\", [h('h4', 'Blurb'), h('small', 'Describe your cohort in one or two sentences. ')]), h(Textarea, _objectSpread({\n    maxLength: 200\n  }, form.description))]), h(LabelBox, {\n    gap: 8\n  }, [h('h4', \"Start Date\"), h(Box, {\n    h: true\n  }, [h(Input, _objectSpread({\n    type: \"date\"\n  }, form.start_date)), h(Input, _objectSpread({\n    type: \"time\"\n  }, form.start_time))])]), h(Box, {\n    h: true,\n    style: {\n      justifySelf: \"right\"\n    }\n  }, [h(Destructive, {\n    disabled: !changed,\n    onClick: e => {\n      e.preventDefault();\n      reset();\n    }\n  }, \"Discard Changes\"), h(Primary, {\n    type: 'submit',\n    disabled: !changed,\n    status\n  }, 'Save Changes')])]);\n}\n\nexport const getStaticProps = async ctx => {\n  var _ctx$params;\n\n  let cohortId = parseInt(((_ctx$params = ctx.params) === null || _ctx$params === void 0 ? void 0 : _ctx$params.cohortId) || '');\n  if (Number.isNaN(cohortId)) return {\n    props: {\n      notFound: true\n    }\n  };\n  let cohort = await cohortDataQuery(cohortId);\n  if (!cohort) return {\n    props: {\n      notFound: true\n    }\n  };\n  let cohort_events = cohort.cohort_events.filter(c => c.everyone).map(event => {\n    return _objectSpread(_objectSpread({}, event), {}, {\n      events: _objectSpread(_objectSpread({}, event.events), {}, {\n        location: ''\n      })\n    });\n  });\n  let [notes] = await Promise.all([getTaggedPost(cohort.category_id, 'note')]);\n  return {\n    props: {\n      notFound: false,\n      cohortId,\n      cohort: _objectSpread(_objectSpread({}, cohort), {}, {\n        cohort_events\n      }),\n      notes\n    },\n    revalidate: 1\n  };\n};\nexport const getStaticPaths = () => {\n  return {\n    paths: [],\n    fallback: true\n  };\n};","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/courses/[slug]/[id]/cohorts/[cohortId]/settings.ts"],"names":["h","cohortDataQuery","getTaggedPost","ErrorPage","Box","FormBox","LabelBox","PageLoader","useCohortData","useUserData","useEffect","useRouter","BackButton","Primary","Destructive","Tabs","Input","Textarea","useFormData","useApi","cohortName","WrappedSettingsPage","props","notFound","CohortSettingsPage","data","user","cohort","mutate","cohortId","router","undefined","push","cohort_facilitators","find","f","facilitator","id","gap","href","courses","slug","name","tabs","Details","CohortDetails","start_date","Date","state","form","reset","changed","description","getFullYear","getMonth","slice","getDate","start_time","toLocaleTimeString","hour","minute","hour12","status","callUpdateCohort","onSubmit","e","preventDefault","d1","split","map","x","parseInt","t1","toISOString","result","width","maxLength","type","style","justifySelf","disabled","onClick","getStaticProps","ctx","params","Number","isNaN","cohort_events","filter","c","everyone","event","events","location","notes","Promise","all","category_id","revalidate","getStaticPaths","paths","fallback"],"mappings":"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","sourcesContent":["import h from 'react-hyperscript'\nimport { InferGetStaticPropsType } from \"next\"\nimport { cohortDataQuery, UpdateCohortMsg, UpdateCohortResponse } from \"pages/api/cohorts/[cohortId]\"\nimport { getTaggedPost } from \"src/discourse\"\nimport ErrorPage from 'pages/404'\nimport { Box, FormBox, LabelBox } from 'components/Layout'\nimport { PageLoader } from 'components/Loader'\nimport { Cohort, useCohortData, useUserData } from 'src/data'\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { BackButton, Primary, Destructive } from 'components/Button'\nimport { Tabs } from 'components/Tabs'\nimport { Input, Textarea } from 'components/Form'\nimport { useFormData } from 'src/hooks'\nimport { useApi } from 'src/apiHelpers'\nimport { cohortName } from 'src/utils'\n\ntype Props = InferGetStaticPropsType<typeof getStaticProps>\nexport default function WrappedSettingsPage(props:Props) {return props.notFound ? h(ErrorPage) : h(CohortSettingsPage, props)}\nconst CohortSettingsPage= (props: Extract<Props, {notFound:false}>) => {\n  let {data: user} = useUserData()\n  let {data: cohort, mutate} = useCohortData(props.cohortId, props.cohort)\n  let router = useRouter()\n  useEffect(()=>{\n    if(!props.cohort || user === undefined) return\n    else if(user===false) router.push('/')\n    else if(!props.cohort.cohort_facilitators.find(f=>user&&f.facilitator===user.id)) router.push('/dashboard')\n  },[user, props.cohort])\n  if(!cohort) return h(PageLoader)\n  return h(Box, {gap:64}, [\n    h(Box, [\n      h(BackButton, {href:`/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`}, \"Cohort\"),\n      h('h1', \"Cohort Settings\"),\n      h('h4', cohortName(cohort.name))\n    ]),\n    h(Tabs, {tabs: {\n      Details: h(CohortDetails, {cohort, mutate}),\n    }\n    })\n  ])\n}\n\nfunction CohortDetails(props:{cohort:Cohort, mutate:(c:Cohort)=>void}) {\n  let start_date = new Date(props.cohort.start_date)\n  let {state, form, reset, changed} = useFormData({\n    name: props.cohort.name,\n    description: props.cohort.description,\n    start_date: `${start_date.getFullYear()}-${('0'+(start_date.getMonth()+1)).slice(-2)}-${('0'+start_date.getDate()).slice(-2)}`,\n    start_time: start_date.toLocaleTimeString([], {hour:\"2-digit\", minute: \"2-digit\", hour12: false}),\n  }, [props.cohort])\n\n  let [status, callUpdateCohort] = useApi<UpdateCohortMsg, UpdateCohortResponse>([])\n\n  const onSubmit = async (e:React.FormEvent)=>{\n    e.preventDefault()\n\n    let d1 = state.start_date.split('-').map(x=>parseInt(x))\n    let t1 = state.start_time.split(':').map(x=>parseInt(x))\n    let start_date = (new Date(d1[0], d1[1] -1, d1[2], t1[0], t1[1])).toISOString()\n    let result = await callUpdateCohort(`/api/cohorts/${props.cohort.id}`, {data: {\n      name: state.name,\n      description: state.description,\n      start_date\n    }})\n    if(result.status === 200) {\n      props.mutate({...props.cohort, ...result.result})\n    }\n  }\n\n  return h(FormBox, {width: 400, onSubmit}, [\n    h(LabelBox, {gap: 8}, [\n      h('h3', 'Cohort Name'),\n      h(Input, {maxLength: 50, ...form.name})\n    ]),\n    h(LabelBox, {gap:8}, [\n      h(\"div\", [\n        h('h4', 'Blurb'),\n        h('small', 'Describe your cohort in one or two sentences. ')\n      ]),\n      h(Textarea, {maxLength: 200, ...form.description})\n    ]),\n    h(LabelBox, {gap:8}, [\n      h('h4', \"Start Date\"),\n      h(Box, {h: true},[\n      h(Input, {type: \"date\", ...form.start_date}),\n      h(Input, {type: \"time\", ...form.start_time})\n      ])\n    ]),\n    h(Box, {h: true, style:{justifySelf:\"right\"}},[\n      h(Destructive, {disabled: !changed, onClick: (e)=>{\n        e.preventDefault()\n        reset()\n      }}, \"Discard Changes\"),\n        h(Primary, {type: 'submit', disabled: !changed, status}, 'Save Changes')\n    ])\n  ])\n}\n\nexport const getStaticProps = async (ctx:any)=>{\n  let cohortId = parseInt(ctx.params?.cohortId as string || '')\n  if(Number.isNaN(cohortId)) return {props:{notFound: true}} as const\n  let cohort = await cohortDataQuery(cohortId)\n\n  if(!cohort) return {props: {notFound: true}} as const\n\n  let cohort_events = cohort.cohort_events\n    .filter(c=>c.everyone)\n    .map(event =>{\n      return {...event, events: {...event.events, location: ''}}\n  })\n\n  let [notes] = await Promise.all([\n    getTaggedPost(cohort.category_id, 'note'),\n  ])\n  return {\n    props: {\n      notFound: false,\n      cohortId,\n      cohort: {...cohort, cohort_events},\n      notes,\n    },\n    revalidate: 1} as const\n}\n\nexport const getStaticPaths = () => {\n  return {paths:[], fallback: true}\n}\n"]},"metadata":{},"sourceType":"module"}