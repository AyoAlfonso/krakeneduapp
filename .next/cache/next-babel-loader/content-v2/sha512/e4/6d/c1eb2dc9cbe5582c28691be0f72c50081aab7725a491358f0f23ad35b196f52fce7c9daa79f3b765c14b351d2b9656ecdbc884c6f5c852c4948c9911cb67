{"ast":null,"code":"import { APIHandler } from \"src/apiHelpers\";\nimport prisma from \"lib/prisma\";\nexport default APIHandler(getCohortEvents);\n\nasync function getCohortEvents(req) {\n  let cohortId = parseInt(req.query.cohortId);\n  if (Number.isNaN(cohortId)) return {\n    status: 400,\n    result: \"ERROR: Cohort id is not a number\"\n  };\n  let cohort_events = await prisma.cohort_events.findMany({\n    where: {\n      cohort: cohortId\n    },\n    select: {\n      events: {\n        select: {\n          start_date: true,\n          end_date: true,\n          description: true,\n          name: true\n        }\n      }\n    }\n  });\n  return {\n    status: 200,\n    result: cohort_events\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/cohorts/[cohortId]/events.ts"],"names":["APIHandler","prisma","getCohortEvents","req","cohortId","parseInt","query","Number","isNaN","status","result","cohort_events","findMany","where","cohort","select","events","start_date","end_date","description","name"],"mappings":"AAAA,SAASA,UAAT,QAAgD,gBAAhD;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,eAAeD,UAAU,CAACE,eAAD,CAAzB;;AAIA,eAAeA,eAAf,CAA+BC,GAA/B,EAA6C;AAC3C,MAAIC,QAAQ,GAAGC,QAAQ,CAACF,GAAG,CAACG,KAAJ,CAAUF,QAAX,CAAvB;AACA,MAAGG,MAAM,CAACC,KAAP,CAAaJ,QAAb,CAAH,EAA2B,OAAO;AAACK,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAC3B,MAAIC,aAAa,GAAG,MAAMV,MAAM,CAACU,aAAP,CAAqBC,QAArB,CAA8B;AACtDC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAEV;AADH,KAD+C;AAItDW,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE;AACND,QAAAA,MAAM,EAAE;AACNE,UAAAA,UAAU,EAAE,IADN;AAENC,UAAAA,QAAQ,EAAE,IAFJ;AAGNC,UAAAA,WAAW,EAAE,IAHP;AAINC,UAAAA,IAAI,EAAE;AAJA;AADF;AADF;AAJ8C,GAA9B,CAA1B;AAeA,SAAO;AAACX,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAEC;AAAtB,GAAP;AACD","sourcesContent":["import { APIHandler, Request, ResultType } from \"src/apiHelpers\";\nimport prisma from \"lib/prisma\";\n\nexport default APIHandler(getCohortEvents)\n\nexport type GetCohortEventResponse = ResultType<typeof getCohortEvents>\n\nasync function getCohortEvents(req: Request) {\n  let cohortId = parseInt(req.query.cohortId as string)\n  if(Number.isNaN(cohortId)) return {status: 400, result: \"ERROR: Cohort id is not a number\"} as const\n  let cohort_events = await prisma.cohort_events.findMany({\n    where: {\n      cohort: cohortId\n    },\n    select: {\n      events: {\n        select: {\n          start_date: true,\n          end_date: true,\n          description: true,\n          name: true\n        }\n      }\n    }\n  })\n  return {status: 200, result: cohort_events} as const\n}\n"]},"metadata":{},"sourceType":"module"}