{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ayooluwaalfonso/code/krakeneduapp/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ayooluwaalfonso/code/krakeneduapp/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as Sentry from '@sentry/node';\nimport { useState, useEffect } from 'react';\nimport useSWR from 'swr';\nexport var APIHandler = function APIHandler(handler) {\n  if (process.env.NEXT_PUBLIC_SENTRY_DSN) {\n    Sentry.init({\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN\n    });\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n      var result, method, methodHandler, _i, _Object$keys, header;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(typeof handler === 'object')) {\n                _context.next = 12;\n                break;\n              }\n\n              method = req.method;\n              methodHandler = handler[method];\n\n              if (methodHandler) {\n                _context.next = 7;\n                break;\n              }\n\n              res.status(404).end();\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return methodHandler(req);\n\n            case 9:\n              result = _context.sent;\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.next = 14;\n              return handler(req);\n\n            case 14:\n              result = _context.sent;\n\n            case 15:\n              _context.next = 25;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!process.env.NEXT_PUBLIC_SENTRY_DSN) {\n                _context.next = 23;\n                break;\n              }\n\n              Sentry.captureException(_context.t0, {\n                contexts: {\n                  headers: req.headers\n                }\n              });\n              _context.next = 23;\n              return Sentry.flush(2000);\n\n            case 23:\n              console.log(_context.t0);\n              return _context.abrupt(\"return\", res.status(500).end());\n\n            case 25:\n              if (result.headers) {\n                for (_i = 0, _Object$keys = Object.keys(result.headers); _i < _Object$keys.length; _i++) {\n                  header = _Object$keys[_i];\n                  res.setHeader(header, result.headers[header]);\n                }\n              }\n\n              if (result.status !== 200) console.log(result.result);\n\n              if (!(typeof result.result !== 'object')) {\n                _context.next = 29;\n                break;\n              }\n\n              return _context.abrupt(\"return\", res.status(result.status).send(result.result));\n\n            case 29:\n              return _context.abrupt(\"return\", res.status(result.status).json(result.result));\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 17]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var multiRouteHandler = function multiRouteHandler(query, handlers) {\n  return APIHandler( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req) {\n      var route;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              route = typeof req.query[query] === 'string' ? req.query[query] : req.query[query][0];\n              return _context2.abrupt(\"return\", handlers[route](req));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexport function callApi(_x4, _x5, _x6) {\n  return _callApi.apply(this, arguments);\n}\n\nfunction _callApi() {\n  _callApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(endpoint, msg, method) {\n    var _result$headers$get;\n\n    var result;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetch(endpoint, {\n              method: method ? method : msg ? \"POST\" : \"GET\",\n              headers: {\n                'Content-type': typeof msg === 'object' ? 'application/json' : 'text/html'\n              },\n              body: typeof msg === 'string' ? msg : JSON.stringify(msg)\n            });\n\n          case 2:\n            result = _context5.sent;\n            _context5.t0 = result.status;\n\n            if (!((_result$headers$get = result.headers.get('Content-type')) !== null && _result$headers$get !== void 0 && _result$headers$get.includes('application/json'))) {\n              _context5.next = 10;\n              break;\n            }\n\n            _context5.next = 7;\n            return result.json();\n\n          case 7:\n            _context5.t1 = _context5.sent;\n            _context5.next = 13;\n            break;\n\n          case 10:\n            _context5.next = 12;\n            return result.text();\n\n          case 12:\n            _context5.t1 = _context5.sent;\n\n          case 13:\n            _context5.t2 = _context5.t1;\n            return _context5.abrupt(\"return\", {\n              status: _context5.t0,\n              result: _context5.t2\n            });\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _callApi.apply(this, arguments);\n}\n\nexport function useApi(deps, successCallback) {\n  var _useState = useState('normal'),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    return setState('normal');\n  }, deps);\n\n  var call = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path, msg, method) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setState('loading');\n              _context3.next = 3;\n              return callApi(path, msg, method);\n\n            case 3:\n              res = _context3.sent;\n\n              if (!(res.status === 200)) {\n                _context3.next = 11;\n                break;\n              }\n\n              if (!successCallback) {\n                _context3.next = 8;\n                break;\n              }\n\n              _context3.next = 8;\n              return successCallback(res.result);\n\n            case 8:\n              setState('success');\n              _context3.next = 12;\n              break;\n\n            case 11:\n              setState('error');\n\n            case 12:\n              return _context3.abrupt(\"return\", res);\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function call(_x7, _x8, _x9) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return [state, call, setState];\n}\nexport function useApiData(path, initialData) {\n  return useSWR(path ? path : null, /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return callApi(path);\n\n            case 2:\n              res = _context4.sent;\n\n              if (!(res.status = 200)) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", res.result);\n\n            case 5:\n              return _context4.abrupt(\"return\", res);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x10) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), {\n    initialData: initialData\n  });\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/src/apiHelpers.ts"],"names":["Sentry","useState","useEffect","useSWR","APIHandler","handler","process","env","NEXT_PUBLIC_SENTRY_DSN","init","dsn","req","res","method","methodHandler","status","end","result","captureException","contexts","headers","flush","console","log","Object","keys","header","setHeader","send","json","multiRouteHandler","query","handlers","route","callApi","endpoint","msg","fetch","body","JSON","stringify","get","includes","text","useApi","deps","successCallback","state","setState","call","path","useApiData","initialData"],"mappings":";;AACA,OAAO,KAAKA,MAAZ,MAAwB,cAAxB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAoBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAA8F;AACtH,MAAIC,OAAO,CAACC,GAAR,CAAYC,sBAAhB,EAAwC;AACtCR,IAAAA,MAAM,CAACS,IAAP,CAAY;AAAEC,MAAAA,GAAG,EAAEJ,OAAO,CAACC,GAAR,CAAYC;AAAnB,KAAZ;AACD;;AACD;AAAA,wEAAO,iBAAOG,GAAP,EAA2BC,GAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAGA,OAAOP,OAAP,KAAmB,QAHnB;AAAA;AAAA;AAAA;;AAIGQ,cAAAA,MAJH,GAIYF,GAAG,CAACE,MAJhB;AAKGC,cAAAA,aALH,GAKmBT,OAAO,CAACQ,MAAD,CAL1B;;AAAA,kBAMGC,aANH;AAAA;AAAA;AAAA;;AAOCF,cAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AAPD;;AAAA;AAAA;AAAA,qBAUcF,aAAa,CAACH,GAAD,CAV3B;;AAAA;AAUDM,cAAAA,MAVC;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAacZ,OAAO,CAACM,GAAD,CAbrB;;AAAA;AAaDM,cAAAA,MAbC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,mBAiBCX,OAAO,CAACC,GAAR,CAAYC,sBAjBb;AAAA;AAAA;AAAA;;AAkBDR,cAAAA,MAAM,CAACkB,gBAAP,cAA2B;AAACC,gBAAAA,QAAQ,EAAE;AAACC,kBAAAA,OAAO,EAAET,GAAG,CAACS;AAAd;AAAX,eAA3B;AAlBC;AAAA,qBAmBKpB,MAAM,CAACqB,KAAP,CAAa,IAAb,CAnBL;;AAAA;AAqBHC,cAAAA,OAAO,CAACC,GAAR;AArBG,+CAsBIX,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAtBJ;;AAAA;AAyBL,kBAAGC,MAAM,CAACG,OAAV,EAAmB;AACjB,4CAAkBI,MAAM,CAACC,IAAP,CAAYR,MAAM,CAACG,OAAnB,CAAlB,kCAA+C;AAAvCM,kBAAAA,MAAuC;AAC7Cd,kBAAAA,GAAG,CAACe,SAAJ,CAAcD,MAAd,EAAsBT,MAAM,CAACG,OAAP,CAAeM,MAAf,CAAtB;AACD;AACF;;AACD,kBAAGT,MAAM,CAACF,MAAP,KAAgB,GAAnB,EAAwBO,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACA,MAAnB;;AA9BnB,oBA+BF,OAAOA,MAAM,CAACA,MAAd,KAAyB,QA/BvB;AAAA;AAAA;AAAA;;AAAA,+CA+BwCL,GAAG,CAACG,MAAJ,CAAWE,MAAM,CAACF,MAAlB,EAA0Ba,IAA1B,CAA+BX,MAAM,CAACA,MAAtC,CA/BxC;;AAAA;AAAA,+CAgCEL,GAAG,CAACG,MAAJ,CAAWE,MAAM,CAACF,MAAlB,EAA0Bc,IAA1B,CAA+BZ,MAAM,CAACA,MAAtC,CAhCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkCD,CAtCM;AAwCP,OAAO,IAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAeC,QAAf,EAAoD;AACnF,SAAO5B,UAAU;AAAA,yEAAC,kBAAOO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZsB,cAAAA,KADY,GACH,OAAOtB,GAAG,CAACoB,KAAJ,CAAUA,KAAV,CAAP,KAA4B,QAA7B,GACGpB,GAAG,CAACoB,KAAJ,CAAUA,KAAV,CADH,GAEGpB,GAAG,CAACoB,KAAJ,CAAUA,KAAV,EAAiB,CAAjB,CAHC;AAAA,gDAITC,QAAQ,CAACC,KAAD,CAAR,CAAgBtB,GAAhB,CAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MAAjB;AAMD,CAPM;AASP,gBAAsBuB,OAAtB;AAAA;AAAA;;;sEAAO,kBAA+FC,QAA/F,EAAgHC,GAAhH,EAA2HvB,MAA3H;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgBwB,KAAK,CAACF,QAAD,EAAW;AACjCtB,cAAAA,MAAM,EAAEA,MAAM,GAAGA,MAAH,GAAYuB,GAAG,GAAG,MAAH,GAAY,KADR;AAEjChB,cAAAA,OAAO,EAAE;AACP,gCAAiB,OAAOgB,GAAP,KAAe,QAAhB,GAA4B,kBAA5B,GAAiD;AAD1D,eAFwB;AAKjCE,cAAAA,IAAI,EAAG,OAAOF,GAAP,KAAe,QAAhB,GAA4BA,GAA5B,GAAkCG,IAAI,CAACC,SAAL,CAAeJ,GAAf;AALP,aAAX,CADrB;;AAAA;AACCnB,YAAAA,MADD;AAAA,2BAUOA,MAAM,CAACF,MAVd;;AAAA,yCAWOE,MAAM,CAACG,OAAP,CAAeqB,GAAf,CAAmB,cAAnB,CAXP,gDAWO,oBAAoCC,QAApC,CAA6C,kBAA7C,CAXP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYSzB,MAAM,CAACY,IAAP,EAZT;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAaSZ,MAAM,CAAC0B,IAAP,EAbT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUD5B,cAAAA,MAVC;AAWDE,cAAAA,MAXC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBP,OAAO,SAAS2B,MAAT,CAAuFC,IAAvF,EAAoGC,eAApG,EAA0K;AAAA,kBACvJ7C,QAAQ,CAAS,QAAT,CAD+I;AAAA,MAC1K8C,KAD0K;AAAA,MACnKC,QADmK;;AAE/K9C,EAAAA,SAAS,CAAC;AAAA,WAAK8C,QAAQ,CAAC,QAAD,CAAb;AAAA,GAAD,EAA0BH,IAA1B,CAAT;;AACA,MAAII,IAAI;AAAA,yEAAE,kBAAOC,IAAP,EAAqBd,GAArB,EAAgCvB,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACRmC,cAAAA,QAAQ,CAAC,SAAD,CAAR;AADQ;AAAA,qBAEQd,OAAO,CAASgB,IAAT,EAAed,GAAf,EAAoBvB,MAApB,CAFf;;AAAA;AAEJD,cAAAA,GAFI;;AAAA,oBAGLA,GAAG,CAACG,MAAJ,KAAe,GAHV;AAAA;AAAA;AAAA;;AAAA,mBAIH+B,eAJG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIoBA,eAAe,CAAClC,GAAG,CAACK,MAAL,CAJnC;;AAAA;AAKN+B,cAAAA,QAAQ,CAAC,SAAD,CAAR;AALM;AAAA;;AAAA;AAOHA,cAAAA,QAAQ,CAAC,OAAD,CAAR;;AAPG;AAAA,gDAQDpC,GARC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA,oBAAJqC,IAAI;AAAA;AAAA;AAAA,KAAR;;AAUA,SAAO,CAACF,KAAD,EAAQE,IAAR,EAAcD,QAAd,CAAP;AACD;AAED,OAAO,SAASG,UAAT,CAAuDD,IAAvD,EAAsEE,WAAtE,EAAsF;AAC3F,SAAOjD,MAAM,CAAwB+C,IAAI,GAAGA,IAAH,GAAU,IAAtC;AAAA,yEAA4C,kBAAOA,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACvChB,OAAO,CAAUgB,IAAV,CADgC;;AAAA;AACnDtC,cAAAA,GADmD;;AAAA,oBAEpDA,GAAG,CAACG,MAAJ,GAAa,GAFuC;AAAA;AAAA;AAAA;;AAAA,gDAE3BH,GAAG,CAACK,MAFuB;;AAAA;AAAA,gDAGhDL,GAHgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA5C;;AAAA;AAAA;AAAA;AAAA,OAIV;AAACwC,IAAAA,WAAW,EAAXA;AAAD,GAJU,CAAb;AAKD","sourcesContent":["import { NextApiRequest, NextApiResponse} from 'next'\nimport * as Sentry from '@sentry/node'\nimport { useState, useEffect} from 'react'\nimport useSWR from 'swr'\n\nexport type ResultType<T extends (...args:any)=> any> = PromiseReturn<ReturnType<T>>\nexport type Request = NextApiRequest\nexport type Success<T extends Result> = Extract<T, {status: 200}>['result']\nexport type Errors<T extends Result> = Exclude<T, {status: 200}>\n\ntype Handler = (req:Request) => Promise<Result>\ntype PromiseReturn<T> = T extends PromiseLike<infer U> ? U : T\n\ntype Result = {\n  status: number,\n  result: string | object | null | boolean\n  headers?: {\n    [key: string]: string | number | string[]\n  }\n}\n\ntype Methods = \"POST\" | \"GET\" | \"PUT\" | \"DELETE\"\n\nexport const APIHandler = (handler: Handler | Partial<{POST: Handler, GET: Handler, PUT: Handler, DELETE: Handler}>) => {\n  if (process.env.NEXT_PUBLIC_SENTRY_DSN) {\n    Sentry.init({ dsn: process.env.NEXT_PUBLIC_SENTRY_DSN});\n  }\n  return async (req:NextApiRequest, res: NextApiResponse) => {\n    let result\n    try {\n      if(typeof handler === 'object') {\n        let method = req.method as Methods\n        let methodHandler = handler[method]\n        if(!methodHandler) {\n          res.status(404).end()\n          return\n        }\n        result = await methodHandler(req)\n      }\n      else {\n        result = await handler(req)\n      }\n    }\n    catch(e) {\n      if (process.env.NEXT_PUBLIC_SENTRY_DSN) {\n        Sentry.captureException(e, {contexts: {headers: req.headers}})\n        await Sentry.flush(2000)\n      }\n      console.log(e)\n      return res.status(500).end()\n    }\n\n    if(result.headers) {\n      for(let header of Object.keys(result.headers)) {\n        res.setHeader(header, result.headers[header])\n      }\n    }\n    if(result.status!==200) console.log(result.result)\n    if(typeof result.result !== 'object') return res.status(result.status).send(result.result)\n    return res.status(result.status).json(result.result)\n  }\n}\n\nexport const multiRouteHandler = (query:string, handlers:{[key:string]: Handler}) => {\n  return APIHandler(async (req) => {\n    let route = (typeof req.query[query] === 'string')\n                 ? req.query[query] as string\n                 : req.query[query][0]\n    return handlers[route](req)\n  })\n}\n\nexport async function callApi<Msg extends object | string | null, R extends Omit<Result, 'headers'>> (endpoint:string, msg?: Msg, method?: Methods){\n    let result = await fetch(endpoint, {\n      method: method ? method : msg ? \"POST\" : \"GET\",\n      headers: {\n        'Content-type': (typeof msg === 'object') ? 'application/json' : 'text/html'\n      },\n      body: (typeof msg === 'string') ? msg : JSON.stringify(msg)\n    })\n\n    return {\n      status: result.status,\n      result: result.headers.get('Content-type')?.includes('application/json')\n        ? await result.json()\n        : await result.text()\n    } as R\n}\n\nexport type Status = 'normal' | 'error' | 'loading' | 'success'\nexport function useApi<Msg extends object | string | null, R extends Omit<Result, 'headers'>>(deps: any[], successCallback?: (result: Extract<R, {status:200}>['result'])=> any) {\n  let [state, setState] = useState<Status>('normal')\n  useEffect(()=> setState('normal'), deps)\n  let call= async (path: string, msg?: Msg, method?: Methods) => {\n    setState('loading')\n    let res = await callApi<Msg, R>(path, msg, method)\n    if(res.status === 200) {\n      if(successCallback) await successCallback(res.result)\n      setState('success')\n    }\n    else setState('error')\n    return res\n  }\n  return [state, call, setState] as const\n}\n\nexport function useApiData<R extends Omit<Result, 'headers'>>(path?: string, initialData?:R) {\n  return useSWR<Success<R>, Errors<R>>(path ? path : null, async (path)=>{\n    let res = await callApi<null, R>(path)\n    if(res.status = 200) return res.result\n    return res\n  }, {initialData})\n}\n"]},"metadata":{},"sourceType":"module"}