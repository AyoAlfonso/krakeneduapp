{"ast":null,"code":"import Stripe from 'stripe';\nimport { APIHandler } from 'src/apiHelpers';\nimport { getToken } from 'src/token';\nimport prisma from \"lib/prisma\";\nconst stripe = new Stripe(process.env.STRIPE_SECRET || '', {\n  apiVersion: '2020-08-27'\n});\n\nasync function GETConnectStripe(req) {\n  var _user_data$stripe_con;\n\n  let user = getToken(req);\n  let country = req.query.country;\n  if (!user) return {\n    status: 400,\n    result: \"ERROR: no user logged in\"\n  };\n  let user_data = await prisma.people.findUnique({\n    where: {\n      id: user.id\n    },\n    select: {\n      course_maintainers: true,\n      stripe_connected_accounts: true\n    }\n  });\n  if (!user_data) return {\n    status: 400,\n    result: \"ERROR: no user logged in\"\n  };\n  if (user_data.course_maintainers.length === 0) return {\n    status: 401,\n    result: \"ERROR: user is not a maintainer\"\n  };\n  let id;\n\n  if (!user_data.stripe_connected_accounts) {\n    let account = await stripe.accounts.create({\n      type: 'express',\n      country,\n      capabilities: {\n        transfers: {\n          requested: true\n        }\n      },\n      tos_acceptance: country === 'US' ? undefined : {\n        service_agreement: \"recipient\"\n      },\n      metadata: {\n        user: user.id\n      }\n    });\n    await prisma.stripe_connected_accounts.create({\n      data: {\n        people: {\n          connect: {\n            id: user.id\n          }\n        },\n        stripe_account: account.id,\n        country\n      }\n    });\n    id = account.id;\n  } else {\n    id = user_data.stripe_connected_accounts.stripe_account;\n  }\n\n  let link = await stripe.accountLinks.create({\n    account: id,\n    type: (_user_data$stripe_con = user_data.stripe_connected_accounts) !== null && _user_data$stripe_con !== void 0 && _user_data$stripe_con.payouts_enabled ? \"account_update\" : \"account_onboarding\",\n    return_url: \"https://app.krakenedu.com/dashboard?tab=Profile#connect-stripe\",\n    refresh_url: \"https://app.krakenedu.com/dashboard?tab=Profile#connect-stripe\"\n  });\n  return {\n    status: 200,\n    result: {\n      url: link.url\n    }\n  };\n}\n\nexport default APIHandler(GETConnectStripe);","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/user/connectStripe.ts"],"names":["Stripe","APIHandler","getToken","prisma","stripe","process","env","STRIPE_SECRET","apiVersion","GETConnectStripe","req","user","country","query","status","result","user_data","people","findUnique","where","id","select","course_maintainers","stripe_connected_accounts","length","account","accounts","create","type","capabilities","transfers","requested","tos_acceptance","undefined","service_agreement","metadata","data","connect","stripe_account","link","accountLinks","payouts_enabled","return_url","refresh_url","url"],"mappings":"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","sourcesContent":["import Stripe from 'stripe'\nimport {APIHandler, ResultType, Request} from 'src/apiHelpers'\nimport { getToken } from 'src/token'\n\nimport prisma from \"lib/prisma\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET || '', {apiVersion:'2020-08-27'});\n\nexport type GETConnectStripeResult = ResultType<typeof GETConnectStripe>\nasync function GETConnectStripe(req:Request){\n  let user = getToken(req)\n  let country = req.query.country as string\n  if(!user) return {status:400, result: \"ERROR: no user logged in\"} as const\n  let user_data = await prisma.people.findUnique({where:{id:user.id}, select:{\n    course_maintainers:true,\n    stripe_connected_accounts: true\n  }})\n  if(!user_data)return {status:400, result: \"ERROR: no user logged in\"} as const\n  if(user_data.course_maintainers.length === 0) return {status:401, result: \"ERROR: user is not a maintainer\"} as const\n\n  let id: string\n  if(!user_data.stripe_connected_accounts) {\n    let account = await stripe.accounts.create({\n      type: 'express',\n      country,\n      capabilities:{\n        transfers:{\n          requested: true\n        }\n      },\n      tos_acceptance: country === 'US' ? undefined : {\n        service_agreement: \"recipient\"\n      },\n      metadata:{\n        user: user.id\n      }\n    })\n    await prisma.stripe_connected_accounts.create({data:{\n      people:{connect:{id: user.id}},\n      stripe_account: account.id,\n      country\n    }})\n    id = account.id\n  }\n  else {\n    id = user_data.stripe_connected_accounts.stripe_account\n  }\n\n  let link = await stripe.accountLinks.create({\n    account: id,\n    type: user_data.stripe_connected_accounts?.payouts_enabled\n      ? \"account_update\"\n      : \"account_onboarding\",\n    return_url:\n      \"https://app.krakenedu.com/dashboard?tab=Profile#connect-stripe\",\n    refresh_url:\n      \"https://app.krakenedu.com/dashboard?tab=Profile#connect-stripe\",\n  });\n  return {status: 200, result: {url: link.url}} as const\n\n}\n\nexport default APIHandler(GETConnectStripe)\n"]},"metadata":{},"sourceType":"module"}