{"ast":null,"code":"import bcrypt from \"bcryptjs\";\nimport prisma from \"lib/prisma\";\nlet username = process.env.POSTMARK_WEBHOOK_USERNAME;\nlet password = process.env.POSTMARK_WEBHOOK_PASSWORD;\nif (!password || !username) throw new Error(\"no username or password in env \");\nexport default (async (req, res) => {\n  let BasicAuth = req.headers.authorization;\n\n  if (!BasicAuth || !BasicAuth.startsWith(\"Basic \")) {\n    return res.status(400).end();\n  }\n\n  if (!password || !username) return res.status(500).end();\n  let authorization = Buffer.from(BasicAuth.substring(6), \"base64\").toString(\"utf-8\").split(\":\");\n\n  if (authorization[0] !== username || !(await bcrypt.compare(authorization[1], password))) {\n    return res.status(400).end();\n  }\n\n  let data = req.body;\n  if (data.metadata.type !== \"course-watching-notification\") return res.status(200).end();\n  let course = parseInt(data.Metadata.course);\n  await prisma.watching_courses.delete({\n    where: {\n      email_course: {\n        email: data.Recipient,\n        course\n      }\n    }\n  });\n  return res.status(200).end();\n});","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/postmark_unsubscribe_webhook.ts"],"names":["bcrypt","prisma","username","process","env","POSTMARK_WEBHOOK_USERNAME","password","POSTMARK_WEBHOOK_PASSWORD","Error","req","res","BasicAuth","headers","authorization","startsWith","status","end","Buffer","from","substring","toString","split","compare","data","body","metadata","type","course","parseInt","Metadata","watching_courses","delete","where","email_course","email","Recipient"],"mappings":"AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,yBAA3B;AACA,IAAIC,QAAQ,GAAGH,OAAO,CAACC,GAAR,CAAYG,yBAA3B;AAEA,IAAI,CAACD,QAAD,IAAa,CAACJ,QAAlB,EAA4B,MAAM,IAAIM,KAAJ,CAAU,iCAAV,CAAN;AAE5B,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAIC,SAAS,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA5B;;AACA,MAAI,CAACF,SAAD,IAAc,CAACA,SAAS,CAACG,UAAV,CAAqB,QAArB,CAAnB,EAAmD;AACjD,WAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AACD,MAAI,CAACV,QAAD,IAAa,CAACJ,QAAlB,EAA4B,OAAOQ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AAE5B,MAAIH,aAAa,GAAGI,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACQ,SAAV,CAAoB,CAApB,CAAZ,EAAoC,QAApC,EACjBC,QADiB,CACR,OADQ,EAEjBC,KAFiB,CAEX,GAFW,CAApB;;AAGA,MACER,aAAa,CAAC,CAAD,CAAb,KAAqBX,QAArB,IACA,EAAE,MAAMF,MAAM,CAACsB,OAAP,CAAeT,aAAa,CAAC,CAAD,CAA5B,EAAiCP,QAAjC,CAAR,CAFF,EAGE;AACA,WAAOI,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED,MAAIO,IAAI,GAAGd,GAAG,CAACe,IAAf;AACA,MAAID,IAAI,CAACE,QAAL,CAAcC,IAAd,KAAuB,8BAA3B,EACE,OAAOhB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACF,MAAIW,MAAM,GAAGC,QAAQ,CAACL,IAAI,CAACM,QAAL,CAAcF,MAAf,CAArB;AACA,QAAM1B,MAAM,CAAC6B,gBAAP,CAAwBC,MAAxB,CAA+B;AACnCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAEX,IAAI,CAACY,SADA;AAEZR,QAAAA;AAFY;AADT;AAD4B,GAA/B,CAAN;AAQA,SAAOjB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD,CA9BD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\nimport bcrypt from \"bcryptjs\";\nimport prisma from \"lib/prisma\";\n\nlet username = process.env.POSTMARK_WEBHOOK_USERNAME;\nlet password = process.env.POSTMARK_WEBHOOK_PASSWORD;\n\nif (!password || !username) throw new Error(\"no username or password in env \");\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  let BasicAuth = req.headers.authorization;\n  if (!BasicAuth || !BasicAuth.startsWith(\"Basic \")) {\n    return res.status(400).end();\n  }\n  if (!password || !username) return res.status(500).end();\n\n  let authorization = Buffer.from(BasicAuth.substring(6), \"base64\")\n    .toString(\"utf-8\")\n    .split(\":\");\n  if (\n    authorization[0] !== username ||\n    !(await bcrypt.compare(authorization[1], password))\n  ) {\n    return res.status(400).end();\n  }\n\n  let data = req.body;\n  if (data.metadata.type !== \"course-watching-notification\")\n    return res.status(200).end();\n  let course = parseInt(data.Metadata.course);\n  await prisma.watching_courses.delete({\n    where: {\n      email_course: {\n        email: data.Recipient,\n        course,\n      },\n    },\n  });\n  return res.status(200).end();\n};\n"]},"metadata":{},"sourceType":"module"}