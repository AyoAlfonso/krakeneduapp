{"ast":null,"code":"import _styled from \"@emotion/styled-base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport h from 'react-hyperscript';\nimport { Box } from 'components/Layout';\nimport Link from 'next/link';\nimport { Pill } from 'components/Pill';\nimport { cohortName, getTimeBetween } from 'src/utils';\nimport { Secondary } from 'components/Button';\nimport Text from 'components/Text';\nimport { colors } from 'components/Tokens';\nexport function EnrolledCohort(props) {\n  var _events$;\n\n  let events = props.cohort.cohort_events.filter(event => new Date() < new Date(event.events.end_date)).sort((a, b) => new Date(a.events.start_date) > new Date(b.events.start_date) ? 1 : -1);\n  let first_event = (_events$ = events[0]) === null || _events$ === void 0 ? void 0 : _events$.events;\n  return h(Box, {\n    gap: 16\n  }, [h(Box, {\n    gap: 8\n  }, [//course name\n  h(Link, {\n    href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n    as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n  }, h('a', {\n    style: {\n      textDecoration: 'none'\n    }\n  }, h('h2', props.cohort.courses.name))), //cohort number\n  h(Box, {\n    h: true,\n    gap: 16,\n    style: {\n      alignItems: 'center'\n    }\n  }, [h('h3.textSecondary', cohortName(props.cohort.name)), props.facilitating ? h(Pill, {\n    borderOnly: true\n  }, 'facilitator') : null, !props.cohort.live ? h(Pill, {\n    red: true,\n    borderOnly: true\n  }, \"draft\") : null])]), !first_event ? null : h(Container, [//course image\n  props.cohort.courses.type === 'course' ? h(Image, {\n    src: props.cohort.courses.card_image\n  }) : h(IconsImage, {}, props.cohort.courses.card_image.split(',').map(src => {\n    return h('img', {\n      src,\n      style: {\n        height: \"72px\",\n        imageRendering: 'pixelated'\n      }\n    });\n  })), //first event\n  !first_event ? null : h(FirstEvent, [//date box\n  h(Box, {\n    h: true,\n    style: {\n      gridAutoColumns: 'min-content auto'\n    }\n  }, [h('div', [h('div', {\n    style: {\n      backgroundColor: \"black\",\n      color: 'white',\n      padding: '4px 0px',\n      textAlign: 'center'\n    }\n  }, \"NEXT\"), h(DateBox, {\n    date: new Date(first_event.start_date)\n  })]), //event header\n  h(Box, {\n    gap: 4,\n    style: {\n      paddingTop: 4,\n      alignContent: \"space-between\"\n    }\n  }, [h('div', [h('b.textSecondary', new Date(first_event.start_date).toLocaleDateString([], {\n    weekday: 'long'\n  }).toUpperCase() + ` | ` + getTimeBetween(new Date(first_event.start_date), new Date(first_event.end_date)) + 'hrs'), h('h3', {\n    style: {\n      overflow: \"hidden\"\n    }\n  }, first_event.name)]), h('a', {\n    href: first_event.location\n  }, h(Secondary, \"Join Event\"))])]), //event description\n  h(Link, {\n    passHref: true,\n    href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n    as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n  }, h('a', {\n    style: {\n      color: colors.textPrimary,\n      textDecoration: 'none'\n    }\n  }, h(Box, {\n    style: {\n      overflowY: \"hidden\"\n    }\n  }, [h(Text, {\n    source: first_event.description\n  })])))]), // 2nd 3rd 4th event list\n  h(Box, [...events.slice(1, 4).map(cohort_event => {\n    let event = cohort_event.events;\n    return h(UpcomingEvent, [h(DateBox, {\n      date: new Date(event.start_date)\n    }), h(UpcomingEventContent, [h('b.textSecondary', new Date(event.start_date).toLocaleDateString([], {\n      weekday: 'long'\n    }).toUpperCase() + ` | ` + getTimeBetween(new Date(event.start_date), new Date(event.end_date)) + 'hrs'), h('h3', event.name)])]);\n  }), //show all events \n  h(Link, {\n    href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n    as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n  }, h('a', {\n    style: {\n      color: colors.textSecondary,\n      justifySelf: \"right\"\n    }\n  }, `See all events`))])])]);\n}\n\nfunction DateBox(props) {\n  return h(DateBoxContainer, [h('b', props.date.toLocaleDateString([], {\n    month: 'short'\n  }).toUpperCase()), h('h2', props.date.getDate()), h('small', props.date.toLocaleTimeString([], {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    hour12: true\n  }))]);\n}\n\nconst DateBoxContainer = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x0\"\n})(true ? {\n  name: \"1bbyucv\",\n  styles: \"h2{line-height:100%;}width:80px;display:grid;grid-gap:4px;box-sizing:border-box;padding:8px 4px;border:1px solid;text-align:center;background-color:white;height:min-content;\"\n} : {\n  name: \"1bbyucv\",\n  styles: \"h2{line-height:100%;}width:80px;display:grid;grid-gap:4px;box-sizing:border-box;padding:8px 4px;border:1px solid;text-align:center;background-color:white;height:min-content;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst Image = /*#__PURE__*/_styled('img', {\n  target: \"e3pm94x1\"\n})(true ? {\n  name: \"1wfwtzb\",\n  styles: \"border:1px solid;image-rendering:pixelated;image-rendering:crisp-edges;height:370px;width:166px;@media(max-width:1024px){display:none;}\"\n} : {\n  name: \"1wfwtzb\",\n  styles: \"border:1px solid;image-rendering:pixelated;image-rendering:crisp-edges;height:370px;width:166px;@media(max-width:1024px){display:none;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst IconsImage = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x2\"\n})(\"border:1px solid;image-rendering:pixelated;image-rendering:crisp-edges;background-color:\", colors.accentLightBlue, \";display:grid;grid-gap:16px;align-content:center;justify-items:center;grid-template-rows:repeat(3,min-content);height:370px;width:166px;@media(max-width:1024px){display:none;}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst Container = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x3\"\n})(true ? {\n  name: \"1u9d8\",\n  styles: \"height:370px;display:grid;grid-gap:16px;grid-auto-columns:max-content;grid-auto-flow:column;grid-template-columns:min-content auto 320px;@media(max-width:1024px){grid-template-columns:auto 320px;height:min-content;height:370px;}@media(max-width:768px){grid-template-columns:auto;grid-auto-rows:min-content;grid-auto-flow:row;height:auto;}\"\n} : {\n  name: \"1u9d8\",\n  styles: \"height:370px;display:grid;grid-gap:16px;grid-auto-columns:max-content;grid-auto-flow:column;grid-template-columns:min-content auto 320px;@media(max-width:1024px){grid-template-columns:auto 320px;height:min-content;height:370px;}@media(max-width:768px){grid-template-columns:auto;grid-auto-rows:min-content;grid-auto-flow:row;height:auto;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst FirstEvent = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x4\"\n})(true ? {\n  name: \"1dbyn5g\",\n  styles: \"height:370px;display:grid;grid-row-gap:16px;grid-auto-rows:min-content auto;position:relative;overflow:hidden;::after{content:'';position:absolute;height:370px;width:100%;background:linear-gradient(to bottom,rgba(253,252,250,0) 0%,rgba(253,252,250,0) 80%,rgba(253,252,250,1) 100%);pointer-events:none;}@media(max-width:768px){height:auto;::after{display:none;height:auto}}\"\n} : {\n  name: \"1dbyn5g\",\n  styles: \"height:370px;display:grid;grid-row-gap:16px;grid-auto-rows:min-content auto;position:relative;overflow:hidden;::after{content:'';position:absolute;height:370px;width:100%;background:linear-gradient(to bottom,rgba(253,252,250,0) 0%,rgba(253,252,250,0) 80%,rgba(253,252,250,1) 100%);pointer-events:none;}@media(max-width:768px){height:auto;::after{display:none;height:auto}}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst UpcomingEvent = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x5\"\n})(true ? {\n  name: \"gy2fla\",\n  styles: \"display:grid;grid-column-gap:16px;grid-template-columns:min-content auto;\"\n} : {\n  name: \"gy2fla\",\n  styles: \"display:grid;grid-column-gap:16px;grid-template-columns:min-content auto;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst UpcomingEventContent = /*#__PURE__*/_styled('div', {\n  target: \"e3pm94x6\"\n})(true ? {\n  name: \"1723f06\",\n  styles: \"display:grid;grid-row-gap:4px;grid-template-rows:min-content 3.75rem;overflow:hidden;height:min-content;padding-top:8px\"\n} : {\n  name: \"1723f06\",\n  styles: \"display:grid;grid-row-gap:4px;grid-template-rows:min-content 3.75rem;overflow:hidden;height:min-content;padding-top:8px\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/components/pages/dashboard/EnrolledCohort.ts"],"names":["h","Box","Link","Pill","cohortName","getTimeBetween","Secondary","Text","colors","EnrolledCohort","props","events","cohort","cohort_events","filter","event","Date","end_date","sort","a","b","start_date","first_event","gap","href","as","courses","slug","id","style","textDecoration","name","alignItems","facilitating","borderOnly","live","red","Container","type","Image","src","card_image","IconsImage","split","map","height","imageRendering","FirstEvent","gridAutoColumns","backgroundColor","color","padding","textAlign","DateBox","date","paddingTop","alignContent","toLocaleDateString","weekday","toUpperCase","overflow","location","passHref","textPrimary","overflowY","source","description","slice","cohort_event","UpcomingEvent","UpcomingEventContent","textSecondary","justifySelf","DateBoxContainer","month","getDate","toLocaleTimeString","hour","minute","hour12","accentLightBlue"],"mappings":"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","sourcesContent":["import h from 'react-hyperscript'\nimport { Box } from 'components/Layout'\nimport Link from 'next/link'\nimport { Pill } from 'components/Pill'\nimport { cohortName, getTimeBetween } from 'src/utils'\nimport styled from '@emotion/styled'\nimport { Secondary } from 'components/Button'\nimport Text from 'components/Text'\nimport { colors } from 'components/Tokens'\n\ntype Props = {\n  cohort: {\n    live: boolean,\n    courses:{\n      name: string,\n      type: string,\n      slug: string,\n      id: number\n      card_image: string,\n    },\n    id: number\n    name: string\n    cohort_events: {events: {\n      start_date: string,\n      end_date: string,\n      location: string,\n      name: string,\n      description: string\n    }}[]\n  },\n  facilitating: boolean,\n}\n\nexport function EnrolledCohort(props: Props) {\n  let events = props.cohort.cohort_events\n    .filter((event)=> new Date() < new Date(event.events.end_date))\n    .sort((a, b) => new Date(a.events.start_date) > new Date(b.events.start_date) ? 1 : -1)\n  let first_event = events[0]?.events\n  return h(Box, {gap:16}, [\n    h(Box, {gap: 8}, [\n      //course name\n      h(Link, {\n        href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n        as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n      }, h('a', {style:{textDecoration: 'none'}}, h('h2', props.cohort.courses.name))),\n      //cohort number\n      h(Box, {h: true, gap:16, style:{alignItems: 'center'}}, [\n        h('h3.textSecondary', cohortName(props.cohort.name)),\n        props.facilitating ? h(Pill, {borderOnly: true}, 'facilitator') : null,\n        !props.cohort.live ? h(Pill, {red: true, borderOnly: true}, \"draft\") : null\n      ])\n    ]),\n    !first_event ? null :  h(Container, [\n      //course image\n      props.cohort.courses.type === 'course'\n        ? h(Image, {src: props.cohort.courses.card_image})\n        : h(IconsImage, {}, props.cohort.courses.card_image.split(',').map(src => {\n          return h('img', {src, style: {height: \"72px\", imageRendering: 'pixelated'}})\n        })),\n\n      //first event\n      !first_event ? null : h(FirstEvent, [\n        //date box\n        h(Box, {h: true, style:{gridAutoColumns: 'min-content auto'}}, [\n          h('div', [\n            h('div', {style: {backgroundColor: \"black\", color: 'white', padding: '4px 0px', textAlign: 'center'}}, \"NEXT\"),\n            h(DateBox, {date: new Date(first_event.start_date)}),\n          ]),\n          //event header\n          h(Box, {gap: 4, style: {paddingTop:4, alignContent: \"space-between\"}}, [\n            h('div', [\n              h('b.textSecondary',\n                (new Date(first_event.start_date)).toLocaleDateString([], {weekday: 'long'}).toUpperCase() +\n                ` | ` + getTimeBetween(new Date(first_event.start_date), new Date(first_event.end_date)) + 'hrs'),\n              h('h3', {style: {overflow:\"hidden\"}}, first_event.name)\n            ]),\n            h('a', {href: first_event.location}, h(Secondary, \"Join Event\"))\n          ])\n        ]),\n        //event description\n        h(Link, {\n          passHref: true,\n        href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n        as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n        },  h('a',  {\n          style: {color: colors.textPrimary, textDecoration: 'none'}\n        }, h(Box, {style: {overflowY: \"hidden\"}}, [\n                h(Text, {source: first_event.description})\n              ])\n             ))\n    ]),\n\n      // 2nd 3rd 4th event list\n      h(Box, [\n        ...events.slice(1, 4).map(cohort_event=> {\n        let event = cohort_event.events\n        return h(UpcomingEvent, [\n          h(DateBox, {date: new Date(event.start_date)}),\n          h(UpcomingEventContent, [\n            h('b.textSecondary',\n              (new Date(event.start_date)).toLocaleDateString([], {weekday: 'long'}).toUpperCase() +\n              ` | ` + getTimeBetween(new Date(event.start_date), new Date(event.end_date)) + 'hrs'),\n            h('h3', event.name),\n          ])\n        ])\n      }),\n        //show all events \n        h(Link, {\n          href: `/courses/[slug]/[id]/cohorts/[cohortId]`,\n          as: `/courses/${props.cohort.courses.slug}/${props.cohort.courses.id}/cohorts/${props.cohort.id}`\n        }, h('a', {style: {color: colors.textSecondary, justifySelf:\"right\"}}, `See all events`)),\n      ])\n    ])\n  ])\n}\n\nfunction DateBox(props:{date: Date}) {\n  return h(DateBoxContainer, [\n    h('b', props.date.toLocaleDateString([], {month: 'short'}).toUpperCase()),\n    h('h2', props.date.getDate()),\n    h('small', props.date.toLocaleTimeString([], {hour: \"numeric\", minute: \"2-digit\", hour12: true}))\n  ])\n}\n\nconst DateBoxContainer = styled('div')`\nh2 {\n    line-height: 100%;\n}\nwidth: 80px;\ndisplay: grid;\ngrid-gap: 4px;\nbox-sizing: border-box;\npadding: 8px 4px;\nborder: 1px solid;\ntext-align: center;\nbackground-color: white;\nheight: min-content;\n`\n\nconst Image = styled('img')`\nborder: 1px solid;\nimage-rendering: pixelated;\nimage-rendering: crisp-edges;\nheight: 370px;\nwidth: 166px;\n\n@media(max-width: 1024px) {\ndisplay: none;\n}\n`\n\nconst IconsImage = styled('div')`\nborder: 1px solid;\nimage-rendering: pixelated;\nimage-rendering: crisp-edges;\nbackground-color: ${colors.accentLightBlue};\ndisplay: grid;\ngrid-gap: 16px;\nalign-content: center;\njustify-items: center;\ngrid-template-rows: repeat(3, min-content);\nheight: 370px;\nwidth: 166px;\n\n@media(max-width: 1024px) {\ndisplay: none;\n}\n`\n\nconst Container = styled('div')`\nheight: 370px;\ndisplay: grid;\ngrid-gap: 16px;\n\ngrid-auto-columns: max-content;\ngrid-auto-flow: column;\n\ngrid-template-columns: min-content auto 320px;\n\n@media(max-width: 1024px) {\ngrid-template-columns: auto 320px;\nheight: min-content;\nheight: 370px;\n}\n\n@media(max-width:768px) {\ngrid-template-columns: auto;\ngrid-auto-rows: min-content;\ngrid-auto-flow: row;\nheight: auto;\n}\n`\n\nconst FirstEvent = styled('div')`\nheight: 370px; \ndisplay: grid;\ngrid-row-gap: 16px;\ngrid-auto-rows: min-content auto;\nposition: relative;\noverflow: hidden;\n\n::after {\n  content: '';\n  position: absolute;\n  height: 370px;\n  width: 100%;\n  /* background:linear-gradient(transparent 320px, ${colors.appBackground}); */\n  background: linear-gradient(to bottom, rgba(253,252,250,0) 0%,rgba(253,252,250,0) 80%, rgba(253,252,250,1) 100%);\n  pointer-events: none;\n }\n\n@media(max-width: 768px) {\n  height: auto;\n\n  ::after{\n    display:none;\n    height: auto\n  }\n}\n`\n\nconst UpcomingEvent = styled('div')`\ndisplay: grid;\ngrid-column-gap: 16px;\ngrid-template-columns: min-content auto;\n`\n\nconst UpcomingEventContent = styled('div')`\ndisplay: grid;\ngrid-row-gap: 4px;\ngrid-template-rows: min-content 3.75rem;\noverflow: hidden;\nheight: min-content;\npadding-top: 8px\n`\n"]},"metadata":{},"sourceType":"module"}