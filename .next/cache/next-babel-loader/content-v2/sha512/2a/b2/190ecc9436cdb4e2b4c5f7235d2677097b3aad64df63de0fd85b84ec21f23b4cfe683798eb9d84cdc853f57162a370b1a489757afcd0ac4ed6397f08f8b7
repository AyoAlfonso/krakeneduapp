{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport crypto from 'crypto';\nimport querystring from 'querystring';\nimport { DISCOURSE_URL } from 'src/constants';\nimport prisma from \"lib/prisma\";\nlet headers = {\n  \"Api-Key\": process.env.DISCOURSE_API_KEY || '',\n  \"Api-Username\": process.env.DISCOURSE_API_USERNAME || ''\n};\n\nlet fetchWithBackoff = async (url, options, exponent = 1) => {\n  let result = await fetch(url, options);\n\n  if (result.status === 429) {\n    let value = 1000 * 2 ** exponent;\n    await new Promise(resolve => {\n      let backoff = Math.min(value + Math.floor(Math.random() * value), 64000);\n      setTimeout(() => resolve(), backoff);\n    });\n    return fetchWithBackoff(url, options, exponent + 1);\n  }\n\n  return result;\n};\n\nexport async function createGroup(group) {\n  console.log(group, \"grouphere\");\n  if (typeof group.owner_usernames !== 'string') group.owner_usernames = group.owner_usernames.join(',');\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/admin/groups`, {\n    method: 'POST',\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }),\n    body: JSON.stringify({\n      group\n    })\n  });\n  console.log(result, \"grouphereafter\");\n\n  if (result.status !== 200) {\n    console.log(await result.text());\n    return false;\n  }\n\n  return await result.json();\n}\nexport async function updateTopic(topic, input, username) {\n  await fetch(`${DISCOURSE_URL}${topic}`, {\n    method: \"PUT\",\n    headers: _objectSpread({\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }, headers),\n    body: JSON.stringify({\n      tags: input.tags,\n      title: input.title\n    })\n  }); // Update the content\n\n  let topicData = await (await fetchWithBackoff(`${DISCOURSE_URL}${topic}.json`, {\n    headers\n  })).json();\n  let postID = topicData.post_stream.posts[0].id;\n  await fetch(`${DISCOURSE_URL}/posts/${postID}`, {\n    method: \"PUT\",\n    headers: _objectSpread({\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }, headers),\n    body: JSON.stringify({\n      post: {\n        raw: input.raw\n      }\n    })\n  }); // Update the owner\n\n  if (username) await fetchWithBackoff(`${DISCOURSE_URL}/t/${topicData.id}/change-owner`, {\n    method: \"POST\",\n    headers: _objectSpread({\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }, headers),\n    body: JSON.stringify({\n      post_ids: [postID],\n      username\n    })\n  });\n}\nexport async function createTopic(input, asUser) {\n  console.log(asUser, \"asUser\");\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/posts.json`, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }, headers), {}, {\n      \"Api-Username\": headers[\"Api-Username\"]\n    }),\n    body: JSON.stringify(input)\n  });\n\n  if (result.status !== 200) {\n    console.log(await result.text());\n  }\n\n  if (result.status === 200) return await result.json();\n}\nexport const createCategory = async (name, options) => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/categories.json`, {\n    method: 'POST',\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }),\n    body: JSON.stringify(_objectSpread({\n      name,\n      color: '0088CC',\n      text_color: 'FFFFFF'\n    }, options))\n  });\n  if (result.status === 200) return (await result.json()).category;\n  console.log(await result.text());\n  return false;\n};\nexport async function updateGroup(id, name) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/g/${id}.json`, {\n    method: \"PUT\",\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }),\n    body: JSON.stringify({\n      name\n    })\n  });\n  if (result.status !== 200) console.log(await result.text());else {\n    await prisma.discourse_groups.update({\n      where: {\n        id\n      },\n      data: {\n        name\n      }\n    });\n    return true;\n  }\n}\nexport async function updateCategory(id, options) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/categories/${id}`, {\n    method: \"PUT\",\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }),\n    body: JSON.stringify(_objectSpread(_objectSpread({}, options), {}, {\n      color: '0088CC',\n      text_color: 'FFFFFF'\n    }))\n  });\n  if (result.status !== 200) console.log(await result.text());else return true;\n}\nexport async function getCategory(path) {\n  let res = await fetchWithBackoff(`${DISCOURSE_URL}/c/${path}.json`, {\n    method: 'GET',\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    })\n  });\n\n  if (res.status === 200) {\n    let category = await res.json();\n    return category;\n  } else console.log(await res.text());\n}\nexport const getUsername = async userId => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/u/by-external/${userId}.json`, {\n    method: \"GET\",\n    headers\n  });\n\n  if (result.status === 200) {\n    return (await result.json()).user.username;\n  } else return;\n};\nexport const getGroupId = async groupName => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/groups/${groupName}.json`, {\n    method: \"GET\",\n    headers\n  });\n  if (result.status === 200) return (await result.json()).group.id;\n  return undefined;\n};\nexport const addMember = async (groupId, username) => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/groups/${groupId}/members.json`, {\n    method: \"PUT\",\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }),\n    body: JSON.stringify({\n      usernames: username\n    })\n  });\n  return result.status === 200;\n};\nexport const getTaggedPost = async (c, tag) => {\n  var _category$topic_list$;\n\n  let res = await fetchWithBackoff(`${DISCOURSE_URL}/c/${c}.json`, {\n    method: 'GET',\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      \"Content-Type\": 'application/json; charset=utf-8'\n    })\n  });\n  if (res.status !== 200) console.log(await res.text());\n  let category = await res.json();\n  console.log(category.topic_list.topics, tag, \"category\");\n  let topicID = (_category$topic_list$ = category.topic_list.topics.find(topic => topic.tags && topic.tags.includes(tag))) === null || _category$topic_list$ === void 0 ? void 0 : _category$topic_list$.id;\n  if (!topicID) return {\n    text: '',\n    id: ''\n  };\n  let topicRequest = await fetchWithBackoff(`${DISCOURSE_URL}/raw/${topicID}`, {\n    headers\n  });\n  return {\n    text: await topicRequest.text(),\n    id: topicID\n  };\n};\nexport const makeSSOPayload = params => {\n  let payload = Buffer.from(querystring.stringify(params)).toString('base64');\n  const sig = crypto.createHmac('sha256', process.env.DISCOURSE_SECRET || '');\n  sig.update(payload);\n  let result = querystring.stringify({\n    sso: payload,\n    sig: sig.digest('hex')\n  });\n  return result;\n};\nexport const syncSSO = async params => {\n  let payload = Buffer.from(querystring.stringify(params)).toString('base64');\n  const sig = crypto.createHmac('sha256', process.env.DISCOURSE_SECRET || '');\n  sig.update(payload);\n  return fetchWithBackoff(`${DISCOURSE_URL}/admin/users/sync_sso`, {\n    method: \"POST\",\n    headers: {\n      \"Api-Key\": process.env.DISCOURSE_API_KEY || '',\n      \"Api-Username\": 'system',\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({\n      sso: payload,\n      sig: sig.digest('hex')\n    })\n  });\n};\nexport async function createPost(params) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/posts.json`, {\n    method: \"POST\",\n    headers: _objectSpread(_objectSpread({\n      \"Content-Type\": 'application/json; charset=utf-8'\n    }, headers), {}, {\n      \"Api-Username\": 'system'\n    }),\n    body: JSON.stringify(params)\n  });\n  console.log(result);\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/src/discourse.ts"],"names":["crypto","querystring","DISCOURSE_URL","prisma","headers","process","env","DISCOURSE_API_KEY","DISCOURSE_API_USERNAME","fetchWithBackoff","url","options","exponent","result","fetch","status","value","Promise","resolve","backoff","Math","min","floor","random","setTimeout","createGroup","group","console","log","owner_usernames","join","method","body","JSON","stringify","text","json","updateTopic","topic","input","username","tags","title","topicData","postID","post_stream","posts","id","post","raw","post_ids","createTopic","asUser","createCategory","name","color","text_color","category","updateGroup","discourse_groups","update","where","data","updateCategory","getCategory","path","res","getUsername","userId","user","getGroupId","groupName","undefined","addMember","groupId","usernames","getTaggedPost","c","tag","topic_list","topics","topicID","find","includes","topicRequest","makeSSOPayload","params","payload","Buffer","from","toString","sig","createHmac","DISCOURSE_SECRET","sso","digest","syncSSO","createPost"],"mappings":"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","sourcesContent":["import crypto from 'crypto'\nimport querystring from 'querystring'\nimport {DISCOURSE_URL} from 'src/constants'\nimport prisma from \"lib/prisma\";\nlet headers = {\n      \"Api-Key\": process.env.DISCOURSE_API_KEY || '',\n      \"Api-Username\": process.env.DISCOURSE_API_USERNAME || '',\n    }\n\nlet fetchWithBackoff = async (url: Parameters<typeof fetch>[0], options:Parameters<typeof fetch>[1], exponent: number = 1):ReturnType<typeof fetch> => {\n  let result = await fetch(url, options)\n  if(result.status === 429) {\n    let value = 1000 * (2**exponent)\n    await new Promise<void>((resolve)=>{\n      let backoff = Math.min(value + Math.floor(Math.random()*value), 64000)\n      setTimeout(()=>resolve(), backoff)\n    })\n    return fetchWithBackoff(url, options, exponent+1)\n  }\n  return result\n}\n\nexport type Category = {\n  topic_list: {\n    topics: Array<{\n      category_id: number\n      id: string\n      pinned: boolean\n      tags: string[]\n    }>\n  }\n}\n\nexport async function createGroup(group:{\n  name: string,\n  visibility_level: number,\n  owner_usernames: string | string[],\n  mentionable_level?: number,\n  messageable_level?: number\n}) {\n  console.log(group, \"grouphere\")\n  if(typeof group.owner_usernames !== 'string') group.owner_usernames = group.owner_usernames.join(',')\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/admin/groups`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({group})\n  })\n\n   console.log(result, \"grouphereafter\")\n\n  if(result.status !== 200) {\n    console.log(await result.text())\n    return false\n  }\n  return await result.json() as {basic_group: {id: number}}\n}\n\nexport async function updateTopic(topic:string, input: {category_id: number, title: string, raw: string, tags: string[]}, username?: string) {\n  await fetch (`${DISCOURSE_URL}${topic}`, {\n    method: \"PUT\",\n    headers:{\n      \"Content-Type\": 'application/json; charset=utf-8',\n      ...headers\n    },\n    body: JSON.stringify({\n      tags: input.tags,\n      title: input.title\n    })\n  })\n\n  // Update the content\n  let topicData = await (await fetchWithBackoff(`${DISCOURSE_URL}${topic}.json`, {headers})).json()\n  let postID = topicData.post_stream.posts[0].id\n  await fetch (`${DISCOURSE_URL}/posts/${postID}`, {\n    method: \"PUT\",\n    headers:{\n      \"Content-Type\": 'application/json; charset=utf-8',\n      ...headers\n    },\n    body: JSON.stringify({\n      post: {\n        raw: input.raw\n      }\n    })\n  })\n\n  // Update the owner\n  if(username) await fetchWithBackoff(`${DISCOURSE_URL}/t/${topicData.id}/change-owner`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": 'application/json; charset=utf-8',\n      ...headers\n    },\n    body: JSON.stringify({post_ids: [postID], username})\n  })\n}\n\nexport async function createTopic(input:{title: string, category: number | string, raw: string, tags?: string[]}, asUser?: string) {\n  console.log(asUser, \"asUser\")\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/posts.json`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": 'application/json; charset=utf-8',\n      ...headers,\n      \"Api-Username\": headers[\"Api-Username\"]\n    },\n    body: JSON.stringify(input)\n  })\n  if(result.status !== 200) {\n    console.log(await result.text())\n  }\n  if(result.status === 200)  return await result.json() as {id: string, topic_id: number}\n}\n\nexport const createCategory = async (name: string, options?: {\n  slug?: string,\n  permissions?: {[key:string]:number},\n  parent_category_id?: number,\n  show_subcategory_list?: boolean,\n  subcategory_list_style?: \"rows_with_featured_topics\",\n  default_list_filter?:\"none\"\n}) => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/categories.json`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({name, color: '0088CC', text_color: 'FFFFFF', ...options})\n  })\n  if(result.status === 200) return (await result.json()).category as {id: number, topic_url: string}\n  console.log(await result.text())\n  return false as const\n}\n\nexport async function updateGroup(id: number, name: string) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/g/${id}.json`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({name})\n  })\n  if(result.status !== 200) console.log(await result.text())\n  else {\n    \n    await prisma.discourse_groups.update({where:{id}, data:{name}})\n    return true\n  }\n}\n\nexport async function updateCategory (id: string | number, options: {permissions?: {[key:string]: number}, name: string, slug?: string}) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/categories/${id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({...options, color: '0088CC', text_color: 'FFFFFF'})\n  })\n  if(result.status !== 200) console.log(await result.text())\n  else return true\n}\nexport async function getCategory(path: string | number){\n  let res = await fetchWithBackoff(`${DISCOURSE_URL}/c/${path}.json`, {\n    method: 'GET',\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8',\n    },\n  })\n  if(res.status === 200){\n    let category = await res.json() as Category\n    return category\n  }\n  else console.log(await res.text())\n}\n\nexport const getUsername = async (userId:string):Promise<string | undefined> => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/u/by-external/${userId}.json`, {\n    method: \"GET\",\n    headers\n  })\n\n  if(result.status === 200) {\n    return (await result.json()).user.username as string\n  }\n  else return\n}\n\nexport const getGroupId = async (groupName:string) => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/groups/${groupName}.json`, {\n    method: \"GET\",\n    headers\n  })\n  if(result.status === 200) return (await result.json()).group.id\n  return undefined\n}\n\nexport const addMember = async (groupId:number, username: string) => {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/groups/${groupId}/members.json`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      usernames: username\n    })\n  })\n  return result.status  === 200\n}\n\nexport const getTaggedPost = async (c: string | number, tag: string) => {\n\n\n  let res = await fetchWithBackoff(`${DISCOURSE_URL}/c/${c}.json`, {\n    method: 'GET',\n    headers: {\n      ...headers,\n      \"Content-Type\": 'application/json; charset=utf-8',\n    },\n  })\n\n  if(res.status !== 200) console.log(await res.text())\n  let category = await res.json() as Category\n  console.log(category.topic_list.topics, tag , \"category\")\n  let topicID = category.topic_list.topics.find((topic) => topic.tags && topic.tags.includes(tag))?.id\n  if(!topicID) return {text: '', id: ''}\n  let topicRequest = await fetchWithBackoff(`${DISCOURSE_URL}/raw/${topicID}`, {headers})\n  return {text: await topicRequest.text(), id: topicID}\n}\n\nexport const makeSSOPayload = (params: {[key:string]: string}) => {\n  let payload = (Buffer.from(querystring.stringify(params))).toString('base64')\n  const sig = crypto.createHmac('sha256', process.env.DISCOURSE_SECRET || '');\n  sig.update(payload)\n\n  let result = querystring.stringify({\n    sso:payload,\n    sig: sig.digest('hex')\n  })\n  return result\n}\n\nexport const syncSSO = async (params: {[key:string]: string})=>{\n  let payload = (Buffer.from(querystring.stringify(params))).toString('base64')\n  const sig = crypto.createHmac('sha256', process.env.DISCOURSE_SECRET || '');\n\n  sig.update(payload)\n  return fetchWithBackoff(`${DISCOURSE_URL}/admin/users/sync_sso`, {\n    method: \"POST\",\n    headers: {\n      \"Api-Key\": process.env.DISCOURSE_API_KEY || '',\n      \"Api-Username\": 'system',\n      \"Content-Type\": 'application/json; charset=utf-8'\n    },\n    body: JSON.stringify({\n      sso: payload,\n      sig: sig.digest('hex')\n    })\n  })\n}\n\nexport async function createPost(params:{topic_id: number,raw:string}) {\n  let result = await fetchWithBackoff(`${DISCOURSE_URL}/posts.json`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": 'application/json; charset=utf-8',\n      ...headers,\n      \"Api-Username\":'system'\n    },\n    body: JSON.stringify(params)\n  })\n  console.log(result)\n}\n"]},"metadata":{},"sourceType":"module"}