{"ast":null,"code":"import { multiRouteHandler } from '../../../src/apiHelpers';\nimport { getToken } from '../../../src/token';\nimport prisma from \"lib/prisma\";\nexport default multiRouteHandler('item', {\n  'user_cohorts': getUserCohorts,\n  'user_courses': getUserCourses,\n  'username': checkUsername,\n  'whoami': whoami\n});\n\nasync function getUserCohorts(req) {\n  let token = getToken(req);\n  if (!token) return {\n    status: 403,\n    result: \"Error: no user logged in\"\n  };\n  let [course_cohorts, invited_courses, events] = await Promise.all([prisma.course_cohorts.findMany({\n    where: {\n      OR: [{\n        people_in_cohorts: {\n          some: {\n            person: token.id\n          }\n        }\n      }, {\n        cohort_facilitators: {\n          some: {\n            facilitator: token.id\n          }\n        }\n      }]\n    },\n    include: {\n      courses: {\n        select: {\n          name: true,\n          slug: true,\n          card_image: true,\n          id: true,\n          type: true,\n          description: true,\n          cohort_max_size: true\n        }\n      },\n      cohort_facilitators: true,\n      cohort_events: {\n        where: {\n          OR: [{\n            everyone: true\n          }, {\n            events: {\n              people: {\n                id: token.id\n              }\n            }\n          }, {\n            events: {\n              people_in_events: {\n                some: {\n                  people: {\n                    id: token.id\n                  }\n                }\n              }\n            }\n          }]\n        },\n        select: {\n          events: true\n        }\n      },\n      people: {\n        select: {\n          display_name: true,\n          username: true\n        }\n      }\n    }\n  }), prisma.courses.findMany({\n    where: {\n      course_invites: {\n        some: {\n          email: token.email\n        }\n      }\n    }\n  }), prisma.standalone_events.findMany({\n    include: {\n      events: true\n    },\n    where: {\n      events: {\n        AND: [{\n          OR: [{\n            created_by: token.id\n          }, {\n            people_in_events: {\n              some: {\n                person: token.id\n              }\n            }\n          }]\n        }, {\n          end_date: {\n            gte: new Date().toISOString()\n          }\n        }]\n      }\n    }\n  })]);\n  return {\n    status: 200,\n    result: {\n      course_cohorts,\n      invited_courses,\n      events\n    }\n  };\n}\n\nasync function getUserCourses(req) {\n  let token = getToken(req);\n  if (!token) return {\n    status: 403,\n    result: \"Error: no user logged in\"\n  };\n  let [maintaining_courses, watching_courses] = await Promise.all([prisma.courses.findMany({\n    where: {\n      course_maintainers: {\n        some: {\n          maintainer: token.id\n        }\n      }\n    },\n    include: {\n      course_cohorts: {\n        select: {\n          start_date: true\n        }\n      }\n    }\n  }), prisma.watching_courses.findMany({\n    where: {\n      email: token.email\n    }\n  })]);\n  return {\n    status: 200,\n    result: {\n      maintaining_courses,\n      watching_courses\n    }\n  };\n}\n\nasync function whoami(req) {\n  let token = getToken(req);\n  return {\n    status: 200,\n    result: token || false\n  };\n}\n\nasync function checkUsername(req) {\n  let username = req.query.item[1];\n  let headers = {\n    \"Cache-Control\": 's-maxage=60000, stale-while-revalidate'\n  };\n  let people = await prisma.people.findFirst({\n    where: {\n      username: {\n        equals: username,\n        mode: \"insensitive\"\n      }\n    },\n    select: {\n      username: true\n    }\n  });\n  return !!people ? {\n    status: 200,\n    result: '',\n    headers\n  } : {\n    status: 404,\n    result: '',\n    headers\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/get/[...item].ts"],"names":["multiRouteHandler","getToken","prisma","getUserCohorts","getUserCourses","checkUsername","whoami","req","token","status","result","course_cohorts","invited_courses","events","Promise","all","findMany","where","OR","people_in_cohorts","some","person","id","cohort_facilitators","facilitator","include","courses","select","name","slug","card_image","type","description","cohort_max_size","cohort_events","everyone","people","people_in_events","display_name","username","course_invites","email","standalone_events","AND","created_by","end_date","gte","Date","toISOString","maintaining_courses","watching_courses","course_maintainers","maintainer","start_date","query","item","headers","findFirst","equals","mode"],"mappings":"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","sourcesContent":["import { multiRouteHandler, ResultType, Request} from '../../../src/apiHelpers'\nimport { getToken } from '../../../src/token'\n\nexport type UserCohortsResult = ResultType<typeof getUserCohorts>\nexport type UserCoursesResult = ResultType<typeof getUserCourses>\nexport type WhoAmIResult = ResultType<typeof whoami>\nexport type CheckUsernameResult = ResultType<typeof checkUsername>\nimport prisma from \"lib/prisma\";\n\nexport default multiRouteHandler('item', {\n  'user_cohorts': getUserCohorts,\n  'user_courses': getUserCourses,\n  'username': checkUsername,\n  'whoami': whoami,\n})\n\nasync function getUserCohorts(req:Request) {\n  let token = getToken(req)\n  if(!token) return {status: 403 as const, result: \"Error: no user logged in\"}\n  let [course_cohorts, invited_courses, events] = await Promise.all([\n    prisma.course_cohorts.findMany({\n      where:{\n        OR: [\n          {people_in_cohorts: {some: {person: token.id}}},\n          {cohort_facilitators: {some:{facilitator: token.id}}}\n        ]\n      },\n      include:{\n        courses: {select: {name: true, slug: true, card_image: true, id: true, type: true, description: true, cohort_max_size: true}},\n        cohort_facilitators: true,\n        cohort_events: {\n          where:{\n            OR:[\n              {everyone: true},\n              {events:{people:{id:token.id}}},\n              {events:{people_in_events:{some:{people:{id: token.id}}}}}\n            ]\n          },\n          select: {\n            events: true\n          }\n        },\n        people: {\n          select: {\n            display_name: true,\n            username: true,\n          }\n        }\n      },\n    }),\n    prisma.courses.findMany({\n      where:{\n        course_invites: {\n          some: {\n            email: token.email\n          }\n        }\n      }\n    }),\n    prisma.standalone_events.findMany({\n      include:{events: true},\n      where:{\n        events:{AND:[\n          {OR:[\n              {created_by: token.id},\n              {people_in_events:{some:{person: token.id}}}\n          ]},\n          {end_date:{gte:new Date().toISOString()}}\n        ]}\n      }\n    })\n  ])\n\n  return {status: 200, result: {course_cohorts, invited_courses, events}} as const\n}\nasync function getUserCourses(req: Request) {\n  let token = getToken(req)\n  if(!token) return {status: 403 as const, result: \"Error: no user logged in\"}\n\n  let [maintaining_courses, watching_courses] = await Promise.all([\n    prisma.courses.findMany({\n      where: {\n        course_maintainers: {\n          some: {\n            maintainer: token.id\n          }\n        }\n      },\n      include: {\n        course_cohorts: {\n          select: {start_date: true}\n        }\n      }\n    }),\n    prisma.watching_courses.findMany({\n      where: {\n        email: token.email\n      }\n    })\n  ])\n  return {status: 200, result: {maintaining_courses, watching_courses}} as const\n}\n\nasync function whoami(req:Request) {\n  let token = getToken(req)\n  return {status: 200, result: token || false } as const\n}\n\nasync function checkUsername(req:Request){\n  let username = req.query.item[1]\n  let headers = {\"Cache-Control\": 's-maxage=60000, stale-while-revalidate'}\n  let people = await prisma.people.findFirst({where:{username: {\n    equals: username,\n    mode: \"insensitive\",\n  }}, select:{username: true}})\n  return !!people\n    ? {status: 200, result: '', headers} as const\n    : {status: 404, result: '', headers} as const\n}\n"]},"metadata":{},"sourceType":"module"}