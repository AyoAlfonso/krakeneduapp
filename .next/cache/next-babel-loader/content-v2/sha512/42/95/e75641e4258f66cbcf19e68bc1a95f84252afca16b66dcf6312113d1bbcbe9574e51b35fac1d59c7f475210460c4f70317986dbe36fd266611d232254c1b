{"ast":null,"code":"import _styled from \"@emotion/styled-base\";\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport h from 'react-hyperscript';\nimport { getTimeBetween } from 'src/utils';\nimport { useState } from 'react';\nimport { Box, FormBox } from 'components/Layout';\nimport Link from 'next/link';\nimport { colors } from 'components/Tokens';\nimport { Calendar, Pencil } from 'components/Icons';\nimport { EventForm } from './CreateEvent';\nimport { SmallLinkButton, LinkButton, Primary, IconButton, Destructive } from 'components/Button';\nimport { useApi } from 'src/apiHelpers';\nimport Text from 'components/Text';\nimport { useUserData } from 'src/data';\nimport { Pill } from 'components/Pill';\nimport { useFormData } from 'src/hooks';\nexport const CohortEvents = props => {\n  let {\n    data: user\n  } = useUserData();\n  let pastEvents = props.events.filter(event => new Date() > new Date(event.events.end_date));\n  let {\n    0: showPastEvents,\n    1: setShowPastEvents\n  } = useState(pastEvents.length === props.events.length);\n  let displayedEvents = props.events.filter(event => showPastEvents ? true : new Date() < new Date(event.events.end_date)).sort((a, b) => new Date(a.events.start_date) > new Date(b.events.start_date) ? 1 : -1);\n  return h(Box, [// (inCohort || isFacilitator) && cohort.cohort_events.length > 0 ? h(Link, {href: \"/calendar\"}, \n  h(Box, {\n    h: true,\n    gap: 0,\n    style: {\n      gridTemplateColumns: 'auto min-content',\n      gridGap: 0\n    }\n  }, [pastEvents.length === 0 ? null : h(SmallLinkButton, {\n    textSecondary: true,\n    onClick: () => {\n      setShowPastEvents(!showPastEvents);\n    }\n  }, showPastEvents ? \"hide past events\" : \"show past events\"), !props.showCal ? null : h(Link, {\n    href: \"/calendar\"\n  }, h(SmallLinkButton, {\n    textSecondary: true,\n    style: {\n      justifySelf: 'end'\n    }\n  }, h(Box, {\n    h: true,\n    gap: 8,\n    style: {\n      textAlign: 'right'\n    }\n  }, ['add to your calendar ', Calendar])))]), h(TimelineContainer, {}, displayedEvents.map((event, index) => h(Event, {\n    user: user ? user.id : undefined,\n    inCohort: props.inCohort,\n    key: event.events.id,\n    facilitating: props.facilitating,\n    event,\n    people: props.people,\n    cohort: props.cohort,\n    mutate: newEvent => {\n      let events = props.events.slice(0);\n      events[index] === newEvent;\n      return props.mutate(events);\n    },\n    mutateDelete: () => {\n      let events = props.events.slice(0);\n      events.splice(index, 1);\n      return props.mutate(events);\n    },\n    first: showPastEvents ? index === pastEvents.length : index === 0,\n    last: index === displayedEvents.length - 1\n  })))]);\n};\n\nconst Event = props => {\n  let {\n    0: editting,\n    1: setEditing\n  } = useState(false);\n  let {\n    0: expanded,\n    1: setExpanded\n  } = useState(props.first);\n  let event = props.event;\n  let start_date = new Date(event.events.start_date);\n  let end_date = new Date(event.events.end_date);\n  let past = end_date < new Date();\n  let {\n    state,\n    setState\n  } = useFormData({\n    everyone: !event.everyone,\n    name: event.events.name,\n    location: event.events.location,\n    description: event.events.description,\n    start_date: `${start_date.getFullYear()}-${('0' + (start_date.getMonth() + 1)).slice(-2)}-${('0' + start_date.getDate()).slice(-2)}`,\n    start_time: start_date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    }),\n    end_time: end_date.toLocaleTimeString([], {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      hour12: false\n    }),\n    people: event.events.people_in_events.map(p => p.people.username)\n  }, [event]);\n  let [status, callUpdateEvent] = useApi([props], async event => {\n    if (event.type === 'cohort') props.mutate(event.data);\n    setEditing(false);\n  });\n  let [deleteStatus, callDeleteEvent] = useApi([], () => {\n    setEditing(false);\n    props.mutateDelete();\n  });\n\n  const onSubmit = e => {\n    e.preventDefault();\n    let event = state;\n    let d1 = event.start_date.split('-').map(x => parseInt(x));\n    let t1 = event.start_time.split(':').map(x => parseInt(x));\n    let t2 = event.end_time.split(':').map(x => parseInt(x));\n    let start_date = new Date(d1[0], d1[1] - 1, d1[2], t1[0], t1[1]);\n    let end_date = new Date(d1[0], d1[1] - 1, d1[2], t2[0], t2[1]);\n    callUpdateEvent('/api/events/' + props.event.events.id, {\n      type: 'cohort',\n      cohort: props.cohort,\n      data: {\n        name: event.name,\n        description: event.description,\n        location: event.location,\n        start_date: start_date.toISOString(),\n        end_date: end_date.toISOString(),\n        people: event.people\n      }\n    });\n  };\n\n  return h(EventContainer, {\n    last: props.last,\n    selected: expanded\n  }, [h(Dot, {\n    selected: expanded,\n    onClick: () => setExpanded(event.events.description === '' ? false : !expanded),\n    past\n  }), editting ? h(FormBox, {\n    onSubmit\n  }, [h(EventForm, {\n    onChange: setState,\n    state,\n    people: props.people\n  }), h(Box, {\n    h: true,\n    style: {\n      justifySelf: \"right\",\n      alignItems: \"center\"\n    }\n  }, [h(LinkButton, {\n    textSecondary: true,\n    onClick: () => setEditing(false)\n  }, \"cancel\"), h(Destructive, {\n    status: deleteStatus,\n    onClick: e => {\n      e.preventDefault();\n      callDeleteEvent('/api/events/' + props.event.events.id, null, \"DELETE\");\n    }\n  }, \"Delete Event\"), h(Primary, {\n    type: 'submit',\n    status\n  }, \"Save Changes\")])]) : h(Box, [h(Box, [h(Box, {\n    gap: 8\n  }, [h('p.textSecondary', {\n    style: {\n      color: past ? colors.grey55 : undefined\n    }\n  }, [h('b', {\n    style: {\n      fontWeight: \"900\"\n    }\n  }, start_date.toLocaleDateString([], {\n    weekday: 'short',\n    month: \"short\",\n    day: \"numeric\"\n  }).toUpperCase()), ' ' + start_date.toLocaleTimeString([], {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    hour12: true,\n    timeZoneName: 'short'\n  }) + ` | ` + getTimeBetween(start_date, end_date) + ' hrs ', (() => {\n    if (event.everyone) return null;\n\n    switch (event.events.people_in_events.length) {\n      case 1:\n        return h(Pill, {\n          style: {\n            alignSelf: \"center\"\n          }\n        }, \"Solo\");\n\n      case 2:\n        return h(Pill, {\n          style: {\n            alignSelf: \"center\"\n          }\n        }, \"1:1\");\n\n      default:\n        return h(Pill, {\n          style: {\n            alignSelf: \"center\"\n          }\n        }, \"Group\");\n    }\n  })()]), h(Box, {\n    h: true,\n    style: {\n      gridTemplateColumns: \"auto auto min-content\"\n    }\n  }, [h(EventTitle, {\n    past,\n    onClick: () => setExpanded(!expanded)\n  }, [event.events.name]), props.facilitating || props.user === event.events.created_by ? h(IconButton, {\n    style: {\n      alignSelf: 'baseline',\n      justifySelf: 'right'\n    },\n    onClick: () => setEditing(true)\n  }, Pencil) : null])]), event.events.location && expanded ? h('a', {\n    href: event.events.location\n  }, h(Primary, \"Join Event\")) : null]), !expanded || event.events.description === '' ? null : h(Box, [h('div', {\n    style: {\n      padding: '32px',\n      backgroundColor: 'white',\n      border: 'dotted 1px',\n      overflow: 'auto',\n      overflowWrap: \"break-word\"\n    }\n  }, h(Text, {\n    source: event.events.description\n  })), event.events.people_in_events.length === 0 ? null : h('p.textSecondary', [h('b', 'Attendees: '), event.events.people_in_events.map(p => p.people.display_name || p.people.username).join(', ')])])])]);\n};\n\nconst Dot = /*#__PURE__*/_styled('div', {\n  target: \"e1h6j2wc0\"\n})(p => {\n  let size = p.selected ? 24 : 16;\n  return `\nwidth: ${size}px;\nheight: ${size}px;\nmargin-right: ${p.selected ? 32 : 34}px;\n`;\n}, \" box-sizing:border-box;border:4px solid;background-color:white;border-radius:50%;\", p => p.past ? `background-color: ${colors.grey80};` : '', \" &:hover{cursor:pointer;}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9heW9vbHV3YWFsZm9uc28vY29kZS9rcmFrZW5lZHVhcHAvY29tcG9uZW50cy9wYWdlcy9jb2hvcnRzL0V2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErTDZEIiwiZmlsZSI6Ii9Vc2Vycy9heW9vbHV3YWFsZm9uc28vY29kZS9rcmFrZW5lZHVhcHAvY29tcG9uZW50cy9wYWdlcy9jb2hvcnRzL0V2ZW50cy50cyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoIGZyb20gJ3JlYWN0LWh5cGVyc2NyaXB0J1xuaW1wb3J0IHsgZ2V0VGltZUJldHdlZW4gfSBmcm9tICdzcmMvdXRpbHMnXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQm94LCBGb3JtQm94IH0gZnJvbSAnY29tcG9uZW50cy9MYXlvdXQnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcbmltcG9ydCB7IGNvbG9ycyB9IGZyb20gJ2NvbXBvbmVudHMvVG9rZW5zJ1xuaW1wb3J0IHtDYWxlbmRhciwgUGVuY2lsfSBmcm9tICdjb21wb25lbnRzL0ljb25zJ1xuaW1wb3J0IHsgRXZlbnRGb3JtIH0gZnJvbSAnLi9DcmVhdGVFdmVudCdcbmltcG9ydCB7IFNtYWxsTGlua0J1dHRvbiwgTGlua0J1dHRvbiwgUHJpbWFyeSwgSWNvbkJ1dHRvbiwgRGVzdHJ1Y3RpdmUgfSBmcm9tICdjb21wb25lbnRzL0J1dHRvbidcbmltcG9ydCB7IHVzZUFwaSB9IGZyb20gJ3NyYy9hcGlIZWxwZXJzJ1xuaW1wb3J0IHsgVXBkYXRlRXZlbnRNc2csIFVwZGF0ZUV2ZW50UmVzdWx0LCBEZWxldGVFdmVudFJlc3VsdCB9IGZyb20gJ3BhZ2VzL2FwaS9ldmVudHMvW2lkXSdcbmltcG9ydCBUZXh0IGZyb20gJ2NvbXBvbmVudHMvVGV4dCdcbmltcG9ydCB7IENvaG9ydCwgdXNlVXNlckRhdGEgfSBmcm9tICdzcmMvZGF0YSdcbmltcG9ydCB7IFBpbGwgfSBmcm9tICdjb21wb25lbnRzL1BpbGwnXG5pbXBvcnQgeyB1c2VGb3JtRGF0YSB9IGZyb20gJ3NyYy9ob29rcydcblxuZXhwb3J0IGNvbnN0IENvaG9ydEV2ZW50cyA9IChwcm9wczoge1xuICBmYWNpbGl0YXRpbmc6IGJvb2xlYW4sXG4gIGluQ29ob3J0OiBib29sZWFuLFxuICBjb2hvcnQ6IG51bWJlcixcbiAgcGVvcGxlOiBzdHJpbmdbXSxcbiAgZXZlbnRzOkNvaG9ydFtcImNvaG9ydF9ldmVudHNcIl0sXG4gIG11dGF0ZTogKEU6Q29ob3J0W1wiY29ob3J0X2V2ZW50c1wiXSk9PnZvaWQsXG4gIHNob3dDYWw6IGJvb2xlYW4sXG59KT0+e1xuICBsZXQge2RhdGE6dXNlcn0gPSB1c2VVc2VyRGF0YSgpXG4gIGxldCBwYXN0RXZlbnRzID0gcHJvcHMuZXZlbnRzLmZpbHRlcigoZXZlbnQpPT5uZXcgRGF0ZSgpID4gbmV3IERhdGUoZXZlbnQuZXZlbnRzLmVuZF9kYXRlKSlcbiAgbGV0IFtzaG93UGFzdEV2ZW50cywgc2V0U2hvd1Bhc3RFdmVudHNdID0gdXNlU3RhdGUocGFzdEV2ZW50cy5sZW5ndGggPT09IHByb3BzLmV2ZW50cy5sZW5ndGgpXG5cbiAgbGV0IGRpc3BsYXllZEV2ZW50cyA9IHByb3BzLmV2ZW50c1xuICAgICAgICAuZmlsdGVyKChldmVudCk9PnNob3dQYXN0RXZlbnRzID8gdHJ1ZSA6IG5ldyBEYXRlKCkgPCBuZXcgRGF0ZShldmVudC5ldmVudHMuZW5kX2RhdGUpIClcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZXZlbnRzLnN0YXJ0X2RhdGUpID4gbmV3IERhdGUoYi5ldmVudHMuc3RhcnRfZGF0ZSkgPyAxIDogLTEpXG4gIHJldHVybiBoKEJveCwgW1xuICAgIC8vIChpbkNvaG9ydCB8fCBpc0ZhY2lsaXRhdG9yKSAmJiBjb2hvcnQuY29ob3J0X2V2ZW50cy5sZW5ndGggPiAwID8gaChMaW5rLCB7aHJlZjogXCIvY2FsZW5kYXJcIn0sIFxuICAgIGgoQm94LCB7aDp0cnVlLCBnYXA6MCwgc3R5bGU6IHtncmlkVGVtcGxhdGVDb2x1bW5zOiAnYXV0byBtaW4tY29udGVudCcsIGdyaWRHYXA6MH19LCBbXG5cbiAgICAgIHBhc3RFdmVudHMubGVuZ3RoID09PSAwID8gbnVsbCA6IGgoU21hbGxMaW5rQnV0dG9uLCB7dGV4dFNlY29uZGFyeTogdHJ1ZSwgb25DbGljazogKCk9PntcbiAgICAgICAgc2V0U2hvd1Bhc3RFdmVudHMoIXNob3dQYXN0RXZlbnRzKVxuICAgICAgfX0sIHNob3dQYXN0RXZlbnRzID8gXCJoaWRlIHBhc3QgZXZlbnRzXCIgOiBcInNob3cgcGFzdCBldmVudHNcIiksXG4gICAgICAhcHJvcHMuc2hvd0NhbCA/IG51bGwgOlxuICAgICAgICBoKExpbmssIHtocmVmOiBcIi9jYWxlbmRhclwifSwgaChTbWFsbExpbmtCdXR0b24sIHt0ZXh0U2Vjb25kYXJ5OiB0cnVlLCBzdHlsZTp7anVzdGlmeVNlbGY6ICdlbmQnfX0sXG4gICAgICAgIGgoQm94LCB7aDp0cnVlLCBnYXA6OCwgc3R5bGU6e3RleHRBbGlnbjoncmlnaHQnfX0sIFsnYWRkIHRvIHlvdXIgY2FsZW5kYXIgJywgQ2FsZW5kYXJdKSxcbiAgICAgICkpXG5cbiAgICBdKSxcblxuICAgIGgoVGltZWxpbmVDb250YWluZXIsIHt9LFxuICAgICAgZGlzcGxheWVkRXZlbnRzXG4gICAgICAgIC5tYXAoKGV2ZW50LGluZGV4KSA9PiBoKEV2ZW50LCB7XG4gICAgICAgICAgdXNlcjogdXNlciA/IHVzZXIuaWQgOiB1bmRlZmluZWQsXG4gICAgICAgICAgaW5Db2hvcnQ6IHByb3BzLmluQ29ob3J0LFxuICAgICAgICAgIGtleTogZXZlbnQuZXZlbnRzLmlkLFxuICAgICAgICAgIGZhY2lsaXRhdGluZzogcHJvcHMuZmFjaWxpdGF0aW5nLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIHBlb3BsZTogcHJvcHMucGVvcGxlLFxuICAgICAgICAgIGNvaG9ydDogcHJvcHMuY29ob3J0LFxuICAgICAgICAgIG11dGF0ZTogKG5ld0V2ZW50KSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZlbnRzID0gcHJvcHMuZXZlbnRzLnNsaWNlKDApXG4gICAgICAgICAgICBldmVudHNbaW5kZXhdID09PSBuZXdFdmVudFxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLm11dGF0ZShldmVudHMpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtdXRhdGVEZWxldGU6ICgpPT57XG4gICAgICAgICAgICBsZXQgZXZlbnRzID0gcHJvcHMuZXZlbnRzLnNsaWNlKDApXG4gICAgICAgICAgICBldmVudHMuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLm11dGF0ZShldmVudHMpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaXJzdDogc2hvd1Bhc3RFdmVudHMgPyBpbmRleCA9PT0gcGFzdEV2ZW50cy5sZW5ndGggOiBpbmRleCA9PT0gMCxcbiAgICAgICAgICBsYXN0OiBpbmRleCA9PT0gZGlzcGxheWVkRXZlbnRzLmxlbmd0aCAtMSxcbiAgICAgICAgfSkpXG4gICAgIClcbiAgXSlcblxufVxuXG5jb25zdCBFdmVudCA9IChwcm9wczoge1xuICBldmVudDpDb2hvcnRbXCJjb2hvcnRfZXZlbnRzXCJdWzBdLFxuICB1c2VyPzogc3RyaW5nLFxuICBmYWNpbGl0YXRpbmc6IGJvb2xlYW5cbiAgaW5Db2hvcnQ6IGJvb2xlYW5cbiAgcGVvcGxlOiBzdHJpbmdbXVxuICBjb2hvcnQ6IG51bWJlcixcbiAgbGFzdDogYm9vbGVhbixcbiAgZmlyc3Q6IGJvb2xlYW4sXG4gIG11dGF0ZTogKGU6Q29ob3J0W1wiY29ob3J0X2V2ZW50c1wiXVswXSk9PnZvaWQsXG4gIG11dGF0ZURlbGV0ZTogKCk9PnZvaWQsXG59KT0+e1xuICBsZXQgW2VkaXR0aW5nLCBzZXRFZGl0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBsZXQgW2V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZShwcm9wcy5maXJzdClcbiAgbGV0IGV2ZW50ID0gcHJvcHMuZXZlbnRcbiAgbGV0IHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShldmVudC5ldmVudHMuc3RhcnRfZGF0ZSlcbiAgbGV0IGVuZF9kYXRlID0gbmV3IERhdGUoZXZlbnQuZXZlbnRzLmVuZF9kYXRlKVxuICBsZXQgcGFzdCA9IGVuZF9kYXRlIDwgbmV3IERhdGUoKVxuXG4gIGxldCB7c3RhdGUsIHNldFN0YXRlfSA9IHVzZUZvcm1EYXRhKHtcbiAgICBldmVyeW9uZTogIWV2ZW50LmV2ZXJ5b25lLFxuICAgIG5hbWU6IGV2ZW50LmV2ZW50cy5uYW1lLFxuICAgIGxvY2F0aW9uOiBldmVudC5ldmVudHMubG9jYXRpb24sXG4gICAgZGVzY3JpcHRpb246IGV2ZW50LmV2ZW50cy5kZXNjcmlwdGlvbixcbiAgICBzdGFydF9kYXRlOiBgJHtzdGFydF9kYXRlLmdldEZ1bGxZZWFyKCl9LSR7KCcwJysoc3RhcnRfZGF0ZS5nZXRNb250aCgpKzEpKS5zbGljZSgtMil9LSR7KCcwJytzdGFydF9kYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpfWAsXG4gICAgc3RhcnRfdGltZTogc3RhcnRfZGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoW10sIHtob3VyOlwiMi1kaWdpdFwiLCBtaW51dGU6IFwiMi1kaWdpdFwiLCBob3VyMTI6IGZhbHNlfSksXG4gICAgZW5kX3RpbWU6IGVuZF9kYXRlLnRvTG9jYWxlVGltZVN0cmluZyhbXSwge2hvdXI6XCIyLWRpZ2l0XCIsIG1pbnV0ZTogXCIyLWRpZ2l0XCIsIGhvdXIxMjogZmFsc2V9KSxcbiAgICBwZW9wbGU6IGV2ZW50LmV2ZW50cy5wZW9wbGVfaW5fZXZlbnRzLm1hcChwPT5wLnBlb3BsZS51c2VybmFtZSlcbiAgfSwgW2V2ZW50XSlcblxuICBsZXRbc3RhdHVzLCBjYWxsVXBkYXRlRXZlbnRdID0gdXNlQXBpPFVwZGF0ZUV2ZW50TXNnLCBVcGRhdGVFdmVudFJlc3VsdD4oW3Byb3BzXSwgYXN5bmMgKGV2ZW50KT0+e1xuICAgIGlmKGV2ZW50LnR5cGUgPT09ICdjb2hvcnQnKSBwcm9wcy5tdXRhdGUoZXZlbnQuZGF0YSlcbiAgICBzZXRFZGl0aW5nKGZhbHNlKVxuICB9KVxuXG4gIGxldCBbZGVsZXRlU3RhdHVzLCBjYWxsRGVsZXRlRXZlbnRdID0gdXNlQXBpPG51bGwsIERlbGV0ZUV2ZW50UmVzdWx0PihbXSwgKCk9PntcbiAgICBzZXRFZGl0aW5nKGZhbHNlKVxuICAgIHByb3BzLm11dGF0ZURlbGV0ZSgpXG4gIH0pXG5cbiAgY29uc3Qgb25TdWJtaXQgPSAoZTogUmVhY3QuRm9ybUV2ZW50KT0+e1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGxldCBldmVudCA9IHN0YXRlXG5cbiAgICBsZXQgZDEgPSBldmVudC5zdGFydF9kYXRlLnNwbGl0KCctJykubWFwKHg9PnBhcnNlSW50KHgpKVxuICAgIGxldCB0MSA9IGV2ZW50LnN0YXJ0X3RpbWUuc3BsaXQoJzonKS5tYXAoeD0+cGFyc2VJbnQoeCkpXG4gICAgbGV0IHQyID0gZXZlbnQuZW5kX3RpbWUuc3BsaXQoJzonKS5tYXAoeD0+cGFyc2VJbnQoeCkpXG4gICAgbGV0IHN0YXJ0X2RhdGUgPSBuZXcgRGF0ZShkMVswXSwgZDFbMV0gLTEsIGQxWzJdLCB0MVswXSwgdDFbMV0pXG4gICAgbGV0IGVuZF9kYXRlID0gbmV3IERhdGUoZDFbMF0sIGQxWzFdIC0gMSwgZDFbMl0sIHQyWzBdLCB0MlsxXSlcblxuICAgIGNhbGxVcGRhdGVFdmVudCgnL2FwaS9ldmVudHMvJytwcm9wcy5ldmVudC5ldmVudHMuaWQsIHtcbiAgICAgIHR5cGU6ICdjb2hvcnQnLFxuICAgICAgY29ob3J0OiBwcm9wcy5jb2hvcnQsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IGV2ZW50Lm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBldmVudC5kZXNjcmlwdGlvbixcbiAgICAgICAgbG9jYXRpb246IGV2ZW50LmxvY2F0aW9uLFxuICAgICAgICBzdGFydF9kYXRlOiBzdGFydF9kYXRlLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGVuZF9kYXRlOiBlbmRfZGF0ZS50b0lTT1N0cmluZygpLFxuICAgICAgICBwZW9wbGU6IGV2ZW50LnBlb3BsZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gaChFdmVudENvbnRhaW5lciwge2xhc3Q6IHByb3BzLmxhc3QsIHNlbGVjdGVkOiBleHBhbmRlZH0sIFtcbiAgICBoKERvdCwge3NlbGVjdGVkOiBleHBhbmRlZCwgb25DbGljazogKCk9PnNldEV4cGFuZGVkKGV2ZW50LmV2ZW50cy5kZXNjcmlwdGlvbiA9PT0gJycgPyBmYWxzZSA6ICFleHBhbmRlZCksIHBhc3R9KSxcbiAgICBlZGl0dGluZ1xuICAgICAgPyBoKEZvcm1Cb3gsIHtvblN1Ym1pdH0sIFtcbiAgICAgIGgoRXZlbnRGb3JtLCB7b25DaGFuZ2U6IHNldFN0YXRlLCBzdGF0ZSwgcGVvcGxlOiBwcm9wcy5wZW9wbGV9KSxcbiAgICAgIGgoQm94LCB7aDogdHJ1ZSwgc3R5bGU6e2p1c3RpZnlTZWxmOiBcInJpZ2h0XCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCJ9fSwgW1xuICAgICAgICBoKExpbmtCdXR0b24sIHt0ZXh0U2Vjb25kYXJ5OiB0cnVlLCBvbkNsaWNrOiAoKT0+c2V0RWRpdGluZyhmYWxzZSl9LCBcImNhbmNlbFwiKSxcbiAgICAgICAgaChEZXN0cnVjdGl2ZSwge3N0YXR1czogZGVsZXRlU3RhdHVzLCBvbkNsaWNrOiAoZSk9PntcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBjYWxsRGVsZXRlRXZlbnQoJy9hcGkvZXZlbnRzLycrcHJvcHMuZXZlbnQuZXZlbnRzLmlkLCBudWxsLCBcIkRFTEVURVwiKVxuICAgICAgICB9fSwgXCJEZWxldGUgRXZlbnRcIiksXG4gICAgICAgIGgoUHJpbWFyeSwge3R5cGU6ICdzdWJtaXQnLCBzdGF0dXN9LCBcIlNhdmUgQ2hhbmdlc1wiKVxuICAgICAgXSlcbiAgICBdKVxuICAgICAgOiBoKEJveCwgW1xuICAgICAgICBoKEJveCwgW1xuICAgICAgICAgIGgoQm94LCB7Z2FwOiA4fSwgW1xuICAgICAgICAgICAgaCgncC50ZXh0U2Vjb25kYXJ5Jywge3N0eWxlOiB7Y29sb3I6IHBhc3QgPyBjb2xvcnMuZ3JleTU1IDogdW5kZWZpbmVkfX0sIFtcbiAgICAgICAgICAgICAgaCgnYicsIHtzdHlsZTp7Zm9udFdlaWdodDpcIjkwMFwifX0sIHN0YXJ0X2RhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKFtdLCB7d2Vla2RheTogJ3Nob3J0JywgbW9udGg6IFwic2hvcnRcIiwgZGF5OiBcIm51bWVyaWNcIn0pLnRvVXBwZXJDYXNlKCkpLFxuICAgICAgICAgICAgICAnICcgKyBzdGFydF9kYXRlLnRvTG9jYWxlVGltZVN0cmluZyhbXSwge2hvdXI6IFwibnVtZXJpY1wiLCBtaW51dGU6IFwiMi1kaWdpdFwiLCBob3VyMTI6IHRydWUsIHRpbWVab25lTmFtZTogJ3Nob3J0J30pICtcbiAgICAgICAgICAgICAgICBgIHwgYCArIGdldFRpbWVCZXR3ZWVuKHN0YXJ0X2RhdGUsIGVuZF9kYXRlKSArICcgaHJzICcsXG4gICAgICAgICAgICAgICgoKT0+e1xuICAgICAgICAgICAgICAgIGlmKGV2ZW50LmV2ZXJ5b25lKSByZXR1cm4gbnVsbFxuICAgICAgICAgICAgICAgIHN3aXRjaChldmVudC5ldmVudHMucGVvcGxlX2luX2V2ZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIGgoUGlsbCwge3N0eWxlOnthbGlnblNlbGY6XCJjZW50ZXJcIn19LCBcIlNvbG9cIilcbiAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIGgoUGlsbCwge3N0eWxlOnthbGlnblNlbGY6XCJjZW50ZXJcIn19LCBcIjE6MVwiKVxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGgoUGlsbCwge3N0eWxlOnthbGlnblNlbGY6XCJjZW50ZXJcIn19LCBcIkdyb3VwXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSgpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGgoQm94LCB7aDogdHJ1ZSwgc3R5bGU6e2dyaWRUZW1wbGF0ZUNvbHVtbnM6XCJhdXRvIGF1dG8gbWluLWNvbnRlbnRcIn19LCBbXG4gICAgICAgICAgICAgIGgoRXZlbnRUaXRsZSwge3Bhc3QsIG9uQ2xpY2s6ICgpPT5zZXRFeHBhbmRlZCghZXhwYW5kZWQpfSwgW1xuICAgICAgICAgICAgICAgIGV2ZW50LmV2ZW50cy5uYW1lXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBwcm9wcy5mYWNpbGl0YXRpbmcgfHwgcHJvcHMudXNlciA9PT0gZXZlbnQuZXZlbnRzLmNyZWF0ZWRfYnkgPyBoKEljb25CdXR0b24sIHtcbiAgICAgICAgICAgICAgICBzdHlsZToge2FsaWduU2VsZjogJ2Jhc2VsaW5lJywganVzdGlmeVNlbGY6ICdyaWdodCd9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpPT5zZXRFZGl0aW5nKHRydWUpXG4gICAgICAgICAgICAgIH0sIFBlbmNpbCkgOiBudWxsXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBldmVudC5ldmVudHMubG9jYXRpb24gJiYgZXhwYW5kZWQgPyBoKCdhJywge2hyZWY6IGV2ZW50LmV2ZW50cy5sb2NhdGlvbn0sIGgoUHJpbWFyeSwgIFwiSm9pbiBFdmVudFwiKSkgOiBudWxsLFxuICAgICAgICBdKSxcbiAgICAgICAgIWV4cGFuZGVkIHx8IGV2ZW50LmV2ZW50cy5kZXNjcmlwdGlvbiA9PT0gJycgPyBudWxsXG4gICAgICAgICAgOiBoKEJveCwgW1xuICAgICAgICAgICAgaCgnZGl2Jywge1xuICAgICAgICAgICAgICBzdHlsZToge3BhZGRpbmc6ICczMnB4JywgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLCBib3JkZXI6ICdkb3R0ZWQgMXB4Jywgb3ZlcmZsb3c6J2F1dG8nLCBvdmVyZmxvd1dyYXA6IFwiYnJlYWstd29yZFwifX0sIGgoVGV4dCwge3NvdXJjZTogZXZlbnQuZXZlbnRzLmRlc2NyaXB0aW9ufSkpLFxuICAgICAgICAgICAgZXZlbnQuZXZlbnRzLnBlb3BsZV9pbl9ldmVudHMubGVuZ3RoID09PSAwID8gbnVsbCA6IGgoJ3AudGV4dFNlY29uZGFyeScsIFtoKCdiJywgJ0F0dGVuZGVlczogJyksIGV2ZW50LmV2ZW50cy5wZW9wbGVfaW5fZXZlbnRzLm1hcChwPT5wLnBlb3BsZS5kaXNwbGF5X25hbWUgfHwgcC5wZW9wbGUudXNlcm5hbWUpLmpvaW4oJywgJyldKVxuICAgICAgICAgIF0pXG4gICAgICBdKVxuICBdKVxufVxuXG5jb25zdCBEb3QgPSBzdHlsZWQoJ2RpdicpPHtzZWxlY3RlZDogYm9vbGVhbiwgcGFzdDogYm9vbGVhbn0+YFxuJHtwID0+IHtcbmxldCBzaXplID0gcC5zZWxlY3RlZCA/IDI0IDogMTZcbnJldHVybiBgXG53aWR0aDogJHtzaXplfXB4O1xuaGVpZ2h0OiAke3NpemV9cHg7XG5tYXJnaW4tcmlnaHQ6ICR7cC5zZWxlY3RlZCA/IDMyIDogMzR9cHg7XG5gfX1cbmJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5ib3JkZXI6IDRweCBzb2xpZDtcbmJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuYm9yZGVyLXJhZGl1czogNTAlO1xuXG4ke3A9PnAucGFzdCA/IGBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5ncmV5ODB9O2AgOiAnJ31cblxuJjpob3ZlciB7XG5jdXJzb3I6IHBvaW50ZXI7XG59XG5gXG5cbmNvbnN0IEV2ZW50VGl0bGUgPSBzdHlsZWQoJ2gzJyk8e3Bhc3Q6IGJvb2xlYW59PmBcbiR7cD0+cC5wYXN0ID8gYGNvbG9yOiAke2NvbG9ycy50ZXh0U2Vjb25kYXJ5fTtgIDogJyd9XG4mOmhvdmVyIHtcbmN1cnNvcjogcG9pbnRlcjtcbn1cbmBcbmNvbnN0IFRpbWVsaW5lQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKWBcbmRpc3BsYXk6IGdyaWQ7XG5ncmlkLWdhcDogMzJweDtcbmJvcmRlci1sZWZ0OiA0cHggc29saWQ7XG5wYWRkaW5nLWxlZnQ6IDMycHg7XG5gXG5cbmNvbnN0IEV2ZW50Q29udGFpbmVyID0gc3R5bGVkKCdkaXYnKTx7bGFzdD86IGJvb2xlYW4sIHNlbGVjdGVkOiBib29sZWFufT5gXG5ib3gtc2l6aW5nOiBib3JkZXItYm94O1xubWFyZ2luLWxlZnQ6IC0ke3A9PnAuc2VsZWN0ZWQgPyA0NiA6IDQyfXB4O1xuZGlzcGxheTogZ3JpZDtcbmdyaWQtdGVtcGxhdGUtY29sdW1uczogbWluLWNvbnRlbnQgYXV0bztcbm1heC13aWR0aDogMTAyNHB4O1xuJHtwPT5wLmxhc3QgPyBgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuYXBwQmFja2dyb3VuZH07YCA6ICcnfVxuYFxuIl19 */\"));\n\nconst EventTitle = /*#__PURE__*/_styled('h3', {\n  target: \"e1h6j2wc1\"\n})(p => p.past ? `color: ${colors.textSecondary};` : '', \" &:hover{cursor:pointer;}\" + (true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\nconst TimelineContainer = /*#__PURE__*/_styled('div', {\n  target: \"e1h6j2wc2\"\n})(true ? {\n  name: \"1erdf7f\",\n  styles: \"display:grid;grid-gap:32px;border-left:4px solid;padding-left:32px;\"\n} : {\n  name: \"1erdf7f\",\n  styles: \"display:grid;grid-gap:32px;border-left:4px solid;padding-left:32px;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\nconst EventContainer = /*#__PURE__*/_styled('div', {\n  target: \"e1h6j2wc3\"\n})(\"box-sizing:border-box;margin-left:-\", p => p.selected ? 46 : 42, \"px;display:grid;grid-template-columns:min-content auto;max-width:1024px;\", p => p.last ? `background-color: ${colors.appBackground};` : '', true ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/components/pages/cohorts/Events.ts"],"names":["h","getTimeBetween","useState","Box","FormBox","Link","colors","Calendar","Pencil","EventForm","SmallLinkButton","LinkButton","Primary","IconButton","Destructive","useApi","Text","useUserData","Pill","useFormData","CohortEvents","props","data","user","pastEvents","events","filter","event","Date","end_date","showPastEvents","setShowPastEvents","length","displayedEvents","sort","a","b","start_date","gap","style","gridTemplateColumns","gridGap","textSecondary","onClick","showCal","href","justifySelf","textAlign","TimelineContainer","map","index","Event","id","undefined","inCohort","key","facilitating","people","cohort","mutate","newEvent","slice","mutateDelete","splice","first","last","editting","setEditing","expanded","setExpanded","past","state","setState","everyone","name","location","description","getFullYear","getMonth","getDate","start_time","toLocaleTimeString","hour","minute","hour12","end_time","people_in_events","p","username","status","callUpdateEvent","type","deleteStatus","callDeleteEvent","onSubmit","e","preventDefault","d1","split","x","parseInt","t1","t2","toISOString","EventContainer","selected","Dot","onChange","alignItems","color","grey55","fontWeight","toLocaleDateString","weekday","month","day","toUpperCase","timeZoneName","alignSelf","EventTitle","created_by","padding","backgroundColor","border","overflow","overflowWrap","source","display_name","join","size","grey80","appBackground"],"mappings":"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","sourcesContent":["import h from 'react-hyperscript'\nimport { getTimeBetween } from 'src/utils'\nimport { useState } from 'react'\nimport { Box, FormBox } from 'components/Layout'\nimport styled from '@emotion/styled'\nimport Link from 'next/link'\nimport { colors } from 'components/Tokens'\nimport {Calendar, Pencil} from 'components/Icons'\nimport { EventForm } from './CreateEvent'\nimport { SmallLinkButton, LinkButton, Primary, IconButton, Destructive } from 'components/Button'\nimport { useApi } from 'src/apiHelpers'\nimport { UpdateEventMsg, UpdateEventResult, DeleteEventResult } from 'pages/api/events/[id]'\nimport Text from 'components/Text'\nimport { Cohort, useUserData } from 'src/data'\nimport { Pill } from 'components/Pill'\nimport { useFormData } from 'src/hooks'\n\nexport const CohortEvents = (props: {\n  facilitating: boolean,\n  inCohort: boolean,\n  cohort: number,\n  people: string[],\n  events:Cohort[\"cohort_events\"],\n  mutate: (E:Cohort[\"cohort_events\"])=>void,\n  showCal: boolean,\n})=>{\n  let {data:user} = useUserData()\n  let pastEvents = props.events.filter((event)=>new Date() > new Date(event.events.end_date))\n  let [showPastEvents, setShowPastEvents] = useState(pastEvents.length === props.events.length)\n\n  let displayedEvents = props.events\n        .filter((event)=>showPastEvents ? true : new Date() < new Date(event.events.end_date) )\n        .sort((a, b) => new Date(a.events.start_date) > new Date(b.events.start_date) ? 1 : -1)\n  return h(Box, [\n    // (inCohort || isFacilitator) && cohort.cohort_events.length > 0 ? h(Link, {href: \"/calendar\"}, \n    h(Box, {h:true, gap:0, style: {gridTemplateColumns: 'auto min-content', gridGap:0}}, [\n\n      pastEvents.length === 0 ? null : h(SmallLinkButton, {textSecondary: true, onClick: ()=>{\n        setShowPastEvents(!showPastEvents)\n      }}, showPastEvents ? \"hide past events\" : \"show past events\"),\n      !props.showCal ? null :\n        h(Link, {href: \"/calendar\"}, h(SmallLinkButton, {textSecondary: true, style:{justifySelf: 'end'}},\n        h(Box, {h:true, gap:8, style:{textAlign:'right'}}, ['add to your calendar ', Calendar]),\n      ))\n\n    ]),\n\n    h(TimelineContainer, {},\n      displayedEvents\n        .map((event,index) => h(Event, {\n          user: user ? user.id : undefined,\n          inCohort: props.inCohort,\n          key: event.events.id,\n          facilitating: props.facilitating,\n          event,\n          people: props.people,\n          cohort: props.cohort,\n          mutate: (newEvent) => {\n            let events = props.events.slice(0)\n            events[index] === newEvent\n            return props.mutate(events)\n          },\n          mutateDelete: ()=>{\n            let events = props.events.slice(0)\n            events.splice(index, 1)\n            return props.mutate(events)\n          },\n          first: showPastEvents ? index === pastEvents.length : index === 0,\n          last: index === displayedEvents.length -1,\n        }))\n     )\n  ])\n\n}\n\nconst Event = (props: {\n  event:Cohort[\"cohort_events\"][0],\n  user?: string,\n  facilitating: boolean\n  inCohort: boolean\n  people: string[]\n  cohort: number,\n  last: boolean,\n  first: boolean,\n  mutate: (e:Cohort[\"cohort_events\"][0])=>void,\n  mutateDelete: ()=>void,\n})=>{\n  let [editting, setEditing] = useState(false)\n  let [expanded, setExpanded] = useState(props.first)\n  let event = props.event\n  let start_date = new Date(event.events.start_date)\n  let end_date = new Date(event.events.end_date)\n  let past = end_date < new Date()\n\n  let {state, setState} = useFormData({\n    everyone: !event.everyone,\n    name: event.events.name,\n    location: event.events.location,\n    description: event.events.description,\n    start_date: `${start_date.getFullYear()}-${('0'+(start_date.getMonth()+1)).slice(-2)}-${('0'+start_date.getDate()).slice(-2)}`,\n    start_time: start_date.toLocaleTimeString([], {hour:\"2-digit\", minute: \"2-digit\", hour12: false}),\n    end_time: end_date.toLocaleTimeString([], {hour:\"2-digit\", minute: \"2-digit\", hour12: false}),\n    people: event.events.people_in_events.map(p=>p.people.username)\n  }, [event])\n\n  let[status, callUpdateEvent] = useApi<UpdateEventMsg, UpdateEventResult>([props], async (event)=>{\n    if(event.type === 'cohort') props.mutate(event.data)\n    setEditing(false)\n  })\n\n  let [deleteStatus, callDeleteEvent] = useApi<null, DeleteEventResult>([], ()=>{\n    setEditing(false)\n    props.mutateDelete()\n  })\n\n  const onSubmit = (e: React.FormEvent)=>{\n    e.preventDefault()\n    let event = state\n\n    let d1 = event.start_date.split('-').map(x=>parseInt(x))\n    let t1 = event.start_time.split(':').map(x=>parseInt(x))\n    let t2 = event.end_time.split(':').map(x=>parseInt(x))\n    let start_date = new Date(d1[0], d1[1] -1, d1[2], t1[0], t1[1])\n    let end_date = new Date(d1[0], d1[1] - 1, d1[2], t2[0], t2[1])\n\n    callUpdateEvent('/api/events/'+props.event.events.id, {\n      type: 'cohort',\n      cohort: props.cohort,\n      data: {\n        name: event.name,\n        description: event.description,\n        location: event.location,\n        start_date: start_date.toISOString(),\n        end_date: end_date.toISOString(),\n        people: event.people\n      }\n    })\n  }\n\n  return h(EventContainer, {last: props.last, selected: expanded}, [\n    h(Dot, {selected: expanded, onClick: ()=>setExpanded(event.events.description === '' ? false : !expanded), past}),\n    editting\n      ? h(FormBox, {onSubmit}, [\n      h(EventForm, {onChange: setState, state, people: props.people}),\n      h(Box, {h: true, style:{justifySelf: \"right\", alignItems: \"center\"}}, [\n        h(LinkButton, {textSecondary: true, onClick: ()=>setEditing(false)}, \"cancel\"),\n        h(Destructive, {status: deleteStatus, onClick: (e)=>{\n          e.preventDefault()\n          callDeleteEvent('/api/events/'+props.event.events.id, null, \"DELETE\")\n        }}, \"Delete Event\"),\n        h(Primary, {type: 'submit', status}, \"Save Changes\")\n      ])\n    ])\n      : h(Box, [\n        h(Box, [\n          h(Box, {gap: 8}, [\n            h('p.textSecondary', {style: {color: past ? colors.grey55 : undefined}}, [\n              h('b', {style:{fontWeight:\"900\"}}, start_date.toLocaleDateString([], {weekday: 'short', month: \"short\", day: \"numeric\"}).toUpperCase()),\n              ' ' + start_date.toLocaleTimeString([], {hour: \"numeric\", minute: \"2-digit\", hour12: true, timeZoneName: 'short'}) +\n                ` | ` + getTimeBetween(start_date, end_date) + ' hrs ',\n              (()=>{\n                if(event.everyone) return null\n                switch(event.events.people_in_events.length) {\n                  case 1: return h(Pill, {style:{alignSelf:\"center\"}}, \"Solo\")\n                  case 2: return h(Pill, {style:{alignSelf:\"center\"}}, \"1:1\")\n                  default: return h(Pill, {style:{alignSelf:\"center\"}}, \"Group\")\n                }\n              })()\n            ]),\n            h(Box, {h: true, style:{gridTemplateColumns:\"auto auto min-content\"}}, [\n              h(EventTitle, {past, onClick: ()=>setExpanded(!expanded)}, [\n                event.events.name\n              ]),\n              props.facilitating || props.user === event.events.created_by ? h(IconButton, {\n                style: {alignSelf: 'baseline', justifySelf: 'right'},\n                onClick: ()=>setEditing(true)\n              }, Pencil) : null\n            ]),\n          ]),\n          event.events.location && expanded ? h('a', {href: event.events.location}, h(Primary,  \"Join Event\")) : null,\n        ]),\n        !expanded || event.events.description === '' ? null\n          : h(Box, [\n            h('div', {\n              style: {padding: '32px', backgroundColor: 'white', border: 'dotted 1px', overflow:'auto', overflowWrap: \"break-word\"}}, h(Text, {source: event.events.description})),\n            event.events.people_in_events.length === 0 ? null : h('p.textSecondary', [h('b', 'Attendees: '), event.events.people_in_events.map(p=>p.people.display_name || p.people.username).join(', ')])\n          ])\n      ])\n  ])\n}\n\nconst Dot = styled('div')<{selected: boolean, past: boolean}>`\n${p => {\nlet size = p.selected ? 24 : 16\nreturn `\nwidth: ${size}px;\nheight: ${size}px;\nmargin-right: ${p.selected ? 32 : 34}px;\n`}}\nbox-sizing: border-box;\nborder: 4px solid;\nbackground-color: white;\nborder-radius: 50%;\n\n${p=>p.past ? `background-color: ${colors.grey80};` : ''}\n\n&:hover {\ncursor: pointer;\n}\n`\n\nconst EventTitle = styled('h3')<{past: boolean}>`\n${p=>p.past ? `color: ${colors.textSecondary};` : ''}\n&:hover {\ncursor: pointer;\n}\n`\nconst TimelineContainer = styled('div')`\ndisplay: grid;\ngrid-gap: 32px;\nborder-left: 4px solid;\npadding-left: 32px;\n`\n\nconst EventContainer = styled('div')<{last?: boolean, selected: boolean}>`\nbox-sizing: border-box;\nmargin-left: -${p=>p.selected ? 46 : 42}px;\ndisplay: grid;\ngrid-template-columns: min-content auto;\nmax-width: 1024px;\n${p=>p.last ? `background-color: ${colors.appBackground};` : ''}\n`\n"]},"metadata":{},"sourceType":"module"}