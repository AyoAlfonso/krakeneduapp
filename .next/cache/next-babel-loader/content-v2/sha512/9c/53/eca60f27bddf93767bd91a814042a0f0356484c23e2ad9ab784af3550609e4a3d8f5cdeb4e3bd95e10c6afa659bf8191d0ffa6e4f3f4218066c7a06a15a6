{"ast":null,"code":"import { APIHandler } from 'src/apiHelpers';\nimport { getToken } from 'src/token';\nimport prisma from \"lib/prisma\";\nexport default APIHandler({\n  GET: getTemplates,\n  POST: createTemplate\n});\n\nasync function createTemplate(req) {\n  let msg = req.body;\n  let user = getToken(req);\n  if (!msg.name || !msg.title || !msg.content || msg.type !== 'prepopulated' && msg.type !== 'triggered') return {\n    status: 400,\n    result: \"ERROR: Invalid message\"\n  };\n  let courseID = parseInt(req.query.id);\n  if (Number.isNaN(courseID)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let course = await prisma.courses.findUnique({\n    where: {\n      id: courseID\n    },\n    select: {\n      course_maintainers: true\n    }\n  });\n  if (!course) return {\n    status: 404,\n    result: \"ERROR: course \" + courseID + \" not found\"\n  };\n  if (!course.course_maintainers.find(x => user && x.maintainer === user.id)) return {\n    status: 401,\n    result: \"ERROR: User is not maintainer of course\"\n  };\n  let template = await prisma.course_templates.create({\n    data: {\n      name: msg.name,\n      title: msg.title,\n      content: msg.content,\n      type: msg.type,\n      courses: {\n        connect: {\n          id: courseID\n        }\n      }\n    }\n  });\n  return {\n    status: 200,\n    result: template\n  };\n}\n\nexport const getTemplatesQuery = courseId => prisma.course_templates.findMany({\n  where: {\n    course: courseId\n  }\n});\n\nasync function getTemplates(req) {\n  let courseID = parseInt(req.query.id);\n  if (Number.isNaN(courseID)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let user = getToken(req);\n  if (!user) return {\n    status: 400,\n    result: \"ERROR: No user logged in!\"\n  };\n  let course = await prisma.courses.findUnique({\n    where: {\n      id: courseID\n    },\n    select: {\n      course_templates: true,\n      course_maintainers: true\n    }\n  });\n  if (!course) return {\n    status: 404,\n    result: \"ERROR: course \" + courseID + \" not found\"\n  };\n  if (!course.course_maintainers.find(x => user && x.maintainer === user.id)) return {\n    status: 401,\n    result: \"ERROR: User is not maintainer of course\"\n  };\n  return {\n    status: 200,\n    result: course.course_templates\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/templates/index.ts"],"names":["APIHandler","getToken","prisma","GET","getTemplates","POST","createTemplate","req","msg","body","user","name","title","content","type","status","result","courseID","parseInt","query","id","Number","isNaN","course","courses","findUnique","where","select","course_maintainers","find","x","maintainer","template","course_templates","create","data","connect","getTemplatesQuery","courseId","findMany"],"mappings":"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","sourcesContent":["import { ResultType, APIHandler, Request} from 'src/apiHelpers'\nimport { getToken } from 'src/token'\nimport prisma from \"lib/prisma\";\n\nexport type CreateTemplateMsg = {\n  name: string,\n  title: string,\n  content: string,\n  type: \"prepopulated\" | 'triggered'\n}\nexport type CreateTemplateResult = ResultType<typeof createTemplate>\nexport type GetTemplatesResult = ResultType<typeof getTemplates>\nexport default APIHandler({GET: getTemplates, POST: createTemplate})\n\nasync function createTemplate(req:Request) {\n  let msg = req.body as Partial<CreateTemplateMsg>\n  let user = getToken(req)\n  if(!msg.name || !msg.title || !msg.content || (msg.type !== 'prepopulated' && msg.type !== 'triggered')) return {status: 400, result: \"ERROR: Invalid message\"} as const\n\n  let courseID = parseInt(req.query.id as string)\n  if(Number.isNaN(courseID)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n\n  let course = await prisma.courses.findUnique({where: {id: courseID}, select: {\n    course_maintainers: true,\n  }})\n  if(!course) return {status:404, result: \"ERROR: course \" + courseID + \" not found\"} as const\n  if(!course.course_maintainers.find(x=>user && x.maintainer === user.id)) return {status: 401, result: \"ERROR: User is not maintainer of course\"} as const\n\n  let template = await prisma.course_templates.create({\n    data: {\n      name: msg.name,\n      title: msg.title,\n      content: msg.content,\n      type: msg.type,\n      courses: {\n        connect: {\n          id: courseID\n        }\n      }\n    }\n  })\n\n  return {status: 200, result: template} as const\n}\n\nexport const getTemplatesQuery = (courseId:number) => prisma.course_templates.findMany({where: {course: courseId}})\n\nasync function getTemplates(req:Request) {\n  let courseID = parseInt(req.query.id as string)\n  if(Number.isNaN(courseID)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n\n  let user = getToken(req)\n  if(!user) return {status:400, result: \"ERROR: No user logged in!\"} as const\n  let course = await prisma.courses.findUnique({where: {id: courseID}, select: {\n    course_templates: true,\n    course_maintainers: true,\n  }})\n\n  if(!course) return {status:404, result: \"ERROR: course \" + courseID + \" not found\"} as const\n  if(!course.course_maintainers.find(x=>user && x.maintainer === user.id)) return {status: 401, result: \"ERROR: User is not maintainer of course\"} as const\n  return {status:200, result: course.course_templates} as const\n}\n"]},"metadata":{},"sourceType":"module"}