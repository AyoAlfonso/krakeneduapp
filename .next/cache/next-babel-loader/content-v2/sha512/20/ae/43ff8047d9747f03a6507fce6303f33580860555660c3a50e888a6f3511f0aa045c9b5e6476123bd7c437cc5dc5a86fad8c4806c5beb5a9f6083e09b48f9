{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ICAL from 'ical.js';\nimport prisma from \"lib/prisma\";\nexport default async function getUserEvents(req, res) {\n  let calendar_ID = req.query.id;\n  let calendar = new ICAL.Component(['vcalendar', [], []]);\n  calendar.updatePropertyWithValue('version', '2.0');\n  calendar.updatePropertyWithValue('prodid', `${window.location.origin}`);\n  calendar.updatePropertyWithValue('method', \"PUBLISH\");\n  calendar.updatePropertyWithValue('name', 'KrakenEdu Calendar');\n  calendar.updatePropertyWithValue('x-wr-calname', 'KrakenEdu Calendar');\n  let [user_cohorts, facilitator_cohorts, standalone] = await Promise.all([prisma.people_in_cohorts.findMany({\n    where: {\n      people: {\n        calendar_id: calendar_ID\n      },\n      course_cohorts: {\n        live: true\n      }\n    },\n    select: {\n      course_cohorts: {\n        select: {\n          id: true,\n          courses: {\n            select: {\n              name: true\n            }\n          },\n          cohort_events: {\n            where: {\n              OR: [{\n                everyone: true\n              }, {\n                events: {\n                  people: {\n                    calendar_id: calendar_ID\n                  }\n                }\n              }, {\n                events: {\n                  people_in_events: {\n                    some: {\n                      people: {\n                        calendar_id: calendar_ID\n                      }\n                    }\n                  }\n                }\n              }]\n            },\n            select: {\n              events: true\n            }\n          }\n        }\n      }\n    }\n  }), prisma.course_cohorts.findMany({\n    where: {\n      live: true,\n      people: {\n        calendar_id: calendar_ID\n      }\n    },\n    select: {\n      id: true,\n      courses: {\n        select: {\n          name: true\n        }\n      },\n      cohort_events: {\n        select: {\n          events: true\n        }\n      }\n    }\n  }), prisma.standalone_events.findMany({\n    select: {\n      events: true\n    },\n    where: {\n      OR: [{\n        events: {\n          people_in_events: {\n            some: {\n              people: {\n                calendar_id: calendar_ID\n              }\n            }\n          }\n        }\n      }, {\n        events: {\n          people: {\n            calendar_id: calendar_ID\n          }\n        }\n      }]\n    }\n  })]);\n  let enrolled_events = user_cohorts.flatMap(cohort => {\n    let course = cohort.course_cohorts.courses.name;\n    let cohort_id = cohort.course_cohorts.id;\n    return cohort.course_cohorts.cohort_events.map(ev => {\n      return _objectSpread(_objectSpread({}, ev.events), {}, {\n        course,\n        cohort_id\n      });\n    });\n  });\n  let facilitating_events = facilitator_cohorts.flatMap(cohort => {\n    let course = cohort.courses.name;\n    let cohort_id = cohort.id;\n    return cohort.cohort_events.map(ev => {\n      return _objectSpread(_objectSpread({}, ev.events), {}, {\n        course,\n        cohort_id\n      });\n    });\n  });\n  let standalone_events = standalone.map(ev => {\n    return ev.events;\n  });\n  let events = standalone_events.concat(enrolled_events).concat(facilitating_events);\n\n  for (let event of events) {\n    let vevent = new ICAL.Component('vevent');\n    let calEvent = new ICAL.Event(vevent);\n    calEvent.uid = 'krakenedu-' + event.id;\n    calEvent.description = event.description;\n    calEvent.summary = event.course ? event.course + ' - ' + event.name : event.name;\n    calEvent.location = event.location;\n    calEvent.startDate = ICAL.Time.fromJSDate(new Date(event.start_date), true);\n    calEvent.endDate = ICAL.Time.fromJSDate(new Date(event.end_date), true);\n    calendar.addSubcomponent(vevent);\n  }\n\n  res.setHeader('Content-type', \"text/calendar\");\n  res.send(calendar.toString());\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/user_calendar.ts"],"names":["ICAL","prisma","getUserEvents","req","res","calendar_ID","query","id","calendar","Component","updatePropertyWithValue","window","location","origin","user_cohorts","facilitator_cohorts","standalone","Promise","all","people_in_cohorts","findMany","where","people","calendar_id","course_cohorts","live","select","courses","name","cohort_events","OR","everyone","events","people_in_events","some","standalone_events","enrolled_events","flatMap","cohort","course","cohort_id","map","ev","facilitating_events","concat","event","vevent","calEvent","Event","uid","description","summary","startDate","Time","fromJSDate","Date","start_date","endDate","end_date","addSubcomponent","setHeader","send","toString"],"mappings":"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","sourcesContent":["import { events } from \"@prisma/client\";\nimport ICAL from 'ical.js'\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport prisma from \"lib/prisma\";\n\nexport default async function getUserEvents(req: NextApiRequest, res: NextApiResponse) {\n  let calendar_ID = req.query.id as string\n  let calendar = new ICAL.Component(['vcalendar',[],[]])\n  calendar.updatePropertyWithValue('version', '2.0');\n  calendar.updatePropertyWithValue('prodid', `${window.location.origin}`);\n  calendar.updatePropertyWithValue('method', \"PUBLISH\")\n  calendar.updatePropertyWithValue('name', 'KrakenEdu Calendar')\n  calendar.updatePropertyWithValue('x-wr-calname', 'KrakenEdu Calendar')\n\n  let [user_cohorts, facilitator_cohorts, standalone] = await Promise.all([\n    prisma.people_in_cohorts.findMany({\n      where: {\n        people: {calendar_id: calendar_ID},\n        course_cohorts: {live: true}\n      },\n      select: {\n        course_cohorts: {\n          select: {\n            id: true,\n            courses: {\n              select: {\n                name: true\n              }\n            },\n            cohort_events: {\n              where:{\n                OR:[\n                  {everyone: true},\n                  {events:{people:{calendar_id:calendar_ID}}},\n                  {events:{people_in_events:{some:{people:{calendar_id: calendar_ID}}}}}\n                ]\n              },\n              select: {\n                events: true\n              }\n            }\n          }\n        }\n      }\n    }),\n    prisma.course_cohorts.findMany({\n      where:{\n        live: true,\n        people:{\n          calendar_id: calendar_ID\n        }\n      },\n      select: {\n        id: true,\n        courses: {\n          select: {\n            name: true\n          }\n        },\n        cohort_events: {\n          select: {\n            events: true\n          }\n        }\n      }\n    }),\n    prisma.standalone_events.findMany({\n      select: {\n        events: true\n      },\n      where: {\n        OR:[\n          {\n            events: {people_in_events: {some: {people:{calendar_id: calendar_ID}}}}\n          },\n          {\n            events:{people:{calendar_id: calendar_ID}}\n          }\n        ]\n      }\n    })\n  ])\n\n  let enrolled_events = user_cohorts.flatMap(cohort => {\n    let course = cohort.course_cohorts.courses.name\n    let cohort_id = cohort.course_cohorts.id\n    return cohort.course_cohorts.cohort_events.map(ev => {return {...ev.events, course, cohort_id}})\n  })\n  let facilitating_events = facilitator_cohorts.flatMap(cohort=>{\n    let course = cohort.courses.name\n    let cohort_id = cohort.id\n    return cohort.cohort_events.map(ev => {return {...ev.events, course, cohort_id}})\n  })\n\n  let standalone_events = standalone.map(ev=>{\n    return ev.events\n  })\n\n  let events:Array<events & Partial<{course: string, cohort_id: number}>> = standalone_events.concat(enrolled_events).concat(facilitating_events)\n\n  for(let event of events) {\n    let vevent = new ICAL.Component('vevent')\n    let calEvent = new ICAL.Event(vevent)\n    calEvent.uid = 'krakenedu-'+event.id\n    calEvent.description = event.description\n    calEvent.summary = event.course ? (event.course + ' - ' + event.name) : event.name\n    calEvent.location = event.location\n    calEvent.startDate = ICAL.Time.fromJSDate(new Date(event.start_date), true)\n    calEvent.endDate = ICAL.Time.fromJSDate(new Date(event.end_date), true)\n\n    calendar.addSubcomponent(vevent)\n  }\n\n  res.setHeader('Content-type', \"text/calendar\")\n  res.send(calendar.toString())\n}\n"]},"metadata":{},"sourceType":"module"}