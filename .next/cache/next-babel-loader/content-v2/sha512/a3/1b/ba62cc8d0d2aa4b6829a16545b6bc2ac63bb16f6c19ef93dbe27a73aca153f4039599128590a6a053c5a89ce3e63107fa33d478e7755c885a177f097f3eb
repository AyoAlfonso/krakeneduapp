{"ast":null,"code":"import { APIHandler } from \"../../../../src/apiHelpers\";\nimport { getToken } from \"src/token\";\nimport prisma from \"lib/prisma\";\nexport default APIHandler(watchCourse);\n\nasync function watchCourse(req) {\n  let msg = req.body;\n  let courseId = parseInt(req.query.id);\n  if (typeof msg.watching !== 'boolean') return {\n    status: 400,\n    result: \"ERROR: no watching property on request\"\n  };\n  if (Number.isNaN(courseId)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let user = getToken(req);\n  let email;\n\n  if (!user) {\n    if (!msg.email) return {\n      status: 400,\n      result: \"ERROR: No user logged in and no email provided\"\n    };\n    email = msg.email;\n  } else email = user.email;\n\n  if (msg.watching === true) {\n    await prisma.watching_courses.upsert({\n      where: {\n        email_course: {\n          course: courseId,\n          email\n        }\n      },\n      create: {\n        courses: {\n          connect: {\n            id: courseId\n          }\n        },\n        email\n      },\n      update: {\n        courses: {\n          connect: {\n            id: courseId\n          }\n        },\n        email\n      }\n    });\n  } else {\n    await prisma.watching_courses.deleteMany({\n      where: {\n        email,\n        course: courseId\n      }\n    });\n  }\n\n  return {\n    status: 200,\n    result: \"\"\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/watch.ts"],"names":["APIHandler","getToken","prisma","watchCourse","req","msg","body","courseId","parseInt","query","id","watching","status","result","Number","isNaN","user","email","watching_courses","upsert","where","email_course","course","create","courses","connect","update","deleteMany"],"mappings":"AAAA,SAA8BA,UAA9B,QAA+C,4BAA/C;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAQA,eAAeF,UAAU,CAACG,WAAD,CAAzB;;AAEA,eAAeA,WAAf,CAA2BC,GAA3B,EAAwC;AACtC,MAAIC,GAAG,GAAGD,GAAG,CAACE,IAAd;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACJ,GAAG,CAACK,KAAJ,CAAUC,EAAX,CAAvB;AACA,MAAG,OAAOL,GAAG,CAACM,QAAX,KAAwB,SAA3B,EAAsC,OAAO;AAACC,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAEtC,MAAGC,MAAM,CAACC,KAAP,CAAaR,QAAb,CAAH,EAA2B,OAAO;AAACK,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAC3B,MAAIG,IAAI,GAAGf,QAAQ,CAACG,GAAD,CAAnB;AACA,MAAIa,KAAJ;;AACA,MAAG,CAACD,IAAJ,EAAU;AACR,QAAG,CAACX,GAAG,CAACY,KAAR,EAAe,OAAO;AAACL,MAAAA,MAAM,EAAC,GAAR;AAAaC,MAAAA,MAAM,EAAC;AAApB,KAAP;AACfI,IAAAA,KAAK,GAAGZ,GAAG,CAACY,KAAZ;AACD,GAHD,MAIKA,KAAK,GAAGD,IAAI,CAACC,KAAb;;AAEL,MAAGZ,GAAG,CAACM,QAAJ,KAAiB,IAApB,EAA0B;AACxB,UAAMT,MAAM,CAACgB,gBAAP,CAAwBC,MAAxB,CAA+B;AACnCC,MAAAA,KAAK,EAAE;AACLC,QAAAA,YAAY,EAAC;AACXC,UAAAA,MAAM,EAACf,QADI;AAEXU,UAAAA;AAFW;AADR,OAD4B;AAOnCM,MAAAA,MAAM,EAAE;AACNC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPf,YAAAA,EAAE,EAAEH;AADG;AADF,SADH;AAMNU,QAAAA;AANM,OAP2B;AAenCS,MAAAA,MAAM,EAAE;AACNF,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPf,YAAAA,EAAE,EAAEH;AADG;AADF,SADH;AAMNU,QAAAA;AANM;AAf2B,KAA/B,CAAN;AAwBD,GAzBD,MA0BK;AACH,UAAMf,MAAM,CAACgB,gBAAP,CAAwBS,UAAxB,CAAmC;AACvCP,MAAAA,KAAK,EAAE;AACLH,QAAAA,KADK;AAELK,QAAAA,MAAM,EAAEf;AAFH;AADgC,KAAnC,CAAN;AAMD;;AAED,SAAO;AAACK,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AACD","sourcesContent":["import { Request, ResultType, APIHandler} from \"../../../../src/apiHelpers\"\nimport { getToken } from \"src/token\"\nimport prisma from \"lib/prisma\";\n\nexport type WatchCourseMsg = {\n  watching: boolean\n  email?: string\n}\nexport type WatchCourseResult = ResultType<typeof watchCourse>\n\nexport default APIHandler(watchCourse)\n\nasync function watchCourse(req:Request) {\n  let msg = req.body as Partial<WatchCourseMsg>\n  let courseId = parseInt(req.query.id as string)\n  if(typeof msg.watching !== 'boolean') return {status: 400, result: \"ERROR: no watching property on request\"} as const\n\n  if(Number.isNaN(courseId)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n  let user = getToken(req)\n  let email:string\n  if(!user) {\n    if(!msg.email) return {status:400, result:\"ERROR: No user logged in and no email provided\"}\n    email = msg.email\n  }\n  else email = user.email\n\n  if(msg.watching === true) {\n    await prisma.watching_courses.upsert({\n      where: {\n        email_course:{\n          course:courseId,\n          email\n        }\n      },\n      create: {\n        courses: {\n          connect: {\n            id: courseId\n          }\n        },\n        email\n      },\n      update: {\n        courses: {\n          connect: {\n            id: courseId\n          }\n        },\n        email\n      }\n    })\n  }\n  else {\n    await prisma.watching_courses.deleteMany({\n      where: {\n        email,\n        course: courseId\n      }\n    })\n  }\n\n  return {status: 200, result: \"\"}\n}\n"]},"metadata":{},"sourceType":"module"}