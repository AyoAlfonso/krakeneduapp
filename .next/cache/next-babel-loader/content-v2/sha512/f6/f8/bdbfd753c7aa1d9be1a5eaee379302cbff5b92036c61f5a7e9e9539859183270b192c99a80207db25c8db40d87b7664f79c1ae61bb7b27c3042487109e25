{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as postmark from 'postmark';\nimport cohortEnrollmentMetadata from './templates/cohort-enrollment/meta.json';\nimport verifiyEmailMetadata from './templates/welcome/meta.json';\nimport resetPasswordMetadata from './templates/password-reset/meta.json';\nimport inviteToCourseMetadata from './templates/invite-to-course/meta.json';\nimport enrollNotificationMetada from './templates/enroll-notification/meta.json';\nimport unenrollMetadata from './templates/cohort-unenroll/meta.json';\nimport watchingNotificationMetadata from './templates/watching-notification/meta.json';\nimport eventRSVPMetadata from './templates/event-rsvp/meta.json';\nimport eventRSVPNoAccountMetadata from './templates/event-rsvp-no-account/meta.json';\nimport eventUpdateNoAccount from './templates/event-update-no-account/meta.json';\nvar client = new postmark.ServerClient(process.env.POSTMARK_TOKEN || '');\nexport const sendResetPasswordEmail = sendEmail(resetPasswordMetadata);\nexport const sendVerificationEmail = sendEmail(verifiyEmailMetadata);\nexport const sendCohortEnrollmentEmail = sendEmail(cohortEnrollmentMetadata);\nexport const sendEventRSVPEmail = sendEmail(eventRSVPMetadata);\nexport const sendEventRSVPNoAccountEmail = sendEmail(eventRSVPNoAccountMetadata);\nexport const sendEventUpdateNoAccountEmail = sendBatchEmail(eventUpdateNoAccount);\nexport const sendInviteToCourseEmail = sendEmail(inviteToCourseMetadata);\nexport const sendEnrollNotificationEmaill = sendEmail(enrollNotificationMetada);\nexport const sendWatchingNotificationEmail = sendBatchEmail(watchingNotificationMetadata);\nexport const sendUnenrollEmail = sendEmail(unenrollMetadata);\nexport function sendEmail(meta) {\n  return async function (email, vars, data) {\n    if (process.env.NODE_ENVIRONMENT === 'production') {\n      try {\n        return client.sendEmailWithTemplate(_objectSpread({\n          From: `wecare@krakenedu.com`,\n          To: email,\n          TemplateAlias: meta.Alias,\n          TemplateModel: vars\n        }, data));\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n}\nexport function sendBatchEmail(meta) {\n  return msgs => {\n    if (process.env.NODE_ENVIRONMENT === 'production') return client.sendEmailBatchWithTemplates(msgs.filter(x => x !== undefined).map(msg => {\n      return _objectSpread({\n        From: `wecare@krakenedu.com`,\n        To: (msg === null || msg === void 0 ? void 0 : msg.email) || '',\n        TemplateAlias: meta.Alias,\n        TemplateModel: (msg === null || msg === void 0 ? void 0 : msg.vars) || {},\n        MessageStream: \"notifications\"\n      }, msg === null || msg === void 0 ? void 0 : msg.data);\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/emails/index.ts"],"names":["postmark","cohortEnrollmentMetadata","verifiyEmailMetadata","resetPasswordMetadata","inviteToCourseMetadata","enrollNotificationMetada","unenrollMetadata","watchingNotificationMetadata","eventRSVPMetadata","eventRSVPNoAccountMetadata","eventUpdateNoAccount","client","ServerClient","process","env","POSTMARK_TOKEN","sendResetPasswordEmail","sendEmail","sendVerificationEmail","sendCohortEnrollmentEmail","sendEventRSVPEmail","sendEventRSVPNoAccountEmail","sendEventUpdateNoAccountEmail","sendBatchEmail","sendInviteToCourseEmail","sendEnrollNotificationEmaill","sendWatchingNotificationEmail","sendUnenrollEmail","meta","email","vars","data","NODE_ENVIRONMENT","sendEmailWithTemplate","From","To","TemplateAlias","Alias","TemplateModel","error","console","log","msgs","sendEmailBatchWithTemplates","filter","x","undefined","map","msg","MessageStream"],"mappings":";;;;;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,sBAAP,MAAmC,wCAAnC;AACA,OAAOC,wBAAP,MAAqC,2CAArC;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,OAAOC,4BAAP,MAAyC,6CAAzC;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,0BAAP,MAAuC,6CAAvC;AACA,OAAOC,oBAAP,MAAiC,+CAAjC;AAIA,IAAIC,MAAM,GAAG,IAAIX,QAAQ,CAACY,YAAb,CAA0BC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8B,EAAxD,CAAb;AAEA,OAAO,MAAMC,sBAAsB,GAAGC,SAAS,CAACd,qBAAD,CAAxC;AACP,OAAO,MAAMe,qBAAqB,GAAGD,SAAS,CAACf,oBAAD,CAAvC;AACP,OAAO,MAAMiB,yBAAyB,GAAGF,SAAS,CAAChB,wBAAD,CAA3C;AACP,OAAO,MAAMmB,kBAAkB,GAAGH,SAAS,CAACT,iBAAD,CAApC;AACP,OAAO,MAAMa,2BAA2B,GAAGJ,SAAS,CAACR,0BAAD,CAA7C;AACP,OAAO,MAAMa,6BAA6B,GAAGC,cAAc,CAACb,oBAAD,CAApD;AACP,OAAO,MAAMc,uBAAuB,GAAGP,SAAS,CAACb,sBAAD,CAAzC;AACP,OAAO,MAAMqB,4BAA4B,GAAGR,SAAS,CAACZ,wBAAD,CAA9C;AACP,OAAO,MAAMqB,6BAA6B,GAAGH,cAAc,CAAChB,4BAAD,CAApD;AACP,OAAO,MAAMoB,iBAAiB,GAAGV,SAAS,CAACX,gBAAD,CAAnC;AAMP,OAAO,SAASW,SAAT,CAA4CW,IAA5C,EAAoD;AACzD,SAAO,gBACLC,KADK,EAELC,IAFK,EAEwBC,IAFxB,EAEsK;AAC3K,QAAGlB,OAAO,CAACC,GAAR,CAAYkB,gBAAZ,KAAiC,YAApC,EAAkD;AAChD,UAAI;AACA,eAAOrB,MAAM,CAACsB,qBAAP;AACCC,UAAAA,IAAI,EAAG,sBADR;AAECC,UAAAA,EAAE,EAAEN,KAFL;AAGCO,UAAAA,aAAa,EAAER,IAAI,CAACS,KAHrB;AAICC,UAAAA,aAAa,EAAER;AAJhB,WAKIC,IALJ,EAAP;AAOH,OARD,CAQE,OAAOQ,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF,GAhBD;AAiBD;AACD,OAAO,SAAShB,cAAT,CAAiDK,IAAjD,EAAyD;AAC9D,SAAQc,IAAD,IAAsN;AAC3N,QAAG7B,OAAO,CAACC,GAAR,CAAYkB,gBAAZ,KAAiC,YAApC,EAAkD,OAAOrB,MAAM,CAACgC,2BAAP,CAAmCD,IAAI,CAACE,MAAL,CAAYC,CAAC,IAAEA,CAAC,KAAIC,SAApB,EAA+BC,GAA/B,CAAmCC,GAAG,IAAE;AAClI;AACGd,QAAAA,IAAI,EAAG,sBADV;AAEEC,QAAAA,EAAE,EAAE,CAAAa,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEnB,KAAL,KAAc,EAFpB;AAGEO,QAAAA,aAAa,EAAER,IAAI,CAACS,KAHtB;AAIEC,QAAAA,aAAa,EAAE,CAAAU,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAElB,IAAL,KAAa,EAJ9B;AAKEmB,QAAAA,aAAa,EAAE;AALjB,SAMKD,GANL,aAMKA,GANL,uBAMKA,GAAG,CAAEjB,IANV;AAQD,KAT2F,CAAnC,CAAP;AAUnD,GAXD;AAYD","sourcesContent":["import * as postmark from 'postmark'\nimport cohortEnrollmentMetadata from './templates/cohort-enrollment/meta.json'\nimport verifiyEmailMetadata from './templates/welcome/meta.json'\nimport resetPasswordMetadata from './templates/password-reset/meta.json'\nimport inviteToCourseMetadata from './templates/invite-to-course/meta.json'\nimport enrollNotificationMetada from './templates/enroll-notification/meta.json'\nimport unenrollMetadata from './templates/cohort-unenroll/meta.json'\nimport watchingNotificationMetadata from './templates/watching-notification/meta.json'\nimport eventRSVPMetadata from './templates/event-rsvp/meta.json'\nimport eventRSVPNoAccountMetadata from './templates/event-rsvp-no-account/meta.json'\nimport eventUpdateNoAccount from './templates/event-update-no-account/meta.json'\n\nimport { Hash } from 'postmark/dist/client/models/client/SupportingTypes'\n\nvar client = new postmark.ServerClient(process.env.POSTMARK_TOKEN || '');\n\nexport const sendResetPasswordEmail = sendEmail(resetPasswordMetadata)\nexport const sendVerificationEmail = sendEmail(verifiyEmailMetadata)\nexport const sendCohortEnrollmentEmail = sendEmail(cohortEnrollmentMetadata)\nexport const sendEventRSVPEmail = sendEmail(eventRSVPMetadata)\nexport const sendEventRSVPNoAccountEmail = sendEmail(eventRSVPNoAccountMetadata)\nexport const sendEventUpdateNoAccountEmail = sendBatchEmail(eventUpdateNoAccount)\nexport const sendInviteToCourseEmail = sendEmail(inviteToCourseMetadata)\nexport const sendEnrollNotificationEmaill = sendEmail(enrollNotificationMetada)\nexport const sendWatchingNotificationEmail = sendBatchEmail(watchingNotificationMetadata)\nexport const sendUnenrollEmail = sendEmail(unenrollMetadata)\n\ntype EmailMetadata = {\n  Alias: string,\n  TestRenderModel: object\n}\nexport function sendEmail<T extends EmailMetadata>(meta:T) {\n  return async function(\n    email: string,\n    vars?: T[\"TestRenderModel\"], data?: Partial<{Metadata?:Hash<string>, Attachments: Array<{Name: string, Content: string, ContentType: string, ContentID: string | null}>}>) {\n    if(process.env.NODE_ENVIRONMENT === 'production') {\n      try {\n          return client.sendEmailWithTemplate({\n                  From: `wecare@krakenedu.com`,\n                  To: email,\n                  TemplateAlias: meta.Alias,\n                  TemplateModel: vars,\n                  ...data\n          })\n      } catch (error) {\n        console.log(error)\n      }\n    }\n  }\n}\nexport function sendBatchEmail<T extends EmailMetadata>(meta:T) {\n  return (msgs:Array<{email: string, vars: T[\"TestRenderModel\"],data?: Partial<{Metadata?:Hash<string>, Attachments: Array<{Name: string, Content: string, ContentType: string, ContentID: string | null}>}>} | undefined>) => {\n    if(process.env.NODE_ENVIRONMENT === 'production') return client.sendEmailBatchWithTemplates(msgs.filter(x=>x!== undefined).map(msg=>{\n      return {\n         From: `wecare@krakenedu.com`,\n        To: msg?.email || '',\n        TemplateAlias: meta.Alias,\n        TemplateModel: msg?.vars || {},\n        MessageStream: \"notifications\",\n        ...msg?.data\n      }\n    }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}