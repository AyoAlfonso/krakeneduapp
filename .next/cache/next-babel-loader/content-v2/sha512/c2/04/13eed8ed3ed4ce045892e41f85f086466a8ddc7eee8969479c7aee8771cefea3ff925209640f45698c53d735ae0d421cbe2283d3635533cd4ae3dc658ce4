{"ast":null,"code":"import { APIHandler } from 'src/apiHelpers';\nimport * as rt from 'runtypes';\nimport { getToken } from 'src/token';\nimport { v4 as uuidv4 } from 'uuid';\nimport prisma from \"lib/prisma\";\nexport default APIHandler({\n  GET: getDiscounts,\n  POST: createDiscount\n});\n\nasync function getDiscounts(req) {\n  let user = getToken(req);\n  if (!user) return {\n    status: 401,\n    result: \"ERROR: no user logged in\"\n  };\n  let courseID = parseInt(req.query.id);\n  if (Number.isNaN(courseID)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let [maintainer, discounts] = await Promise.all([prisma.course_maintainers.findUnique({\n    where: {\n      course_maintainer: {\n        course: courseID,\n        maintainer: user.id\n      }\n    }\n  }), prisma.course_discounts.findMany({\n    where: {\n      course: courseID,\n      deleted: false\n    }\n  })]);\n  if (!maintainer) return {\n    status: 401,\n    result: \"ERROR: user is not a maintainer of this course\"\n  };\n  return {\n    status: 200,\n    result: discounts\n  };\n}\n\nexport const CreateDiscountValidator = rt.Record({\n  amount: rt.Number,\n  name: rt.String,\n  type: rt.Union(rt.Literal('percentage'), rt.Literal('absolute')),\n  max_redeems: rt.Number.Or(rt.Undefined)\n});\n\nasync function createDiscount(req) {\n  let msg;\n\n  try {\n    msg = CreateDiscountValidator.check(req.body);\n  } catch (e) {\n    return {\n      status: 400,\n      result: e.toString()\n    };\n  }\n\n  let user = getToken(req);\n  if (!user) return {\n    status: 401,\n    result: \"ERROR: no user logged in\"\n  };\n  let courseID = parseInt(req.query.id);\n  if (Number.isNaN(courseID)) return {\n    status: 400,\n    result: \"ERROR: Course id is not a number\"\n  };\n  let maintainer = await prisma.course_maintainers.findUnique({\n    where: {\n      course_maintainer: {\n        course: courseID,\n        maintainer: user.id\n      }\n    }\n  });\n  if (!maintainer) return {\n    status: 401,\n    result: \"ERROR: user is not a maintainer of this course\"\n  };\n  let discount = await prisma.course_discounts.create({\n    data: {\n      courses: {\n        connect: {\n          id: courseID\n        }\n      },\n      name: msg.name,\n      type: msg.type,\n      code: uuidv4(),\n      amount: msg.amount,\n      max_redeems: msg.max_redeems\n    }\n  });\n  return {\n    status: 200,\n    result: discount\n  };\n}","map":{"version":3,"sources":["/Users/ayooluwaalfonso/code/krakeneduapp/pages/api/courses/[id]/discounts.ts"],"names":["APIHandler","rt","getToken","v4","uuidv4","prisma","GET","getDiscounts","POST","createDiscount","req","user","status","result","courseID","parseInt","query","id","Number","isNaN","maintainer","discounts","Promise","all","course_maintainers","findUnique","where","course_maintainer","course","course_discounts","findMany","deleted","CreateDiscountValidator","Record","amount","name","String","type","Union","Literal","max_redeems","Or","Undefined","msg","check","body","e","toString","discount","create","data","courses","connect","code"],"mappings":"AAAA,SAAqBA,UAArB,QAA+C,gBAA/C;AACA,OAAO,KAAKC,EAAZ,MAAoB,UAApB;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,MAAP,MAAmB,YAAnB;AAEA,eAAeL,UAAU,CAAC;AAACM,EAAAA,GAAG,EAAEC,YAAN;AAAoBC,EAAAA,IAAI,EAAEC;AAA1B,CAAD,CAAzB;;AAGA,eAAeF,YAAf,CAA4BG,GAA5B,EAAyC;AACvC,MAAIC,IAAI,GAAGT,QAAQ,CAACQ,GAAD,CAAnB;AACA,MAAG,CAACC,IAAJ,EAAU,OAAO;AAACC,IAAAA,MAAM,EAAE,GAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAAP;AAEV,MAAIC,QAAQ,GAAGC,QAAQ,CAACL,GAAG,CAACM,KAAJ,CAAUC,EAAX,CAAvB;AACA,MAAGC,MAAM,CAACC,KAAP,CAAaL,QAAb,CAAH,EAA2B,OAAO;AAACF,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAE3B,MAAI,CAACO,UAAD,EAAaC,SAAb,IAA0B,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC9ClB,MAAM,CAACmB,kBAAP,CAA0BC,UAA1B,CAAqC;AAACC,IAAAA,KAAK,EAAC;AAACC,MAAAA,iBAAiB,EAAC;AAACC,QAAAA,MAAM,EAAEd,QAAT;AAAmBM,QAAAA,UAAU,EAAET,IAAI,CAACM;AAApC;AAAnB;AAAP,GAArC,CAD8C,EAE9CZ,MAAM,CAACwB,gBAAP,CAAwBC,QAAxB,CAAiC;AAACJ,IAAAA,KAAK,EAAE;AAACE,MAAAA,MAAM,EAAEd,QAAT;AAAmBiB,MAAAA,OAAO,EAAE;AAA5B;AAAR,GAAjC,CAF8C,CAAZ,CAApC;AAKA,MAAG,CAACX,UAAJ,EAAgB,OAAO;AAACR,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAP;AAChB,SAAO;AAACD,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAEQ;AAArB,GAAP;AACD;;AAKD,OAAO,MAAMW,uBAAuB,GAAG/B,EAAE,CAACgC,MAAH,CAAU;AAC/CC,EAAAA,MAAM,EAAEjC,EAAE,CAACiB,MADoC;AAE/CiB,EAAAA,IAAI,EAAElC,EAAE,CAACmC,MAFsC;AAG/CC,EAAAA,IAAI,EAAEpC,EAAE,CAACqC,KAAH,CAASrC,EAAE,CAACsC,OAAH,CAAW,YAAX,CAAT,EAAmCtC,EAAE,CAACsC,OAAH,CAAW,UAAX,CAAnC,CAHyC;AAI/CC,EAAAA,WAAW,EAAEvC,EAAE,CAACiB,MAAH,CAAUuB,EAAV,CAAaxC,EAAE,CAACyC,SAAhB;AAJkC,CAAV,CAAhC;;AAOP,eAAejC,cAAf,CAA8BC,GAA9B,EAA4C;AAC1C,MAAIiC,GAAJ;;AACA,MAAI;AAACA,IAAAA,GAAG,GAAGX,uBAAuB,CAACY,KAAxB,CAA8BlC,GAAG,CAACmC,IAAlC,CAAN;AAA8C,GAAnD,CACA,OAAMC,CAAN,EAAS;AAAC,WAAO;AAAClC,MAAAA,MAAM,EAAC,GAAR;AAAaC,MAAAA,MAAM,EAACiC,CAAC,CAACC,QAAF;AAApB,KAAP;AAAmD;;AAE7D,MAAIpC,IAAI,GAAGT,QAAQ,CAACQ,GAAD,CAAnB;AACA,MAAG,CAACC,IAAJ,EAAU,OAAO;AAACC,IAAAA,MAAM,EAAE,GAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAAP;AAEV,MAAIC,QAAQ,GAAGC,QAAQ,CAACL,GAAG,CAACM,KAAJ,CAAUC,EAAX,CAAvB;AACA,MAAGC,MAAM,CAACC,KAAP,CAAaL,QAAb,CAAH,EAA2B,OAAO;AAACF,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAP;AAC3B,MAAIO,UAAU,GAAG,MAAMf,MAAM,CAACmB,kBAAP,CAA0BC,UAA1B,CAAqC;AAACC,IAAAA,KAAK,EAAC;AAACC,MAAAA,iBAAiB,EAAC;AAACC,QAAAA,MAAM,EAAEd,QAAT;AAAmBM,QAAAA,UAAU,EAAET,IAAI,CAACM;AAApC;AAAnB;AAAP,GAArC,CAAvB;AAEA,MAAG,CAACG,UAAJ,EAAgB,OAAO;AAACR,IAAAA,MAAM,EAAC,GAAR;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAP;AAEhB,MAAImC,QAAQ,GAAG,MAAM3C,MAAM,CAACwB,gBAAP,CAAwBoB,MAAxB,CAA+B;AAClDC,IAAAA,IAAI,EAAC;AACHC,MAAAA,OAAO,EAAE;AAACC,QAAAA,OAAO,EAAE;AAACnC,UAAAA,EAAE,EAAEH;AAAL;AAAV,OADN;AAEHqB,MAAAA,IAAI,EAAEQ,GAAG,CAACR,IAFP;AAGHE,MAAAA,IAAI,EAAEM,GAAG,CAACN,IAHP;AAIHgB,MAAAA,IAAI,EAAEjD,MAAM,EAJT;AAKH8B,MAAAA,MAAM,EAAES,GAAG,CAACT,MALT;AAMHM,MAAAA,WAAW,EAAEG,GAAG,CAACH;AANd;AAD6C,GAA/B,CAArB;AAUA,SAAO;AAAC5B,IAAAA,MAAM,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAEmC;AAAtB,GAAP;AACD","sourcesContent":["import { ResultType, APIHandler, Request} from 'src/apiHelpers'\nimport * as rt from 'runtypes'\nimport { getToken } from 'src/token'\nimport { v4 as uuidv4 } from 'uuid';\nimport prisma from \"lib/prisma\";\n\nexport default APIHandler({GET: getDiscounts, POST: createDiscount})\nexport type GetDiscountsResult = ResultType<typeof getDiscounts>\n\nasync function getDiscounts(req:Request) {\n  let user = getToken(req)\n  if(!user) return {status: 401 , result: \"ERROR: no user logged in\"} as const\n\n  let courseID = parseInt(req.query.id as string)\n  if(Number.isNaN(courseID)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n\n  let [maintainer, discounts] = await Promise.all([\n    prisma.course_maintainers.findUnique({where:{course_maintainer:{course: courseID, maintainer: user.id}}}),\n    prisma.course_discounts.findMany({where: {course: courseID, deleted: false}})\n  ])\n\n  if(!maintainer) return {status:401, result: \"ERROR: user is not a maintainer of this course\"} as const\n  return {status:200, result: discounts} as const\n}\n\nexport type CreateDiscountMsg = rt.Static<typeof CreateDiscountValidator>\nexport type CreateDiscountResult = ResultType<typeof createDiscount>\n\nexport const CreateDiscountValidator = rt.Record({\n  amount: rt.Number,\n  name: rt.String,\n  type: rt.Union(rt.Literal('percentage'), rt.Literal('absolute')),\n  max_redeems: rt.Number.Or(rt.Undefined),\n})\n\nasync function createDiscount(req: Request) {\n  let msg\n  try {msg = CreateDiscountValidator.check(req.body)}\n  catch(e) {return {status:400, result:e.toString()} as const }\n\n  let user = getToken(req)\n  if(!user) return {status: 401 , result: \"ERROR: no user logged in\"} as const\n\n  let courseID = parseInt(req.query.id as string)\n  if(Number.isNaN(courseID)) return {status: 400, result: \"ERROR: Course id is not a number\"} as const\n  let maintainer = await prisma.course_maintainers.findUnique({where:{course_maintainer:{course: courseID, maintainer: user.id}}})\n\n  if(!maintainer) return {status:401, result: \"ERROR: user is not a maintainer of this course\"} as const\n\n  let discount = await prisma.course_discounts.create({\n    data:{\n      courses: {connect: {id: courseID}},\n      name: msg.name,\n      type: msg.type,\n      code: uuidv4(),\n      amount: msg.amount,\n      max_redeems: msg.max_redeems\n    }\n  })\n  return {status: 200, result: discount} as const\n}\n"]},"metadata":{},"sourceType":"module"}